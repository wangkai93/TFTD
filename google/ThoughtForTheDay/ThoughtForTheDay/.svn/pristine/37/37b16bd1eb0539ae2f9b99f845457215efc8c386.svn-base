com.ceosoftcenters.thoughtfortheday.activity.BaseActivity -> com.ceosoftcenters.thoughtfortheday.activity.BaseActivity:
    int webviewScale -> b
    com.ceosoftcenters.thoughtfortheday.application.TFTDApplication tftdApp -> a
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void setWebViewContentFromAssets(android.webkit.WebView,java.lang.String) -> a
    void setWebViewContent(android.webkit.WebView,java.lang.String) -> b
    void onStart() -> onStart
    void onStop() -> onStop
com.ceosoftcenters.thoughtfortheday.activity.BaseActivity$1 -> com.ceosoftcenters.thoughtfortheday.activity.a:
    com.ceosoftcenters.thoughtfortheday.activity.BaseActivity this$0 -> a
    android.webkit.WebView val$wv -> b
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
com.ceosoftcenters.thoughtfortheday.activity.EdgarCayceActivity -> com.ceosoftcenters.thoughtfortheday.activity.EdgarCayceActivity:
    android.widget.RelativeLayout edgarCayceRL -> b
    android.widget.Button edgarButton -> c
    android.widget.Button aboutAREButton -> d
    android.webkit.WebView edgar_cayce_webView -> e
    android.webkit.WebView about_are_webView -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onStop() -> onStop
    android.widget.Button access$0(com.ceosoftcenters.thoughtfortheday.activity.EdgarCayceActivity) -> a
    android.widget.Button access$1(com.ceosoftcenters.thoughtfortheday.activity.EdgarCayceActivity) -> b
    android.webkit.WebView access$2(com.ceosoftcenters.thoughtfortheday.activity.EdgarCayceActivity) -> c
    android.webkit.WebView access$3(com.ceosoftcenters.thoughtfortheday.activity.EdgarCayceActivity) -> d
com.ceosoftcenters.thoughtfortheday.activity.EdgarCayceActivity$1 -> com.ceosoftcenters.thoughtfortheday.activity.b:
    com.ceosoftcenters.thoughtfortheday.activity.EdgarCayceActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceosoftcenters.thoughtfortheday.activity.EdgarCayceActivity$2 -> com.ceosoftcenters.thoughtfortheday.activity.c:
    com.ceosoftcenters.thoughtfortheday.activity.EdgarCayceActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity -> com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity:
    android.widget.ViewFlipper favoritesViewFlipper -> b
    android.widget.Button edit -> c
    android.widget.ListView favoriteList -> d
    android.widget.TextView favoriteTitle -> e
    java.util.List favoriteListData -> f
    com.ceosoftcenters.thoughtfortheday.sqlite.ThoughtsInfoOperater opertor -> g
    android.view.GestureDetector gestureDetector -> h
    android.view.View$OnTouchListener gestureListener -> i
    android.view.View lastModifyReadStatusView -> j
    java.lang.String selectedId -> k
    com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListSimpleAdapter adapter -> l
    com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter adapter1 -> m
    android.widget.RelativeLayout readingRL -> n
    android.widget.Button favorites -> o
    android.widget.TextView titleText -> p
    android.webkit.WebView wv -> q
    java.lang.String selectedItemTitle -> r
    java.lang.String selectedItemBody -> s
    java.lang.String selectedItemBgIndex -> t
    android.util.DisplayMetrics dm -> u
    java.lang.String content -> v
    int bodySize -> w
    int titleSize -> x
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void getWidgetInstanceForFavoriteListView() -> a
    void reSetDataForFavoriteList() -> b
    void onDestroy() -> onDestroy
    void onStart() -> onStart
    void onStop() -> onStop
    android.view.View access$0(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity) -> a
    void access$1(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity,android.view.View) -> a
    android.widget.ListView access$2(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity) -> b
    void access$3(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity,int) -> a
    android.widget.Button access$4(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity) -> c
    void access$5(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity,android.view.View) -> b
    void access$6(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity,java.lang.String) -> a
    void access$7(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity,com.ceosoftcenters.thoughtfortheday.sqlite.ThoughtsInfoOperater) -> a
    com.ceosoftcenters.thoughtfortheday.sqlite.ThoughtsInfoOperater access$8(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity) -> d
    java.lang.String access$9(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity) -> e
    java.util.List access$10(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity) -> f
    com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListSimpleAdapter access$11(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity) -> g
    void access$12(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity) -> h
    void access$13(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity,com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter) -> a
    com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter access$14(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity) -> i
    void access$15(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity,com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListSimpleAdapter) -> a
    void access$16(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity,java.lang.String) -> b
    void access$17(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity,java.lang.String) -> c
    void access$18(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity,java.lang.String) -> d
    void access$19(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity) -> j
    android.view.GestureDetector access$20(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity) -> k
    void access$21(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity) -> l
    android.webkit.WebView access$22(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity) -> m
com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity$1 -> com.ceosoftcenters.thoughtfortheday.activity.d:
    com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity$2 -> com.ceosoftcenters.thoughtfortheday.activity.e:
    com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity$3 -> com.ceosoftcenters.thoughtfortheday.activity.f:
    com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity$4 -> com.ceosoftcenters.thoughtfortheday.activity.g:
    com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity$MyGestureDetector -> com.ceosoftcenters.thoughtfortheday.activity.h:
    com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity this$0 -> a
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity access$0(com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity$MyGestureDetector) -> a
com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity$MyGestureDetector$1 -> com.ceosoftcenters.thoughtfortheday.activity.i:
    com.ceosoftcenters.thoughtfortheday.activity.FavoriteActivity$MyGestureDetector this$1 -> a
    int val$pos -> b
    void onClick(android.view.View) -> onClick
com.ceosoftcenters.thoughtfortheday.activity.InfoActivity -> com.ceosoftcenters.thoughtfortheday.activity.InfoActivity:
    android.content.SharedPreferences settings -> e
    android.widget.SeekBar musicControl -> f
    android.widget.ImageView musicClose -> g
    android.media.AudioManager audioManager -> b
    com.ceosoftcenters.thoughtfortheday.application.TFTDApplication tftdApp -> h
    android.widget.RelativeLayout infoRL -> i
    boolean haveMusic -> j
    android.widget.TextView copyrightLine1 -> k
    android.widget.TextView copyrightLine2 -> l
    android.widget.ImageView copyRightImage -> m
    java.lang.Thread myVolThread -> c
    android.os.Handler myHandler -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onStart() -> onStart
    void onStop() -> onStop
    android.widget.SeekBar access$0(com.ceosoftcenters.thoughtfortheday.activity.InfoActivity) -> a
    com.ceosoftcenters.thoughtfortheday.application.TFTDApplication access$1(com.ceosoftcenters.thoughtfortheday.activity.InfoActivity) -> b
    android.widget.ImageView access$2(com.ceosoftcenters.thoughtfortheday.activity.InfoActivity) -> c
    void access$3(com.ceosoftcenters.thoughtfortheday.activity.InfoActivity,boolean) -> a
    boolean access$4(com.ceosoftcenters.thoughtfortheday.activity.InfoActivity) -> d
com.ceosoftcenters.thoughtfortheday.activity.InfoActivity$1 -> com.ceosoftcenters.thoughtfortheday.activity.j:
    com.ceosoftcenters.thoughtfortheday.activity.InfoActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.ceosoftcenters.thoughtfortheday.activity.InfoActivity$2 -> com.ceosoftcenters.thoughtfortheday.activity.k:
    com.ceosoftcenters.thoughtfortheday.activity.InfoActivity this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
com.ceosoftcenters.thoughtfortheday.activity.InfoActivity$3 -> com.ceosoftcenters.thoughtfortheday.activity.l:
    com.ceosoftcenters.thoughtfortheday.activity.InfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceosoftcenters.thoughtfortheday.activity.InfoActivity$4 -> com.ceosoftcenters.thoughtfortheday.activity.m:
    com.ceosoftcenters.thoughtfortheday.activity.InfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceosoftcenters.thoughtfortheday.activity.InfoActivity$myVolThread -> com.ceosoftcenters.thoughtfortheday.activity.n:
    com.ceosoftcenters.thoughtfortheday.activity.InfoActivity this$0 -> a
    void run() -> run
com.ceosoftcenters.thoughtfortheday.activity.MyTabActivity -> com.ceosoftcenters.thoughtfortheday.activity.MyTabActivity:
    byte[] SALT -> a
    com.google.android.vending.licensing.LicenseCheckerCallback mLicenseCheckerCallback -> b
    com.google.android.vending.licensing.LicenseChecker mChecker -> c
    com.ceosoftcenters.thoughtfortheday.application.TFTDApplication tftdApp -> d
    boolean isMdpiTablet -> e
    android.widget.TabWidget tw -> f
    android.widget.ImageView tab_icon -> g
    android.widget.TextView tab_title -> h
    android.widget.TabHost tabHost -> i
    void onCreate(android.os.Bundle) -> onCreate
    android.view.View createIndicatorView(java.lang.String,int) -> a
    void onPause() -> onPause
    void onResume() -> onResume
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void onStart() -> onStart
    void onStop() -> onStop
    com.google.android.vending.licensing.LicenseChecker access$1(com.ceosoftcenters.thoughtfortheday.activity.MyTabActivity) -> a
    com.google.android.vending.licensing.LicenseCheckerCallback access$2(com.ceosoftcenters.thoughtfortheday.activity.MyTabActivity) -> b
com.ceosoftcenters.thoughtfortheday.activity.MyTabActivity$1 -> com.ceosoftcenters.thoughtfortheday.activity.o:
    boolean mRetry -> a
    com.ceosoftcenters.thoughtfortheday.activity.MyTabActivity this$0 -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.ceosoftcenters.thoughtfortheday.activity.MyTabActivity$2 -> com.ceosoftcenters.thoughtfortheday.activity.p:
    com.ceosoftcenters.thoughtfortheday.activity.MyTabActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.ceosoftcenters.thoughtfortheday.activity.MyTabActivity$3 -> com.ceosoftcenters.thoughtfortheday.activity.q:
    com.ceosoftcenters.thoughtfortheday.activity.MyTabActivity this$0 -> a
    boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent) -> onKey
com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity -> com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity:
    boolean isNewActivity -> b
    android.widget.ViewFlipper thoughtsViewFlipper -> c
    android.widget.RelativeLayout splashRL -> d
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$MyHandler myHandler -> e
    int GETDATA_FROM_BACKEND_SUCCESS -> f
    int GETDATA_FROM_BACKEND_NO_INTERNET -> g
    int GETDATA_FROM_BACKEND_ERROR_INTERNET -> h
    int UNNECESSARY_RE_GETDATA_FROM_BACKEND -> i
    com.ceosoftcenters.thoughtfortheday.sqlite.ThoughtsForTheDayOperater tftdOperater -> j
    android.widget.Button leftButton -> k
    android.widget.Button rightButton -> l
    android.widget.TextView title -> m
    android.webkit.WebView event -> n
    com.ceosoftcenters.thoughtfortheday.widget.ThoughtsGallery gallery -> o
    int year -> p
    int month -> q
    int day -> r
    java.util.ArrayList list -> s
    int index -> t
    com.ceosoftcenters.thoughtfortheday.sqlite.ThoughtsInfoOperater opertor -> u
    java.util.Calendar calendar -> v
    com.ceosoftcenters.thoughtfortheday.adapter.ThoughtsAdapter thoughtsAdapter -> w
    java.lang.String app_url_bitly -> x
    com.ceosoftcenters.thoughtfortheday.facebook.Facebook mFacebook -> y
    com.ceosoftcenters.thoughtfortheday.facebook.PostFacebookItem postFacebookItem -> z
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp mTwitter -> A
    android.view.View$OnClickListener buttonListener -> B
    android.content.DialogInterface$OnClickListener onselectedListener -> C
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp$TwDialogListener mTwLoginDialogListener -> D
    int[] $SWITCH_TABLE$com$ceosoftcenters$thoughtfortheday$activity$ThoughtsActivity$MESSAGE -> E
    int[] $SWITCH_TABLE$com$ceosoftcenters$thoughtfortheday$activity$ThoughtsActivity$FROM -> F
    void onCreate(android.os.Bundle) -> onCreate
    java.lang.String getDate(java.util.Date) -> a
    java.util.Date getTodayDate() -> a
    java.util.Date getBeforeDate(java.util.Date) -> b
    java.util.Date getAfterDate(java.util.Date) -> c
    void onPause() -> onPause
    void onResume() -> onResume
    java.lang.String getFromAssets(java.lang.String) -> a
    void onDestroy() -> onDestroy
    void onStart() -> onStart
    void onStop() -> onStop
    android.content.DialogInterface$OnClickListener access$0(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> a
    com.ceosoftcenters.thoughtfortheday.sqlite.ThoughtsInfoOperater access$1(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> b
    java.util.ArrayList access$2(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> c
    int access$3(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> d
    java.lang.String access$4(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> e
    com.ceosoftcenters.thoughtfortheday.facebook.Facebook access$5(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> f
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp access$6(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> g
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp$TwDialogListener access$7(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> h
    void access$8(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity,com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$FROM,com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$MESSAGE) -> a
    int access$9() -> b
    int access$10() -> c
    int access$11() -> d
    void access$12(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> i
    com.ceosoftcenters.thoughtfortheday.sqlite.ThoughtsForTheDayOperater access$13(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> j
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$MyHandler access$14(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> k
    int access$15() -> e
    void access$16(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity,int) -> a
    android.widget.Button access$17(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> l
    android.widget.Button access$18(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> m
    com.ceosoftcenters.thoughtfortheday.widget.ThoughtsGallery access$19(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> n
    android.widget.TextView access$20(com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity) -> o
    java.lang.String access$21$46e13eda(int) -> a
    int[] $SWITCH_TABLE$com$ceosoftcenters$thoughtfortheday$activity$ThoughtsActivity$MESSAGE() -> f
    int[] $SWITCH_TABLE$com$ceosoftcenters$thoughtfortheday$activity$ThoughtsActivity$FROM() -> g
com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$1 -> com.ceosoftcenters.thoughtfortheday.activity.r:
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$2 -> com.ceosoftcenters.thoughtfortheday.activity.s:
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$3 -> com.ceosoftcenters.thoughtfortheday.activity.t:
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity this$0 -> a
    void onError(java.lang.String) -> a
    void onComplete(java.lang.String) -> b
com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$4 -> com.ceosoftcenters.thoughtfortheday.activity.u:
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$5 -> com.ceosoftcenters.thoughtfortheday.activity.v:
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$6 -> com.ceosoftcenters.thoughtfortheday.activity.w:
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$FROM -> com.ceosoftcenters.thoughtfortheday.activity.x:
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$FROM TWITTER_POST -> a
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$FROM TWITTER_LOGIN -> b
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$FROM[] ENUM$VALUES -> c
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$FROM[] values() -> values
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$FROM valueOf(java.lang.String) -> valueOf
com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$LoginDialogListener -> com.ceosoftcenters.thoughtfortheday.activity.y:
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity this$0 -> a
    void onComplete(android.os.Bundle) -> a
    void onFacebookError(com.ceosoftcenters.thoughtfortheday.facebook.FacebookError) -> a
    void onError(com.ceosoftcenters.thoughtfortheday.facebook.DialogError) -> a
    void onCancel() -> a
com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$MESSAGE -> com.ceosoftcenters.thoughtfortheday.activity.z:
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$MESSAGE SUCCESS -> a
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$MESSAGE DUPLICATE -> b
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$MESSAGE FAILED -> c
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$MESSAGE CANCELLED -> d
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$MESSAGE[] ENUM$VALUES -> e
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$MESSAGE[] values() -> values
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$MESSAGE valueOf(java.lang.String) -> valueOf
com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$MyHandler -> com.ceosoftcenters.thoughtfortheday.activity.aa:
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$MyThread -> com.ceosoftcenters.thoughtfortheday.activity.ab:
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity this$0 -> a
    void run() -> run
com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity$SampleDialogListener -> com.ceosoftcenters.thoughtfortheday.activity.ac:
    com.ceosoftcenters.thoughtfortheday.activity.ThoughtsActivity this$0 -> a
    void onComplete(android.os.Bundle) -> a
com.ceosoftcenters.thoughtfortheday.activity.TipsActivity -> com.ceosoftcenters.thoughtfortheday.activity.TipsActivity:
    android.widget.RelativeLayout tipsRL -> b
    android.widget.Button studyReadingsButton -> c
    android.widget.Button ecMaterialsButton -> d
    android.webkit.WebView study_readings_webView -> e
    android.webkit.WebView ec_materials_webView -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onStop() -> onStop
    android.widget.Button access$0(com.ceosoftcenters.thoughtfortheday.activity.TipsActivity) -> a
    android.widget.Button access$1(com.ceosoftcenters.thoughtfortheday.activity.TipsActivity) -> b
    android.webkit.WebView access$2(com.ceosoftcenters.thoughtfortheday.activity.TipsActivity) -> c
    android.webkit.WebView access$3(com.ceosoftcenters.thoughtfortheday.activity.TipsActivity) -> d
com.ceosoftcenters.thoughtfortheday.activity.TipsActivity$1 -> com.ceosoftcenters.thoughtfortheday.activity.ad:
    com.ceosoftcenters.thoughtfortheday.activity.TipsActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceosoftcenters.thoughtfortheday.activity.TipsActivity$2 -> com.ceosoftcenters.thoughtfortheday.activity.ae:
    com.ceosoftcenters.thoughtfortheday.activity.TipsActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter -> com.ceosoftcenters.thoughtfortheday.a.a:
    android.view.LayoutInflater mInflater -> a
    android.content.Context context -> b
    int mViewResourceId -> c
    int[] mTo -> d
    java.util.List favoriteListData -> e
    int flagPos -> f
    com.ceosoftcenters.thoughtfortheday.sqlite.ThoughtsInfoOperater opertor -> g
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int access$0(com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter) -> a
    void access$1(com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter,int) -> a
    java.util.List access$2(com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter) -> b
    com.ceosoftcenters.thoughtfortheday.sqlite.ThoughtsInfoOperater access$3(com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter) -> c
com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter$1 -> com.ceosoftcenters.thoughtfortheday.a.b:
    com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter this$0 -> a
    com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter$ViewHolder val$holder -> b
    int val$position -> c
    android.view.ViewGroup val$parent -> d
    void onClick(android.view.View) -> onClick
com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter$2 -> com.ceosoftcenters.thoughtfortheday.a.c:
    com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter this$0 -> a
    int val$position -> b
    void onClick(android.view.View) -> onClick
com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter$ViewHolder -> com.ceosoftcenters.thoughtfortheday.a.d:
    android.widget.Button leftBt -> a
    android.widget.TextView title -> b
    android.widget.TextView body -> c
    android.widget.TextView id -> d
    android.widget.Button rightBt -> e
    com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListBaseAdapter this$0 -> f
com.ceosoftcenters.thoughtfortheday.adapter.FavoriteListSimpleAdapter -> com.ceosoftcenters.thoughtfortheday.a.e:
    android.widget.Button delete -> a
    android.widget.Button rightBt -> b
    java.util.List favoriteListData -> c
    android.view.LayoutInflater mInflater -> d
    int mViewResourceId -> e
    android.widget.TextView title -> f
    android.widget.TextView context -> g
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.ceosoftcenters.thoughtfortheday.adapter.ThoughtsAdapter -> com.ceosoftcenters.thoughtfortheday.a.f:
    com.ceosoftcenters.thoughtfortheday.sqlite.ThoughtsInfoOperater opertor -> a
    android.view.LayoutInflater mInflater -> b
    android.content.Context context -> c
    int mViewResourceId -> d
    int[] imageIDs -> e
    java.util.ArrayList list -> f
    int[] mTo -> g
    java.util.HashMap map -> h
    android.util.DisplayMetrics dm -> i
    java.lang.String body -> j
    android.graphics.Bitmap currentBg -> k
    int bodySize -> l
    int titleSize -> m
    android.view.View$OnClickListener listener -> n
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.ceosoftcenters.thoughtfortheday.adapter.ThoughtsAdapter$ViewHolder -> com.ceosoftcenters.thoughtfortheday.a.g:
    android.widget.RelativeLayout relativeLayout -> a
    android.widget.Button leftBt -> b
    android.webkit.WebView webView -> c
    android.widget.Button rightBt -> d
    com.ceosoftcenters.thoughtfortheday.adapter.ThoughtsAdapter this$0 -> e
com.ceosoftcenters.thoughtfortheday.application.TFTDApplication -> com.ceosoftcenters.thoughtfortheday.application.TFTDApplication:
    boolean needReloadDataFromBackend -> e
    boolean isMdpiTablet -> f
    android.media.MediaPlayer pageTurnMedia -> g
    android.media.MediaPlayer backgroundMedia -> h
    int currentPositionOfBGMedia -> i
    int[] bolFavourite -> a
    java.util.ArrayList thoughtsGalleryDataListSet -> j
    int selectedPositionOfGallery -> k
    android.graphics.Typeface normalFont -> b
    android.graphics.Typeface boldFont -> c
    int[] imageIDs -> d
    int musicVolume -> l
    boolean haveMusic -> m
    android.content.SharedPreferences sp -> n
    android.media.AudioManager audioManager -> o
    java.lang.String createDateStrPrefix -> p
    com.ceosoftcenters.thoughtfortheday.sqlite.ThoughtsForTheDayOperater thoughtsTableOperator -> q
    com.ceosoftcenters.thoughtfortheday.sqlite.ThoughtsInfoOperater favoriteTableOperator -> r
    java.text.SimpleDateFormat dateFormat -> s
    java.util.Calendar calendar -> t
    boolean isNeedReloadDataFromBackend() -> a
    void setNeedReloadDataFromBackend$1385ff() -> b
    boolean isMdpiTablet() -> c
    void setMdpiTablet(boolean) -> a
    int[] getImageIDs() -> d
    java.util.ArrayList getGalleryDataSet() -> e
    int getSelectedPositionOfGallery() -> f
    void setSelectedPositionOfGallery(int) -> a
    boolean isHaveMusic() -> g
    int getMusicVolume() -> h
    void setMusicVolume(int) -> b
    void getThoughtsImagesBackground() -> i
    void onCreate() -> onCreate
    boolean checkSoundON() -> j
    void startBgMusic() -> k
    void addJustMusicVolume(int) -> c
    void saveMusicSettings(boolean) -> b
    void reSaveMusicVolume() -> l
    void pauseOrStopBGMusic() -> m
    void overRideDBfile(java.io.File) -> a
    boolean haveAvaliableNetWork() -> n
    void setThoughtsDataForGallery$1385ff() -> o
    java.lang.String getYesterdaysStr(int) -> d
    void setBooleanFavorite() -> p
com.ceosoftcenters.thoughtfortheday.facebook.BaseDialogListener -> com.ceosoftcenters.thoughtfortheday.b.a:
    void onFacebookError(com.ceosoftcenters.thoughtfortheday.facebook.FacebookError) -> a
    void onError(com.ceosoftcenters.thoughtfortheday.facebook.DialogError) -> a
    void onCancel() -> a
com.ceosoftcenters.thoughtfortheday.facebook.DialogError -> com.ceosoftcenters.thoughtfortheday.b.b:
    int mErrorCode -> a
    java.lang.String mFailingUrl -> b
com.ceosoftcenters.thoughtfortheday.facebook.Facebook -> com.ceosoftcenters.thoughtfortheday.b.c:
    java.lang.String OAUTH_ENDPOINT -> a
    java.lang.String UI_SERVER -> b
    java.lang.String GRAPH_BASE_URL -> c
    java.lang.String RESTSERVER_URL -> d
    java.lang.String attachment -> e
    java.lang.String mAccessToken -> f
    long mAccessExpires -> g
    java.lang.String setAttachment(com.ceosoftcenters.thoughtfortheday.facebook.PostFacebookItem) -> a
    void authorize(android.content.Context,java.lang.String,java.lang.String[],com.ceosoftcenters.thoughtfortheday.facebook.Facebook$DialogListener) -> a
    void dialog(android.content.Context,java.lang.String,com.ceosoftcenters.thoughtfortheday.facebook.Facebook$DialogListener) -> a
    void dialog(android.content.Context,java.lang.String,android.os.Bundle,com.ceosoftcenters.thoughtfortheday.facebook.Facebook$DialogListener) -> a
    boolean isSessionValid() -> a
    java.lang.String getAccessToken() -> b
    long getAccessExpires() -> c
    void setAccessToken(java.lang.String) -> a
    void setAccessExpiresIn(java.lang.String) -> b
com.ceosoftcenters.thoughtfortheday.facebook.Facebook$1 -> com.ceosoftcenters.thoughtfortheday.b.d:
    com.ceosoftcenters.thoughtfortheday.facebook.Facebook this$0 -> a
    com.ceosoftcenters.thoughtfortheday.facebook.Facebook$DialogListener val$listener -> b
    void onComplete(android.os.Bundle) -> a
    void onError(com.ceosoftcenters.thoughtfortheday.facebook.DialogError) -> a
    void onFacebookError(com.ceosoftcenters.thoughtfortheday.facebook.FacebookError) -> a
    void onCancel() -> a
com.ceosoftcenters.thoughtfortheday.facebook.Facebook$DialogListener -> com.ceosoftcenters.thoughtfortheday.b.e:
    void onComplete(android.os.Bundle) -> a
    void onFacebookError(com.ceosoftcenters.thoughtfortheday.facebook.FacebookError) -> a
    void onError(com.ceosoftcenters.thoughtfortheday.facebook.DialogError) -> a
    void onCancel() -> a
com.ceosoftcenters.thoughtfortheday.facebook.FacebookError -> com.ceosoftcenters.thoughtfortheday.b.f:
    int mErrorCode -> a
com.ceosoftcenters.thoughtfortheday.facebook.FbDialog -> com.ceosoftcenters.thoughtfortheday.b.g:
    float[] DIMENSIONS_LANDSCAPE -> a
    float[] DIMENSIONS_PORTRAIT -> b
    android.widget.FrameLayout$LayoutParams FILL -> c
    java.lang.String mUrl -> d
    com.ceosoftcenters.thoughtfortheday.facebook.Facebook$DialogListener mListener -> e
    android.app.ProgressDialog mSpinner -> f
    android.webkit.WebView mWebView -> g
    android.widget.LinearLayout mContent -> h
    android.widget.TextView mTitle -> i
    void onCreate(android.os.Bundle) -> onCreate
    com.ceosoftcenters.thoughtfortheday.facebook.Facebook$DialogListener access$0(com.ceosoftcenters.thoughtfortheday.facebook.FbDialog) -> a
    android.webkit.WebView access$1(com.ceosoftcenters.thoughtfortheday.facebook.FbDialog) -> b
    android.app.ProgressDialog access$2(com.ceosoftcenters.thoughtfortheday.facebook.FbDialog) -> c
    android.widget.TextView access$3(com.ceosoftcenters.thoughtfortheday.facebook.FbDialog) -> d
com.ceosoftcenters.thoughtfortheday.facebook.FbDialog$FbWebViewClient -> com.ceosoftcenters.thoughtfortheday.b.h:
    com.ceosoftcenters.thoughtfortheday.facebook.FbDialog this$0 -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
com.ceosoftcenters.thoughtfortheday.facebook.PostFacebookItem -> com.ceosoftcenters.thoughtfortheday.b.i:
    java.lang.String title -> a
    java.lang.String url -> b
    java.lang.String body -> c
    java.lang.String icon_src -> d
    java.lang.String getIcon_src() -> a
    java.lang.String getTitle() -> b
    java.lang.String getUrl() -> c
    java.lang.String getBody() -> d
com.ceosoftcenters.thoughtfortheday.facebook.SessionEvents -> com.ceosoftcenters.thoughtfortheday.b.j:
    java.util.LinkedList mAuthListeners -> a
    java.util.LinkedList mLogoutListeners -> b
    void onLoginSuccess() -> a
    void onLoginError$552c4e01() -> b
com.ceosoftcenters.thoughtfortheday.facebook.Util -> com.ceosoftcenters.thoughtfortheday.b.k:
    java.lang.String encodeUrl(android.os.Bundle) -> a
    android.os.Bundle decodeUrl(java.lang.String) -> b
    android.os.Bundle parseUrl(java.lang.String) -> a
com.ceosoftcenters.thoughtfortheday.http.HttpClient -> com.ceosoftcenters.thoughtfortheday.c.a:
    java.lang.String getTheTextFromHttp() -> a
com.ceosoftcenters.thoughtfortheday.json.EventListModel -> com.ceosoftcenters.thoughtfortheday.d.a:
    java.util.ArrayList array -> a
    java.lang.String info_type -> b
    java.lang.String message -> c
    java.lang.String nowDate -> d
    java.lang.String success -> e
    com.ceosoftcenters.thoughtfortheday.json.EventListModel instance -> f
    com.ceosoftcenters.thoughtfortheday.json.EventListModel getInstance() -> a
    java.util.ArrayList getJson(org.json.JSONObject) -> a
com.ceosoftcenters.thoughtfortheday.model.pojo.Event -> com.ceosoftcenters.thoughtfortheday.e.a.a:
    java.lang.String createDateStr -> a
    java.lang.String description -> b
    java.lang.String id -> c
    java.lang.String isDeleted -> d
    java.lang.String title -> e
    void setCreateDateStr(java.lang.String) -> a
    void setDescription(java.lang.String) -> b
    void setId(java.lang.String) -> c
    void setIsDeleted(java.lang.String) -> d
    void setTitle(java.lang.String) -> e
    java.lang.String getCreateDateStr() -> a
    java.lang.String getDescription() -> b
    java.lang.String getTitle() -> c
    java.lang.String toString() -> toString
com.ceosoftcenters.thoughtfortheday.service.ListenScreenStateChangeService -> com.ceosoftcenters.thoughtfortheday.service.ListenScreenStateChangeService:
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
com.ceosoftcenters.thoughtfortheday.sqlite.DataBaseOperHelper -> com.ceosoftcenters.thoughtfortheday.f.a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.ceosoftcenters.thoughtfortheday.sqlite.ThoughtsForTheDayOperater -> com.ceosoftcenters.thoughtfortheday.f.b:
    com.ceosoftcenters.thoughtfortheday.sqlite.DataBaseOperHelper db -> a
    android.database.sqlite.SQLiteDatabase sd -> b
    void update(com.ceosoftcenters.thoughtfortheday.model.pojo.Event,int) -> a
    com.ceosoftcenters.thoughtfortheday.model.pojo.Event query(java.lang.Integer) -> a
    com.ceosoftcenters.thoughtfortheday.model.pojo.Event queryByCreateDateStr(java.lang.String) -> a
    boolean checkHaveGetTodayNewMessage(java.lang.String) -> b
    void close() -> a
com.ceosoftcenters.thoughtfortheday.sqlite.ThoughtsInfoOperater -> com.ceosoftcenters.thoughtfortheday.f.c:
    com.ceosoftcenters.thoughtfortheday.sqlite.DataBaseOperHelper db -> a
    android.database.sqlite.SQLiteDatabase sd -> b
    java.util.ArrayList getAllFavorites() -> a
    void insertFavorite(java.util.ArrayList) -> a
    boolean insert(com.ceosoftcenters.thoughtfortheday.model.pojo.Event) -> a
    void delete(int) -> a
    java.util.List queryAllFavorites() -> b
    boolean alreadyExists(java.lang.String) -> a
    void close() -> c
com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp -> com.ceosoftcenters.thoughtfortheday.g.a:
    twitter4j.Twitter mTwitter -> a
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterSession mSession -> b
    twitter4j.http.AccessToken mAccessToken -> c
    oauth.signpost.commonshttp.CommonsHttpOAuthConsumer mHttpOauthConsumer -> d
    oauth.signpost.OAuthProvider mHttpOauthprovider -> e
    java.lang.String mConsumerKey -> f
    java.lang.String mSecretKey -> g
    android.app.ProgressDialog mProgressDlg -> h
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp$TwDialogListener mListener -> i
    android.app.Activity context -> j
    android.os.Handler mHandler -> k
    void setListener(com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp$TwDialogListener) -> a
    void configureToken() -> d
    boolean hasAccessToken() -> a
    void resetAccessToken() -> b
    void updateStatus(java.lang.String) -> a
    void authorize() -> c
    void processToken(java.lang.String) -> b
    java.lang.String getVerifier(java.lang.String) -> c
    android.app.ProgressDialog access$0(com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp) -> a
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp$TwDialogListener access$1(com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp) -> b
    void access$2(com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp,java.lang.String) -> a
    oauth.signpost.OAuthProvider access$3(com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp) -> c
    oauth.signpost.commonshttp.CommonsHttpOAuthConsumer access$4(com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp) -> d
    android.os.Handler access$5(com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp) -> e
    void access$6(com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp,twitter4j.http.AccessToken) -> a
    void access$7(com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp) -> f
    twitter4j.Twitter access$8(com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp) -> g
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterSession access$9(com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp) -> h
    twitter4j.http.AccessToken access$10(com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp) -> i
com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp$1 -> com.ceosoftcenters.thoughtfortheday.g.b:
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp$2 -> com.ceosoftcenters.thoughtfortheday.g.c:
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp this$0 -> a
    void run() -> run
com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp$3 -> com.ceosoftcenters.thoughtfortheday.g.d:
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp this$0 -> a
    java.lang.String val$verifier -> b
    void run() -> run
com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp$4 -> com.ceosoftcenters.thoughtfortheday.g.e:
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp this$0 -> a
    void onComplete(java.lang.String) -> b
    void onError(java.lang.String) -> a
com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp$TwDialogListener -> com.ceosoftcenters.thoughtfortheday.g.f:
    void onComplete(java.lang.String) -> b
    void onError(java.lang.String) -> a
com.ceosoftcenters.thoughtfortheday.twitter.TwitterDialog -> com.ceosoftcenters.thoughtfortheday.g.g:
    float[] DIMENSIONS_LANDSCAPE -> a
    float[] DIMENSIONS_PORTRAIT -> b
    android.widget.FrameLayout$LayoutParams FILL -> c
    java.lang.String mUrl -> d
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp$TwDialogListener mListener -> e
    android.app.ProgressDialog mSpinner -> f
    android.webkit.WebView mWebView -> g
    android.widget.LinearLayout mContent -> h
    android.widget.TextView mTitle -> i
    boolean progressDialogRunning -> j
    void onCreate(android.os.Bundle) -> onCreate
    void onStop() -> onStop
    void onBackPressed() -> onBackPressed
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterApp$TwDialogListener access$0(com.ceosoftcenters.thoughtfortheday.twitter.TwitterDialog) -> a
    android.app.ProgressDialog access$1(com.ceosoftcenters.thoughtfortheday.twitter.TwitterDialog) -> b
    void access$2(com.ceosoftcenters.thoughtfortheday.twitter.TwitterDialog,boolean) -> a
    android.webkit.WebView access$3(com.ceosoftcenters.thoughtfortheday.twitter.TwitterDialog) -> c
    android.widget.TextView access$4(com.ceosoftcenters.thoughtfortheday.twitter.TwitterDialog) -> d
com.ceosoftcenters.thoughtfortheday.twitter.TwitterDialog$TwitterWebViewClient -> com.ceosoftcenters.thoughtfortheday.g.h:
    com.ceosoftcenters.thoughtfortheday.twitter.TwitterDialog this$0 -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
com.ceosoftcenters.thoughtfortheday.twitter.TwitterSession -> com.ceosoftcenters.thoughtfortheday.g.i:
    android.content.SharedPreferences sharedPref -> a
    android.content.SharedPreferences$Editor editor -> b
    void storeAccessToken(twitter4j.http.AccessToken,java.lang.String) -> a
    void resetAccessToken() -> a
    twitter4j.http.AccessToken getAccessToken() -> b
com.ceosoftcenters.thoughtfortheday.util.ConstantUtil -> com.ceosoftcenters.thoughtfortheday.util.a:
    boolean fb_is_login -> a
    java.lang.String[] PERMISSIONS -> b
com.ceosoftcenters.thoughtfortheday.util.Datamodel -> com.ceosoftcenters.thoughtfortheday.util.b:
    java.util.Vector vector -> a
com.ceosoftcenters.thoughtfortheday.util.ReadBitmapUtil -> com.ceosoftcenters.thoughtfortheday.util.c:
    android.graphics.Bitmap readBitMap(android.content.Context,int) -> a
com.ceosoftcenters.thoughtfortheday.util.SceenStateChangeListener -> com.ceosoftcenters.thoughtfortheday.util.SceenStateChangeListener:
    android.content.Context mContext -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.ceosoftcenters.thoughtfortheday.widget.ThoughtsGallery -> com.ceosoftcenters.thoughtfortheday.widget.ThoughtsGallery:
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
com.google.analytics.containertag.proto.Serving -> com.google.analytics.a.a.a:
com.google.analytics.containertag.proto.Serving$CacheOption -> com.google.analytics.a.a.b:
    com.google.analytics.containertag.proto.Serving$CacheOption defaultInstance -> c
    com.google.tagmanager.protobuf.ByteString unknownFields -> d
    com.google.tagmanager.protobuf.Parser PARSER -> a
    int bitField0_ -> e
    com.google.analytics.containertag.proto.Serving$CacheOption$CacheLevel level_ -> f
    int expirationSeconds_ -> g
    int gcacheExpirationSeconds_ -> h
    byte memoizedIsInitialized -> i
    int memoizedSerializedSize -> j
    com.google.tagmanager.protobuf.MutableMessageLite mutableDefault -> k
    com.google.analytics.containertag.proto.Serving$CacheOption getDefaultInstance() -> a
    com.google.tagmanager.protobuf.Parser getParserForType() -> b
    boolean hasLevel() -> c
    com.google.analytics.containertag.proto.Serving$CacheOption$CacheLevel getLevel() -> d
    boolean hasExpirationSeconds() -> e
    int getExpirationSeconds() -> f
    boolean hasGcacheExpirationSeconds() -> g
    int getGcacheExpirationSeconds() -> h
    void initFields() -> n
    boolean isInitialized() -> i
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.analytics.containertag.proto.Serving$CacheOption$Builder newBuilder(com.google.analytics.containertag.proto.Serving$CacheOption) -> a
    com.google.analytics.containertag.proto.Serving$CacheOption$Builder toBuilder() -> j
    com.google.tagmanager.protobuf.MessageLite$Builder toBuilder() -> k
    com.google.tagmanager.protobuf.MessageLite$Builder newBuilderForType() -> l
    com.google.tagmanager.protobuf.MessageLite getDefaultInstanceForType() -> m
    com.google.analytics.containertag.proto.Serving$CacheOption$CacheLevel access$5402(com.google.analytics.containertag.proto.Serving$CacheOption,com.google.analytics.containertag.proto.Serving$CacheOption$CacheLevel) -> a
    int access$5502(com.google.analytics.containertag.proto.Serving$CacheOption,int) -> a
    int access$5602(com.google.analytics.containertag.proto.Serving$CacheOption,int) -> b
    int access$5702(com.google.analytics.containertag.proto.Serving$CacheOption,int) -> c
    com.google.tagmanager.protobuf.ByteString access$5800(com.google.analytics.containertag.proto.Serving$CacheOption) -> b
com.google.analytics.containertag.proto.Serving$CacheOption$1 -> com.google.analytics.a.a.c:
    java.lang.Object parsePartialFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
com.google.analytics.containertag.proto.Serving$CacheOption$Builder -> com.google.analytics.a.a.d:
    int bitField0_ -> a
    com.google.analytics.containertag.proto.Serving$CacheOption$CacheLevel level_ -> b
    int expirationSeconds_ -> c
    int gcacheExpirationSeconds_ -> d
    com.google.analytics.containertag.proto.Serving$CacheOption$Builder clone() -> g
    com.google.analytics.containertag.proto.Serving$CacheOption buildPartial() -> a
    com.google.analytics.containertag.proto.Serving$CacheOption$Builder mergeFrom(com.google.analytics.containertag.proto.Serving$CacheOption) -> a
    boolean isInitialized() -> i
    com.google.analytics.containertag.proto.Serving$CacheOption$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> c
    com.google.tagmanager.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> b
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.GeneratedMessageLite) -> a
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder clone() -> c
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder clone() -> d
    com.google.tagmanager.protobuf.MessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> b
    com.google.tagmanager.protobuf.MessageLite build() -> e
    com.google.tagmanager.protobuf.MessageLite getDefaultInstanceForType() -> m
    java.lang.Object clone() -> clone
    com.google.analytics.containertag.proto.Serving$CacheOption$Builder access$5200() -> f
com.google.analytics.containertag.proto.Serving$CacheOption$CacheLevel -> com.google.analytics.a.a.e:
    com.google.analytics.containertag.proto.Serving$CacheOption$CacheLevel NO_CACHE -> a
    com.google.analytics.containertag.proto.Serving$CacheOption$CacheLevel PRIVATE -> b
    com.google.analytics.containertag.proto.Serving$CacheOption$CacheLevel PUBLIC -> c
    com.google.tagmanager.protobuf.Internal$EnumLiteMap internalValueMap -> d
    int value -> e
    com.google.analytics.containertag.proto.Serving$CacheOption$CacheLevel[] $VALUES -> f
    com.google.analytics.containertag.proto.Serving$CacheOption$CacheLevel[] values() -> values
    com.google.analytics.containertag.proto.Serving$CacheOption$CacheLevel valueOf(java.lang.String) -> valueOf
    int getNumber() -> a
    com.google.analytics.containertag.proto.Serving$CacheOption$CacheLevel valueOf(int) -> a
com.google.analytics.containertag.proto.Serving$CacheOption$CacheLevel$1 -> com.google.analytics.a.a.f:
    com.google.tagmanager.protobuf.Internal$EnumLite findValueByNumber(int) -> a
com.google.analytics.containertag.proto.Serving$CacheOptionOrBuilder -> com.google.analytics.a.a.g:
com.google.analytics.containertag.proto.Serving$FunctionCall -> com.google.analytics.a.a.h:
    com.google.analytics.containertag.proto.Serving$FunctionCall defaultInstance -> c
    com.google.tagmanager.protobuf.ByteString unknownFields -> d
    com.google.tagmanager.protobuf.Parser PARSER -> a
    int bitField0_ -> e
    java.util.List property_ -> f
    int function_ -> g
    int name_ -> h
    boolean liveOnly_ -> i
    boolean serverSide_ -> j
    byte memoizedIsInitialized -> k
    int memoizedSerializedSize -> l
    com.google.tagmanager.protobuf.MutableMessageLite mutableDefault -> m
    com.google.analytics.containertag.proto.Serving$FunctionCall getDefaultInstance() -> a
    com.google.tagmanager.protobuf.Parser getParserForType() -> b
    boolean hasFunction() -> c
    int getFunction() -> d
    boolean hasName() -> e
    int getName() -> f
    boolean hasLiveOnly() -> g
    boolean getLiveOnly() -> h
    boolean hasServerSide() -> j
    boolean getServerSide() -> n
    void initFields() -> o
    boolean isInitialized() -> i
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.tagmanager.protobuf.MessageLite$Builder toBuilder() -> k
    com.google.tagmanager.protobuf.MessageLite$Builder newBuilderForType() -> l
    com.google.tagmanager.protobuf.MessageLite getDefaultInstanceForType() -> m
    java.util.List access$3002(com.google.analytics.containertag.proto.Serving$FunctionCall,java.util.List) -> a
    int access$3102(com.google.analytics.containertag.proto.Serving$FunctionCall,int) -> a
    int access$3202(com.google.analytics.containertag.proto.Serving$FunctionCall,int) -> b
    boolean access$3302(com.google.analytics.containertag.proto.Serving$FunctionCall,boolean) -> a
    boolean access$3402(com.google.analytics.containertag.proto.Serving$FunctionCall,boolean) -> b
    int access$3502(com.google.analytics.containertag.proto.Serving$FunctionCall,int) -> c
    java.util.List access$3000(com.google.analytics.containertag.proto.Serving$FunctionCall) -> a
    com.google.tagmanager.protobuf.ByteString access$3600(com.google.analytics.containertag.proto.Serving$FunctionCall) -> b
com.google.analytics.containertag.proto.Serving$FunctionCall$1 -> com.google.analytics.a.a.i:
    java.lang.Object parsePartialFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
com.google.analytics.containertag.proto.Serving$FunctionCall$Builder -> com.google.analytics.a.a.j:
    int bitField0_ -> a
    java.util.List property_ -> b
    int function_ -> c
    int name_ -> d
    boolean liveOnly_ -> e
    boolean serverSide_ -> f
    com.google.analytics.containertag.proto.Serving$FunctionCall$Builder clone() -> f
    com.google.analytics.containertag.proto.Serving$FunctionCall buildPartial() -> g
    com.google.analytics.containertag.proto.Serving$FunctionCall$Builder mergeFrom(com.google.analytics.containertag.proto.Serving$FunctionCall) -> a
    boolean isInitialized() -> i
    com.google.analytics.containertag.proto.Serving$FunctionCall$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> c
    com.google.tagmanager.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> b
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.GeneratedMessageLite) -> a
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder clone() -> c
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder clone() -> d
    com.google.tagmanager.protobuf.MessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> b
    com.google.tagmanager.protobuf.MessageLite build() -> e
    com.google.tagmanager.protobuf.MessageLite getDefaultInstanceForType() -> m
    java.lang.Object clone() -> clone
    com.google.analytics.containertag.proto.Serving$FunctionCall$Builder access$2800() -> a
com.google.analytics.containertag.proto.Serving$FunctionCallOrBuilder -> com.google.analytics.a.a.k:
com.google.analytics.containertag.proto.Serving$Property -> com.google.analytics.a.a.l:
    com.google.analytics.containertag.proto.Serving$Property defaultInstance -> c
    com.google.tagmanager.protobuf.ByteString unknownFields -> d
    com.google.tagmanager.protobuf.Parser PARSER -> a
    int bitField0_ -> e
    int key_ -> f
    int value_ -> g
    byte memoizedIsInitialized -> h
    int memoizedSerializedSize -> i
    com.google.tagmanager.protobuf.MutableMessageLite mutableDefault -> j
    com.google.analytics.containertag.proto.Serving$Property getDefaultInstance() -> a
    com.google.tagmanager.protobuf.Parser getParserForType() -> b
    boolean hasKey() -> c
    int getKey() -> d
    boolean hasValue() -> e
    int getValue() -> f
    void initFields() -> g
    boolean isInitialized() -> i
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.tagmanager.protobuf.MessageLite$Builder toBuilder() -> k
    com.google.tagmanager.protobuf.MessageLite$Builder newBuilderForType() -> l
    com.google.tagmanager.protobuf.MessageLite getDefaultInstanceForType() -> m
    int access$2302(com.google.analytics.containertag.proto.Serving$Property,int) -> a
    int access$2402(com.google.analytics.containertag.proto.Serving$Property,int) -> b
    int access$2502(com.google.analytics.containertag.proto.Serving$Property,int) -> c
    com.google.tagmanager.protobuf.ByteString access$2600(com.google.analytics.containertag.proto.Serving$Property) -> a
com.google.analytics.containertag.proto.Serving$Property$1 -> com.google.analytics.a.a.m:
    java.lang.Object parsePartialFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
com.google.analytics.containertag.proto.Serving$Property$Builder -> com.google.analytics.a.a.n:
    int bitField0_ -> a
    int key_ -> b
    int value_ -> c
    com.google.analytics.containertag.proto.Serving$Property$Builder clone() -> f
    com.google.analytics.containertag.proto.Serving$Property buildPartial() -> g
    com.google.analytics.containertag.proto.Serving$Property$Builder mergeFrom(com.google.analytics.containertag.proto.Serving$Property) -> a
    boolean isInitialized() -> i
    com.google.analytics.containertag.proto.Serving$Property$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> c
    com.google.tagmanager.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> b
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.GeneratedMessageLite) -> a
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder clone() -> c
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder clone() -> d
    com.google.tagmanager.protobuf.MessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> b
    com.google.tagmanager.protobuf.MessageLite build() -> e
    com.google.tagmanager.protobuf.MessageLite getDefaultInstanceForType() -> m
    java.lang.Object clone() -> clone
    com.google.analytics.containertag.proto.Serving$Property$Builder access$2100() -> a
com.google.analytics.containertag.proto.Serving$PropertyOrBuilder -> com.google.analytics.a.a.o:
com.google.analytics.containertag.proto.Serving$Resource -> com.google.analytics.a.a.p:
    com.google.analytics.containertag.proto.Serving$Resource defaultInstance -> c
    com.google.tagmanager.protobuf.ByteString unknownFields -> d
    com.google.tagmanager.protobuf.Parser PARSER -> a
    int bitField0_ -> e
    com.google.tagmanager.protobuf.LazyStringList key_ -> f
    java.util.List value_ -> g
    java.util.List property_ -> h
    java.util.List macro_ -> i
    java.util.List tag_ -> j
    java.util.List predicate_ -> k
    java.util.List rule_ -> l
    java.lang.Object previewAuthCode_ -> m
    java.lang.Object malwareScanAuthCode_ -> n
    java.lang.Object templateVersionSet_ -> o
    java.lang.Object version_ -> p
    com.google.analytics.containertag.proto.Serving$CacheOption liveJsCacheOption_ -> q
    float reportingSampleRate_ -> r
    boolean enableAutoEventTracking_ -> s
    com.google.tagmanager.protobuf.LazyStringList usageContext_ -> t
    int resourceFormatVersion_ -> u
    byte memoizedIsInitialized -> v
    int memoizedSerializedSize -> w
    com.google.tagmanager.protobuf.MutableMessageLite mutableDefault -> x
    com.google.analytics.containertag.proto.Serving$Resource getDefaultInstance() -> a
    com.google.tagmanager.protobuf.Parser getParserForType() -> b
    int getValueCount() -> u
    int getPropertyCount() -> v
    int getMacroCount() -> w
    int getTagCount() -> x
    int getPredicateCount() -> y
    boolean hasPreviewAuthCode() -> c
    java.lang.String getPreviewAuthCode() -> z
    boolean hasMalwareScanAuthCode() -> d
    java.lang.String getMalwareScanAuthCode() -> A
    boolean hasTemplateVersionSet() -> e
    java.lang.String getTemplateVersionSet() -> B
    boolean hasVersion() -> f
    java.lang.String getVersion() -> g
    boolean hasLiveJsCacheOption() -> h
    com.google.analytics.containertag.proto.Serving$CacheOption getLiveJsCacheOption() -> j
    boolean hasReportingSampleRate() -> n
    float getReportingSampleRate() -> o
    boolean hasEnableAutoEventTracking() -> p
    boolean getEnableAutoEventTracking() -> q
    boolean hasResourceFormatVersion() -> r
    int getResourceFormatVersion() -> s
    void initFields() -> C
    boolean isInitialized() -> i
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.tagmanager.protobuf.MessageLite$Builder toBuilder() -> k
    com.google.tagmanager.protobuf.MessageLite$Builder newBuilderForType() -> l
    com.google.tagmanager.protobuf.MessageLite getDefaultInstanceForType() -> m
    com.google.tagmanager.protobuf.LazyStringList access$6202(com.google.analytics.containertag.proto.Serving$Resource,com.google.tagmanager.protobuf.LazyStringList) -> a
    java.util.List access$6302(com.google.analytics.containertag.proto.Serving$Resource,java.util.List) -> a
    java.util.List access$6402(com.google.analytics.containertag.proto.Serving$Resource,java.util.List) -> b
    java.util.List access$6502(com.google.analytics.containertag.proto.Serving$Resource,java.util.List) -> c
    java.util.List access$6602(com.google.analytics.containertag.proto.Serving$Resource,java.util.List) -> d
    java.util.List access$6702(com.google.analytics.containertag.proto.Serving$Resource,java.util.List) -> e
    java.util.List access$6802(com.google.analytics.containertag.proto.Serving$Resource,java.util.List) -> f
    java.lang.Object access$6902(com.google.analytics.containertag.proto.Serving$Resource,java.lang.Object) -> a
    java.lang.Object access$7002(com.google.analytics.containertag.proto.Serving$Resource,java.lang.Object) -> b
    java.lang.Object access$7102(com.google.analytics.containertag.proto.Serving$Resource,java.lang.Object) -> c
    java.lang.Object access$7202(com.google.analytics.containertag.proto.Serving$Resource,java.lang.Object) -> d
    com.google.analytics.containertag.proto.Serving$CacheOption access$7302(com.google.analytics.containertag.proto.Serving$Resource,com.google.analytics.containertag.proto.Serving$CacheOption) -> a
    float access$7402(com.google.analytics.containertag.proto.Serving$Resource,float) -> a
    boolean access$7502(com.google.analytics.containertag.proto.Serving$Resource,boolean) -> a
    com.google.tagmanager.protobuf.LazyStringList access$7602(com.google.analytics.containertag.proto.Serving$Resource,com.google.tagmanager.protobuf.LazyStringList) -> b
    int access$7702(com.google.analytics.containertag.proto.Serving$Resource,int) -> a
    int access$7802(com.google.analytics.containertag.proto.Serving$Resource,int) -> b
    com.google.tagmanager.protobuf.LazyStringList access$6200(com.google.analytics.containertag.proto.Serving$Resource) -> a
    java.util.List access$6300(com.google.analytics.containertag.proto.Serving$Resource) -> b
    java.util.List access$6400(com.google.analytics.containertag.proto.Serving$Resource) -> c
    java.util.List access$6500(com.google.analytics.containertag.proto.Serving$Resource) -> d
    java.util.List access$6600(com.google.analytics.containertag.proto.Serving$Resource) -> e
    java.util.List access$6700(com.google.analytics.containertag.proto.Serving$Resource) -> f
    java.util.List access$6800(com.google.analytics.containertag.proto.Serving$Resource) -> g
    java.lang.Object access$6900(com.google.analytics.containertag.proto.Serving$Resource) -> h
    java.lang.Object access$7000(com.google.analytics.containertag.proto.Serving$Resource) -> i
    java.lang.Object access$7100(com.google.analytics.containertag.proto.Serving$Resource) -> j
    java.lang.Object access$7200(com.google.analytics.containertag.proto.Serving$Resource) -> k
    com.google.tagmanager.protobuf.LazyStringList access$7600(com.google.analytics.containertag.proto.Serving$Resource) -> l
    com.google.tagmanager.protobuf.ByteString access$7900(com.google.analytics.containertag.proto.Serving$Resource) -> m
com.google.analytics.containertag.proto.Serving$Resource$1 -> com.google.analytics.a.a.q:
    java.lang.Object parsePartialFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
com.google.analytics.containertag.proto.Serving$Resource$Builder -> com.google.analytics.a.a.r:
    int bitField0_ -> a
    com.google.tagmanager.protobuf.LazyStringList key_ -> b
    java.util.List value_ -> c
    java.util.List property_ -> d
    java.util.List macro_ -> e
    java.util.List tag_ -> f
    java.util.List predicate_ -> g
    java.util.List rule_ -> h
    java.lang.Object previewAuthCode_ -> i
    java.lang.Object malwareScanAuthCode_ -> j
    java.lang.Object templateVersionSet_ -> k
    java.lang.Object version_ -> l
    com.google.analytics.containertag.proto.Serving$CacheOption liveJsCacheOption_ -> m
    float reportingSampleRate_ -> n
    boolean enableAutoEventTracking_ -> o
    com.google.tagmanager.protobuf.LazyStringList usageContext_ -> p
    int resourceFormatVersion_ -> q
    com.google.analytics.containertag.proto.Serving$Resource$Builder clone() -> f
    com.google.analytics.containertag.proto.Serving$Resource buildPartial() -> g
    com.google.analytics.containertag.proto.Serving$Resource$Builder mergeFrom(com.google.analytics.containertag.proto.Serving$Resource) -> a
    boolean isInitialized() -> i
    com.google.analytics.containertag.proto.Serving$Resource$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> c
    com.google.tagmanager.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> b
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.GeneratedMessageLite) -> a
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder clone() -> c
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder clone() -> d
    com.google.tagmanager.protobuf.MessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> b
    com.google.tagmanager.protobuf.MessageLite build() -> e
    com.google.tagmanager.protobuf.MessageLite getDefaultInstanceForType() -> m
    java.lang.Object clone() -> clone
    com.google.analytics.containertag.proto.Serving$Resource$Builder access$6000() -> a
com.google.analytics.containertag.proto.Serving$ResourceOrBuilder -> com.google.analytics.a.a.s:
com.google.analytics.containertag.proto.Serving$Rule -> com.google.analytics.a.a.t:
    com.google.analytics.containertag.proto.Serving$Rule defaultInstance -> c
    com.google.tagmanager.protobuf.ByteString unknownFields -> d
    com.google.tagmanager.protobuf.Parser PARSER -> a
    java.util.List positivePredicate_ -> e
    java.util.List negativePredicate_ -> f
    java.util.List addTag_ -> g
    java.util.List removeTag_ -> h
    java.util.List addTagRuleName_ -> i
    java.util.List removeTagRuleName_ -> j
    java.util.List addMacro_ -> k
    java.util.List removeMacro_ -> l
    java.util.List addMacroRuleName_ -> m
    java.util.List removeMacroRuleName_ -> n
    byte memoizedIsInitialized -> o
    int memoizedSerializedSize -> p
    com.google.tagmanager.protobuf.MutableMessageLite mutableDefault -> q
    com.google.analytics.containertag.proto.Serving$Rule getDefaultInstance() -> a
    com.google.tagmanager.protobuf.Parser getParserForType() -> b
    void initFields() -> c
    boolean isInitialized() -> i
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.tagmanager.protobuf.MessageLite$Builder toBuilder() -> k
    com.google.tagmanager.protobuf.MessageLite$Builder newBuilderForType() -> l
    com.google.tagmanager.protobuf.MessageLite getDefaultInstanceForType() -> m
    java.util.List access$4002(com.google.analytics.containertag.proto.Serving$Rule,java.util.List) -> a
    java.util.List access$4102(com.google.analytics.containertag.proto.Serving$Rule,java.util.List) -> b
    java.util.List access$4202(com.google.analytics.containertag.proto.Serving$Rule,java.util.List) -> c
    java.util.List access$4302(com.google.analytics.containertag.proto.Serving$Rule,java.util.List) -> d
    java.util.List access$4402(com.google.analytics.containertag.proto.Serving$Rule,java.util.List) -> e
    java.util.List access$4502(com.google.analytics.containertag.proto.Serving$Rule,java.util.List) -> f
    java.util.List access$4602(com.google.analytics.containertag.proto.Serving$Rule,java.util.List) -> g
    java.util.List access$4702(com.google.analytics.containertag.proto.Serving$Rule,java.util.List) -> h
    java.util.List access$4802(com.google.analytics.containertag.proto.Serving$Rule,java.util.List) -> i
    java.util.List access$4902(com.google.analytics.containertag.proto.Serving$Rule,java.util.List) -> j
    java.util.List access$4000(com.google.analytics.containertag.proto.Serving$Rule) -> a
    java.util.List access$4100(com.google.analytics.containertag.proto.Serving$Rule) -> b
    java.util.List access$4200(com.google.analytics.containertag.proto.Serving$Rule) -> c
    java.util.List access$4300(com.google.analytics.containertag.proto.Serving$Rule) -> d
    java.util.List access$4400(com.google.analytics.containertag.proto.Serving$Rule) -> e
    java.util.List access$4500(com.google.analytics.containertag.proto.Serving$Rule) -> f
    java.util.List access$4600(com.google.analytics.containertag.proto.Serving$Rule) -> g
    java.util.List access$4700(com.google.analytics.containertag.proto.Serving$Rule) -> h
    java.util.List access$4800(com.google.analytics.containertag.proto.Serving$Rule) -> i
    java.util.List access$4900(com.google.analytics.containertag.proto.Serving$Rule) -> j
    com.google.tagmanager.protobuf.ByteString access$5000(com.google.analytics.containertag.proto.Serving$Rule) -> k
com.google.analytics.containertag.proto.Serving$Rule$1 -> com.google.analytics.a.a.u:
    java.lang.Object parsePartialFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
com.google.analytics.containertag.proto.Serving$Rule$Builder -> com.google.analytics.a.a.v:
    int bitField0_ -> a
    java.util.List positivePredicate_ -> b
    java.util.List negativePredicate_ -> c
    java.util.List addTag_ -> d
    java.util.List removeTag_ -> e
    java.util.List addTagRuleName_ -> f
    java.util.List removeTagRuleName_ -> g
    java.util.List addMacro_ -> h
    java.util.List removeMacro_ -> i
    java.util.List addMacroRuleName_ -> j
    java.util.List removeMacroRuleName_ -> k
    com.google.analytics.containertag.proto.Serving$Rule$Builder clone() -> f
    com.google.analytics.containertag.proto.Serving$Rule buildPartial() -> g
    com.google.analytics.containertag.proto.Serving$Rule$Builder mergeFrom(com.google.analytics.containertag.proto.Serving$Rule) -> a
    boolean isInitialized() -> i
    com.google.analytics.containertag.proto.Serving$Rule$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> c
    com.google.tagmanager.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> b
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.GeneratedMessageLite) -> a
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder clone() -> c
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder clone() -> d
    com.google.tagmanager.protobuf.MessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> b
    com.google.tagmanager.protobuf.MessageLite build() -> e
    com.google.tagmanager.protobuf.MessageLite getDefaultInstanceForType() -> m
    java.lang.Object clone() -> clone
    com.google.analytics.containertag.proto.Serving$Rule$Builder access$3800() -> a
com.google.analytics.containertag.proto.Serving$RuleOrBuilder -> com.google.analytics.a.a.w:
com.google.analytics.midtier.proto.containertag.TypeSystem -> com.google.analytics.b.a.a.a:
com.google.analytics.midtier.proto.containertag.TypeSystem$Value -> com.google.analytics.b.a.a.b:
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value defaultInstance -> c
    com.google.tagmanager.protobuf.ByteString unknownFields -> d
    com.google.tagmanager.protobuf.Parser PARSER -> a
    int bitField0_ -> e
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type type_ -> f
    java.lang.Object string_ -> g
    java.util.List listItem_ -> h
    java.util.List mapKey_ -> i
    java.util.List mapValue_ -> j
    java.lang.Object macroReference_ -> k
    java.lang.Object functionId_ -> l
    long integer_ -> m
    boolean boolean_ -> n
    java.util.List templateToken_ -> o
    java.util.List escaping_ -> p
    boolean containsReferences_ -> q
    byte memoizedIsInitialized -> r
    int memoizedSerializedSize -> s
    com.google.tagmanager.protobuf.MutableMessageLite mutableDefault -> t
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value getDefaultInstance() -> a
    com.google.tagmanager.protobuf.Parser getParserForType() -> b
    boolean hasType() -> c
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type getType() -> d
    boolean hasString() -> e
    java.lang.String getString() -> u
    int getListItemCount() -> v
    int getMapKeyCount() -> w
    int getMapValueCount() -> x
    boolean hasMacroReference() -> f
    java.lang.String getMacroReference() -> y
    boolean hasFunctionId() -> g
    java.lang.String getFunctionId() -> z
    boolean hasInteger() -> h
    long getInteger() -> j
    boolean hasBoolean() -> n
    boolean getBoolean() -> o
    int getTemplateTokenCount() -> A
    boolean hasContainsReferences() -> p
    boolean getContainsReferences() -> q
    void initFields() -> B
    boolean isInitialized() -> i
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Builder newBuilder() -> r
    com.google.tagmanager.protobuf.MessageLite getDefaultInstanceForType() -> m
    com.google.tagmanager.protobuf.MessageLite$Builder toBuilder() -> k
    com.google.tagmanager.protobuf.MessageLite$Builder newBuilderForType() -> l
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type access$302(com.google.analytics.midtier.proto.containertag.TypeSystem$Value,com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type) -> a
    java.lang.Object access$402(com.google.analytics.midtier.proto.containertag.TypeSystem$Value,java.lang.Object) -> a
    java.util.List access$502(com.google.analytics.midtier.proto.containertag.TypeSystem$Value,java.util.List) -> a
    java.util.List access$602(com.google.analytics.midtier.proto.containertag.TypeSystem$Value,java.util.List) -> b
    java.util.List access$702(com.google.analytics.midtier.proto.containertag.TypeSystem$Value,java.util.List) -> c
    java.lang.Object access$802(com.google.analytics.midtier.proto.containertag.TypeSystem$Value,java.lang.Object) -> b
    java.lang.Object access$902(com.google.analytics.midtier.proto.containertag.TypeSystem$Value,java.lang.Object) -> c
    long access$1002(com.google.analytics.midtier.proto.containertag.TypeSystem$Value,long) -> a
    boolean access$1102(com.google.analytics.midtier.proto.containertag.TypeSystem$Value,boolean) -> a
    java.util.List access$1202(com.google.analytics.midtier.proto.containertag.TypeSystem$Value,java.util.List) -> d
    java.util.List access$1302(com.google.analytics.midtier.proto.containertag.TypeSystem$Value,java.util.List) -> e
    boolean access$1402(com.google.analytics.midtier.proto.containertag.TypeSystem$Value,boolean) -> b
    int access$1502(com.google.analytics.midtier.proto.containertag.TypeSystem$Value,int) -> a
    java.lang.Object access$400(com.google.analytics.midtier.proto.containertag.TypeSystem$Value) -> a
    java.util.List access$500(com.google.analytics.midtier.proto.containertag.TypeSystem$Value) -> b
    java.util.List access$600(com.google.analytics.midtier.proto.containertag.TypeSystem$Value) -> c
    java.util.List access$700(com.google.analytics.midtier.proto.containertag.TypeSystem$Value) -> d
    java.lang.Object access$800(com.google.analytics.midtier.proto.containertag.TypeSystem$Value) -> e
    java.lang.Object access$900(com.google.analytics.midtier.proto.containertag.TypeSystem$Value) -> f
    java.util.List access$1200(com.google.analytics.midtier.proto.containertag.TypeSystem$Value) -> g
    java.util.List access$1300(com.google.analytics.midtier.proto.containertag.TypeSystem$Value) -> h
    com.google.tagmanager.protobuf.ByteString access$1600(com.google.analytics.midtier.proto.containertag.TypeSystem$Value) -> i
com.google.analytics.midtier.proto.containertag.TypeSystem$Value$1 -> com.google.analytics.b.a.a.c:
    java.lang.Object parsePartialFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Builder -> com.google.analytics.b.a.a.d:
    int bitField0_ -> a
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type type_ -> b
    java.lang.Object string_ -> c
    java.util.List listItem_ -> d
    java.util.List mapKey_ -> e
    java.util.List mapValue_ -> f
    java.lang.Object macroReference_ -> g
    java.lang.Object functionId_ -> h
    long integer_ -> i
    boolean boolean_ -> j
    java.util.List templateToken_ -> k
    java.util.List escaping_ -> l
    boolean containsReferences_ -> m
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Builder clone() -> k
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value build() -> a
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value buildPartial() -> l
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Builder mergeFrom(com.google.analytics.midtier.proto.containertag.TypeSystem$Value) -> a
    boolean isInitialized() -> i
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> c
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Builder setType(com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type) -> a
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Builder setString(java.lang.String) -> a
    void ensureListItemIsMutable() -> n
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Builder addListItem(com.google.analytics.midtier.proto.containertag.TypeSystem$Value) -> b
    void ensureMapKeyIsMutable() -> o
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Builder addMapKey(com.google.analytics.midtier.proto.containertag.TypeSystem$Value) -> c
    void ensureMapValueIsMutable() -> p
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Builder addMapValue(com.google.analytics.midtier.proto.containertag.TypeSystem$Value) -> d
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Builder setInteger(long) -> a
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Builder setBoolean(boolean) -> a
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Builder setContainsReferences(boolean) -> b
    com.google.tagmanager.protobuf.GeneratedMessageLite$ExtendableBuilder clone() -> f
    com.google.tagmanager.protobuf.MessageLite getDefaultInstanceForType() -> m
    com.google.tagmanager.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> b
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.GeneratedMessageLite) -> a
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder clone() -> c
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder clone() -> d
    com.google.tagmanager.protobuf.MessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> b
    com.google.tagmanager.protobuf.MessageLite build() -> e
    java.lang.Object clone() -> clone
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Builder access$100() -> g
com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping -> com.google.analytics.b.a.a.e:
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping ESCAPE_HTML -> a
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping ESCAPE_HTML_RCDATA -> b
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping ESCAPE_HTML_ATTRIBUTE -> c
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping ESCAPE_HTML_ATTRIBUTE_NOSPACE -> d
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping FILTER_HTML_ELEMENT_NAME -> e
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping FILTER_HTML_ATTRIBUTES -> f
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping ESCAPE_JS_STRING -> g
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping ESCAPE_JS_VALUE -> h
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping ESCAPE_JS_REGEX -> i
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping ESCAPE_CSS_STRING -> j
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping FILTER_CSS_VALUE -> k
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping ESCAPE_URI -> l
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping NORMALIZE_URI -> m
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping FILTER_NORMALIZE_URI -> n
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping NO_AUTOESCAPE -> o
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping TEXT -> p
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping CONVERT_JS_VALUE_TO_EXPRESSION -> q
    com.google.tagmanager.protobuf.Internal$EnumLiteMap internalValueMap -> r
    int value -> s
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping[] $VALUES -> t
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping[] values() -> values
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping valueOf(java.lang.String) -> valueOf
    int getNumber() -> a
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping valueOf(int) -> a
com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Escaping$1 -> com.google.analytics.b.a.a.f:
    com.google.tagmanager.protobuf.Internal$EnumLite findValueByNumber(int) -> a
com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type -> com.google.analytics.b.a.a.g:
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type STRING -> a
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type LIST -> b
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type MAP -> c
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type MACRO_REFERENCE -> d
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type FUNCTION_ID -> e
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type INTEGER -> f
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type TEMPLATE -> g
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type BOOLEAN -> h
    com.google.tagmanager.protobuf.Internal$EnumLiteMap internalValueMap -> i
    int value -> j
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type[] $VALUES -> k
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type[] values() -> values
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type valueOf(java.lang.String) -> valueOf
    int getNumber() -> a
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type valueOf(int) -> a
com.google.analytics.midtier.proto.containertag.TypeSystem$Value$Type$1 -> com.google.analytics.b.a.a.h:
    com.google.tagmanager.protobuf.Internal$EnumLite findValueByNumber(int) -> a
com.google.analytics.midtier.proto.containertag.TypeSystem$ValueOrBuilder -> com.google.analytics.b.a.a.i:
com.google.analytics.tracking.android.AnalyticsClient -> com.google.analytics.tracking.android.a:
    void sendHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void clearHits() -> a
    void connect() -> b
    void disconnect() -> c
com.google.analytics.tracking.android.AnalyticsGmsCoreClient -> com.google.analytics.tracking.android.b:
    android.content.ServiceConnection mConnection -> a
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectedListener mOnConnectedListener -> b
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectionFailedListener mOnConnectionFailedListener -> c
    android.content.Context mContext -> d
    com.google.android.gms.analytics.internal.IAnalyticsService mService -> e
    void connect() -> b
    void disconnect() -> c
    void sendHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void clearHits() -> a
    com.google.android.gms.analytics.internal.IAnalyticsService getService() -> d
    com.google.android.gms.analytics.internal.IAnalyticsService access$002(com.google.analytics.tracking.android.AnalyticsGmsCoreClient,com.google.android.gms.analytics.internal.IAnalyticsService) -> a
    void access$100(com.google.analytics.tracking.android.AnalyticsGmsCoreClient) -> a
    android.content.Context access$200(com.google.analytics.tracking.android.AnalyticsGmsCoreClient) -> b
    android.content.ServiceConnection access$302$1cc23a94(com.google.analytics.tracking.android.AnalyticsGmsCoreClient) -> c
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectionFailedListener access$400(com.google.analytics.tracking.android.AnalyticsGmsCoreClient) -> d
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectedListener access$500(com.google.analytics.tracking.android.AnalyticsGmsCoreClient) -> e
com.google.analytics.tracking.android.AnalyticsGmsCoreClient$AnalyticsServiceConnection -> com.google.analytics.tracking.android.c:
    com.google.analytics.tracking.android.AnalyticsGmsCoreClient this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectedListener -> com.google.analytics.tracking.android.d:
    void onConnected() -> a
    void onDisconnected() -> b
com.google.analytics.tracking.android.AnalyticsGmsCoreClient$OnConnectionFailedListener -> com.google.analytics.tracking.android.e:
    void onConnectionFailed$10b55c15(int) -> a
com.google.analytics.tracking.android.AnalyticsStore -> com.google.analytics.tracking.android.f:
    void putHit(java.util.Map,long,java.lang.String,java.util.Collection) -> a
    void clearHits$1349ef() -> a
    void dispatch() -> b
    com.google.analytics.tracking.android.Dispatcher getDispatcher() -> c
com.google.analytics.tracking.android.AnalyticsStoreStateListener -> com.google.analytics.tracking.android.g:
    void reportStoreIsEmpty(boolean) -> a
com.google.analytics.tracking.android.AnalyticsThread -> com.google.analytics.tracking.android.h:
    void sendHit(java.util.Map) -> a
    void dispatch() -> a
    void setForceLocalDispatch() -> b
    java.util.concurrent.LinkedBlockingQueue getQueue() -> c
    java.lang.Thread getThread() -> d
com.google.analytics.tracking.android.AppFieldsDefaultProvider -> com.google.analytics.tracking.android.i:
    java.lang.String mAppName -> a
    java.lang.String mAppVersion -> b
    java.lang.String mAppId -> c
    java.lang.String mAppInstallerId -> d
    com.google.analytics.tracking.android.AppFieldsDefaultProvider sInstance -> e
    java.lang.Object sInstanceLock -> f
    void initializeProvider(android.content.Context) -> a
    com.google.analytics.tracking.android.AppFieldsDefaultProvider getProvider() -> a
    java.lang.String getValue(java.lang.String) -> a
com.google.analytics.tracking.android.CampaignTrackingReceiver -> com.google.analytics.tracking.android.CampaignTrackingReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.analytics.tracking.android.CampaignTrackingService -> com.google.analytics.tracking.android.CampaignTrackingService:
    void onHandleIntent(android.content.Intent) -> onHandleIntent
    void processIntent(android.content.Context,android.content.Intent) -> a
com.google.analytics.tracking.android.ClientIdDefaultProvider -> com.google.analytics.tracking.android.j:
    com.google.analytics.tracking.android.ClientIdDefaultProvider sInstance -> a
    java.lang.Object sInstanceLock -> b
    android.content.Context mContext -> c
    java.lang.String mClientId -> d
    boolean mClientIdLoaded -> e
    java.lang.Object mClientIdLock -> f
    void initializeProvider(android.content.Context) -> a
    com.google.analytics.tracking.android.ClientIdDefaultProvider getProvider() -> a
    java.lang.String getValue(java.lang.String) -> a
    java.lang.String blockingGetClientId() -> c
    boolean storeClientId(java.lang.String) -> b
    java.lang.String initializeClientId() -> b
    java.lang.Object access$000(com.google.analytics.tracking.android.ClientIdDefaultProvider) -> a
    java.lang.String access$102(com.google.analytics.tracking.android.ClientIdDefaultProvider,java.lang.String) -> a
    boolean access$202$2eddfff1(com.google.analytics.tracking.android.ClientIdDefaultProvider) -> b
com.google.analytics.tracking.android.ClientIdDefaultProvider$1 -> com.google.analytics.tracking.android.k:
    com.google.analytics.tracking.android.ClientIdDefaultProvider this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.Clock -> com.google.analytics.tracking.android.l:
    long currentTimeMillis() -> a
com.google.analytics.tracking.android.DefaultLoggerImpl -> com.google.analytics.tracking.android.m:
    com.google.analytics.tracking.android.Logger$LogLevel mLogLevel -> a
    void verbose(java.lang.String) -> a
    void info(java.lang.String) -> b
    void warn(java.lang.String) -> c
    void error(java.lang.String) -> d
    void setLogLevel(com.google.analytics.tracking.android.Logger$LogLevel) -> a
    com.google.analytics.tracking.android.Logger$LogLevel getLogLevel() -> a
    java.lang.String formatMessage(java.lang.String) -> e
com.google.analytics.tracking.android.DefaultProvider -> com.google.analytics.tracking.android.n:
    java.lang.String getValue(java.lang.String) -> a
com.google.analytics.tracking.android.Dispatcher -> com.google.analytics.tracking.android.o:
    int dispatchHits(java.util.List) -> a
    boolean okToDispatch() -> a
    void overrideHostUrl(java.lang.String) -> a
com.google.analytics.tracking.android.EasyTracker -> com.google.analytics.tracking.android.p:
    com.google.analytics.tracking.android.EasyTracker sInstance -> a
    java.lang.String sResourcePackageName -> b
    com.google.analytics.tracking.android.GoogleAnalytics mGoogleAnalytics -> c
    boolean mIsReportUncaughtExceptionsEnabled -> d
    boolean mIsAutoActivityTracking -> e
    int mActivitiesActive -> f
    long mSessionTimeout -> g
    long mLastOnStopTime -> h
    android.content.Context mContext -> i
    java.util.Map mActivityNameMap -> j
    com.google.analytics.tracking.android.ParameterLoader mParameterFetcher -> k
    com.google.analytics.tracking.android.ServiceManager mServiceManager -> l
    com.google.analytics.tracking.android.Clock mClock -> m
    java.util.Timer mTimer -> n
    java.util.TimerTask mTimerTask -> o
    boolean mIsInForeground -> p
    boolean mStartSessionOnNextSend -> q
    com.google.analytics.tracking.android.EasyTracker getInstance(android.content.Context) -> a
    com.google.analytics.tracking.android.Logger$LogLevel getLogLevelFromString(java.lang.String) -> a
    void activityStart(android.app.Activity) -> a
    void activityStop$63a22f9() -> a
    void clearExistingTimer() -> b
    void send(java.util.Map) -> a
    boolean access$102$31934b1b(com.google.analytics.tracking.android.EasyTracker) -> a
com.google.analytics.tracking.android.EasyTracker$1 -> com.google.analytics.tracking.android.q:
    com.google.analytics.tracking.android.EasyTracker this$0 -> a
    long currentTimeMillis() -> a
com.google.analytics.tracking.android.EasyTracker$NotInForegroundTimerTask -> com.google.analytics.tracking.android.r:
    com.google.analytics.tracking.android.EasyTracker this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.ExceptionParser -> com.google.analytics.tracking.android.s:
    java.lang.String getDescription(java.lang.String,java.lang.Throwable) -> a
com.google.analytics.tracking.android.ExceptionReporter -> com.google.analytics.tracking.android.t:
    java.lang.Thread$UncaughtExceptionHandler mOriginalHandler -> a
    com.google.analytics.tracking.android.Tracker mTracker -> b
    com.google.analytics.tracking.android.ServiceManager mServiceManager -> c
    com.google.analytics.tracking.android.ExceptionParser mExceptionParser -> d
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
com.google.analytics.tracking.android.FutureApis -> com.google.analytics.tracking.android.u:
    int version() -> a
com.google.analytics.tracking.android.GANetworkReceiver -> com.google.analytics.tracking.android.v:
    java.lang.String SELF_IDENTIFYING_EXTRA -> a
    com.google.analytics.tracking.android.ServiceManager mManager -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void register(android.content.Context) -> a
    void sendRadioPoweredBroadcast(android.content.Context) -> b
com.google.analytics.tracking.android.GAServiceManager -> com.google.analytics.tracking.android.w:
    java.lang.Object MSG_OBJECT -> a
    android.content.Context ctx -> b
    com.google.analytics.tracking.android.AnalyticsStore store -> c
    com.google.analytics.tracking.android.AnalyticsThread thread -> d
    int dispatchPeriodInSeconds -> e
    boolean pendingDispatch -> f
    boolean pendingForceLocalDispatch -> g
    java.lang.String pendingHostOverride -> h
    boolean connected -> i
    boolean listenForNetwork -> j
    com.google.analytics.tracking.android.AnalyticsStoreStateListener listener -> k
    android.os.Handler handler -> l
    com.google.analytics.tracking.android.GANetworkReceiver networkReceiver -> m
    boolean storeIsEmpty -> n
    com.google.analytics.tracking.android.GAServiceManager instance -> o
    com.google.analytics.tracking.android.GAServiceManager getInstance() -> a
    void initialize(android.content.Context,com.google.analytics.tracking.android.AnalyticsThread) -> a
    com.google.analytics.tracking.android.AnalyticsStore getStore() -> b
    void dispatchLocalHits() -> c
    void setLocalDispatchPeriod(int) -> a
    void updatePowerSaveMode(boolean,boolean) -> a
    void updateConnectivityStatus(boolean) -> a
    void onRadioPowered() -> d
    boolean access$000(com.google.analytics.tracking.android.GAServiceManager) -> a
    java.lang.Object access$100() -> e
    int access$200(com.google.analytics.tracking.android.GAServiceManager) -> b
    boolean access$300(com.google.analytics.tracking.android.GAServiceManager) -> c
    android.os.Handler access$400(com.google.analytics.tracking.android.GAServiceManager) -> d
com.google.analytics.tracking.android.GAServiceManager$1 -> com.google.analytics.tracking.android.x:
    com.google.analytics.tracking.android.GAServiceManager this$0 -> a
    void reportStoreIsEmpty(boolean) -> a
com.google.analytics.tracking.android.GAServiceManager$2 -> com.google.analytics.tracking.android.y:
    com.google.analytics.tracking.android.GAServiceManager this$0 -> a
    boolean handleMessage(android.os.Message) -> handleMessage
com.google.analytics.tracking.android.GAServiceProxy -> com.google.analytics.tracking.android.z:
    long lastRequestTime -> a
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState state -> b
    com.google.analytics.tracking.android.AnalyticsClient client -> c
    com.google.analytics.tracking.android.AnalyticsStore store -> d
    com.google.analytics.tracking.android.AnalyticsStore testStore -> e
    com.google.analytics.tracking.android.GoogleAnalytics gaInstance -> f
    com.google.analytics.tracking.android.AnalyticsThread thread -> g
    android.content.Context ctx -> h
    java.util.Queue queue -> i
    int connectTries -> j
    java.util.Timer reConnectTimer -> k
    java.util.Timer failedConnectTimer -> l
    java.util.Timer disconnectCheckTimer -> m
    boolean pendingDispatch -> n
    boolean pendingClearHits -> o
    boolean pendingServiceDisconnect -> p
    boolean forceLocalDispatch -> q
    com.google.analytics.tracking.android.Clock clock -> r
    long idleTimeout -> s
    void putHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void dispatch() -> c
    void setForceLocalDispatch() -> d
    java.util.Timer cancelTimer(java.util.Timer) -> a
    void clearAllTimers() -> f
    void createService() -> e
    void sendQueue() -> g
    void dispatchToStore() -> h
    void useStore() -> i
    void connectToService() -> j
    void disconnectFromService() -> k
    void onConnected() -> a
    void onDisconnected() -> b
    void onConnectionFailed$10b55c15(int) -> a
    void fireReconnectAttempt() -> l
    void access$000(com.google.analytics.tracking.android.GAServiceProxy) -> a
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState access$400(com.google.analytics.tracking.android.GAServiceProxy) -> b
    void access$500(com.google.analytics.tracking.android.GAServiceProxy) -> c
    void access$600(com.google.analytics.tracking.android.GAServiceProxy) -> d
    java.util.Queue access$700(com.google.analytics.tracking.android.GAServiceProxy) -> e
    long access$800(com.google.analytics.tracking.android.GAServiceProxy) -> f
    long access$900(com.google.analytics.tracking.android.GAServiceProxy) -> g
    com.google.analytics.tracking.android.Clock access$1000(com.google.analytics.tracking.android.GAServiceProxy) -> h
    void access$1100(com.google.analytics.tracking.android.GAServiceProxy) -> i
    java.util.Timer access$1200(com.google.analytics.tracking.android.GAServiceProxy) -> j
com.google.analytics.tracking.android.GAServiceProxy$1 -> com.google.analytics.tracking.android.aa:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    long currentTimeMillis() -> a
com.google.analytics.tracking.android.GAServiceProxy$2 -> com.google.analytics.tracking.android.ab:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAServiceProxy$3 -> com.google.analytics.tracking.android.ac:
    int[] $SwitchMap$com$google$analytics$tracking$android$GAServiceProxy$ConnectState -> a
com.google.analytics.tracking.android.GAServiceProxy$ConnectState -> com.google.analytics.tracking.android.ad:
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState CONNECTING -> a
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState CONNECTED_SERVICE -> b
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState CONNECTED_LOCAL -> c
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState BLOCKED -> d
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState PENDING_CONNECTION -> e
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState PENDING_DISCONNECT -> f
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState DISCONNECTED -> g
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState[] $VALUES -> h
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState[] values() -> values
    com.google.analytics.tracking.android.GAServiceProxy$ConnectState valueOf(java.lang.String) -> valueOf
com.google.analytics.tracking.android.GAServiceProxy$DisconnectCheckTask -> com.google.analytics.tracking.android.ae:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAServiceProxy$FailedConnectTask -> com.google.analytics.tracking.android.af:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAServiceProxy$HitParams -> com.google.analytics.tracking.android.ag:
    java.util.Map wireFormatParams -> a
    long hitTimeInMilliseconds -> b
    java.lang.String path -> c
    java.util.List commands -> d
    java.util.Map getWireFormatParams() -> a
    long getHitTimeInMilliseconds() -> b
    java.lang.String getPath() -> c
    java.util.List getCommands() -> d
    java.lang.String toString() -> toString
com.google.analytics.tracking.android.GAServiceProxy$ReconnectTask -> com.google.analytics.tracking.android.ah:
    com.google.analytics.tracking.android.GAServiceProxy this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAThread -> com.google.analytics.tracking.android.ai:
    java.util.concurrent.LinkedBlockingQueue queue -> a
    boolean mDisabled -> b
    boolean mClosed -> c
    java.util.List mCommands -> d
    java.lang.String mInstallCampaign -> e
    java.lang.String mClientId -> f
    com.google.analytics.tracking.android.GAThread sInstance -> g
    com.google.analytics.tracking.android.ServiceProxy mServiceProxy -> h
    android.content.Context mContext -> i
    com.google.analytics.tracking.android.GAThread getInstance(android.content.Context) -> a
    void sendHit(java.util.Map) -> a
    void dispatch() -> a
    void setForceLocalDispatch() -> b
    void queueToThread(java.lang.Runnable) -> a
    java.lang.String getAndClearCampaign(android.content.Context) -> b
    java.lang.String printStackTrace(java.lang.Throwable) -> a
    void run() -> run
    java.util.concurrent.LinkedBlockingQueue getQueue() -> c
    java.lang.Thread getThread() -> d
    java.lang.String access$000(com.google.analytics.tracking.android.GAThread) -> a
    android.content.Context access$100(com.google.analytics.tracking.android.GAThread) -> b
    boolean access$200$424bc930(java.util.Map) -> b
    java.lang.String access$300(com.google.analytics.tracking.android.GAThread) -> c
    java.lang.String access$302$5f7b49dd(com.google.analytics.tracking.android.GAThread) -> d
    void access$400$424bc934(java.util.Map) -> c
    java.lang.String access$500$6c0750ac(java.util.Map) -> d
    java.util.List access$600(com.google.analytics.tracking.android.GAThread) -> e
    com.google.analytics.tracking.android.ServiceProxy access$700(com.google.analytics.tracking.android.GAThread) -> f
com.google.analytics.tracking.android.GAThread$1 -> com.google.analytics.tracking.android.aj:
    java.util.Map val$hitCopy -> a
    com.google.analytics.tracking.android.GAThread this$0 -> b
    void run() -> run
com.google.analytics.tracking.android.GAThread$2 -> com.google.analytics.tracking.android.ak:
    com.google.analytics.tracking.android.GAThread this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAThread$4 -> com.google.analytics.tracking.android.al:
    com.google.analytics.tracking.android.GAThread this$0 -> a
    void run() -> run
com.google.analytics.tracking.android.GAUsage -> com.google.analytics.tracking.android.am:
    java.util.SortedSet mUsedFields -> a
    java.lang.StringBuilder mSequence -> b
    boolean mDisableUsage -> c
    com.google.analytics.tracking.android.GAUsage INSTANCE -> d
    com.google.analytics.tracking.android.GAUsage getInstance() -> a
    void setDisableUsage(boolean) -> a
    void setUsage(com.google.analytics.tracking.android.GAUsage$Field) -> a
    java.lang.String getAndClearUsage() -> b
    java.lang.String getAndClearSequence() -> c
com.google.analytics.tracking.android.GAUsage$Field -> com.google.analytics.tracking.android.an:
    com.google.analytics.tracking.android.GAUsage$Field MAP_BUILDER_SET -> a
    com.google.analytics.tracking.android.GAUsage$Field MAP_BUILDER_SET_ALL -> b
    com.google.analytics.tracking.android.GAUsage$Field MAP_BUILDER_GET -> c
    com.google.analytics.tracking.android.GAUsage$Field MAP_BUILDER_SET_CAMPAIGN_PARAMS -> d
    com.google.analytics.tracking.android.GAUsage$Field BLANK_04 -> e
    com.google.analytics.tracking.android.GAUsage$Field BLANK_05 -> f
    com.google.analytics.tracking.android.GAUsage$Field BLANK_06 -> g
    com.google.analytics.tracking.android.GAUsage$Field BLANK_07 -> h
    com.google.analytics.tracking.android.GAUsage$Field BLANK_08 -> i
    com.google.analytics.tracking.android.GAUsage$Field GET -> j
    com.google.analytics.tracking.android.GAUsage$Field SET -> k
    com.google.analytics.tracking.android.GAUsage$Field SEND -> l
    com.google.analytics.tracking.android.GAUsage$Field BLANK_12 -> m
    com.google.analytics.tracking.android.GAUsage$Field BLANK_13 -> n
    com.google.analytics.tracking.android.GAUsage$Field BLANK_14 -> o
    com.google.analytics.tracking.android.GAUsage$Field BLANK_15 -> p
    com.google.analytics.tracking.android.GAUsage$Field BLANK_16 -> q
    com.google.analytics.tracking.android.GAUsage$Field BLANK_17 -> r
    com.google.analytics.tracking.android.GAUsage$Field BLANK_18 -> s
    com.google.analytics.tracking.android.GAUsage$Field BLANK_19 -> t
    com.google.analytics.tracking.android.GAUsage$Field BLANK_20 -> u
    com.google.analytics.tracking.android.GAUsage$Field BLANK_21 -> v
    com.google.analytics.tracking.android.GAUsage$Field BLANK_22 -> w
    com.google.analytics.tracking.android.GAUsage$Field BLANK_23 -> x
    com.google.analytics.tracking.android.GAUsage$Field BLANK_24 -> y
    com.google.analytics.tracking.android.GAUsage$Field BLANK_25 -> z
    com.google.analytics.tracking.android.GAUsage$Field BLANK_26 -> A
    com.google.analytics.tracking.android.GAUsage$Field BLANK_27 -> B
    com.google.analytics.tracking.android.GAUsage$Field BLANK_28 -> C
    com.google.analytics.tracking.android.GAUsage$Field BLANK_29 -> D
    com.google.analytics.tracking.android.GAUsage$Field SET_EXCEPTION_PARSER -> E
    com.google.analytics.tracking.android.GAUsage$Field GET_EXCEPTION_PARSER -> F
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_TRANSACTION -> G
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_EXCEPTION -> H
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_RAW_EXCEPTION -> I
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_TIMING -> J
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_SOCIAL -> K
    com.google.analytics.tracking.android.GAUsage$Field BLANK_37 -> L
    com.google.analytics.tracking.android.GAUsage$Field BLANK_38 -> M
    com.google.analytics.tracking.android.GAUsage$Field GET_TRACKER -> N
    com.google.analytics.tracking.android.GAUsage$Field GET_DEFAULT_TRACKER -> O
    com.google.analytics.tracking.android.GAUsage$Field SET_DEFAULT_TRACKER -> P
    com.google.analytics.tracking.android.GAUsage$Field SET_APP_OPT_OUT -> Q
    com.google.analytics.tracking.android.GAUsage$Field GET_APP_OPT_OUT -> R
    com.google.analytics.tracking.android.GAUsage$Field DISPATCH -> S
    com.google.analytics.tracking.android.GAUsage$Field SET_DISPATCH_PERIOD -> T
    com.google.analytics.tracking.android.GAUsage$Field BLANK_46 -> U
    com.google.analytics.tracking.android.GAUsage$Field REPORT_UNCAUGHT_EXCEPTIONS -> V
    com.google.analytics.tracking.android.GAUsage$Field SET_AUTO_ACTIVITY_TRACKING -> W
    com.google.analytics.tracking.android.GAUsage$Field SET_SESSION_TIMEOUT -> X
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_EVENT -> Y
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_ITEM -> Z
    com.google.analytics.tracking.android.GAUsage$Field BLANK_52 -> aa
    com.google.analytics.tracking.android.GAUsage$Field BLANK_53 -> ab
    com.google.analytics.tracking.android.GAUsage$Field SET_DRY_RUN -> ac
    com.google.analytics.tracking.android.GAUsage$Field GET_DRY_RUN -> ad
    com.google.analytics.tracking.android.GAUsage$Field SET_LOGGER -> ae
    com.google.analytics.tracking.android.GAUsage$Field SET_FORCE_LOCAL_DISPATCH -> af
    com.google.analytics.tracking.android.GAUsage$Field GET_TRACKER_NAME -> ag
    com.google.analytics.tracking.android.GAUsage$Field CLOSE_TRACKER -> ah
    com.google.analytics.tracking.android.GAUsage$Field EASY_TRACKER_ACTIVITY_START -> ai
    com.google.analytics.tracking.android.GAUsage$Field EASY_TRACKER_ACTIVITY_STOP -> aj
    com.google.analytics.tracking.android.GAUsage$Field CONSTRUCT_APP_VIEW -> ak
    com.google.analytics.tracking.android.GAUsage$Field[] $VALUES -> al
    com.google.analytics.tracking.android.GAUsage$Field[] values() -> values
    com.google.analytics.tracking.android.GAUsage$Field valueOf(java.lang.String) -> valueOf
com.google.analytics.tracking.android.GoogleAnalytics -> com.google.analytics.tracking.android.ao:
    boolean mDryRun -> a
    com.google.analytics.tracking.android.AnalyticsThread mThread -> b
    android.content.Context mContext -> c
    java.lang.Boolean mAppOptOut -> d
    java.util.Map mTrackers -> e
    com.google.analytics.tracking.android.Logger mLogger -> f
    com.google.analytics.tracking.android.GoogleAnalytics sInstance -> g
    com.google.analytics.tracking.android.GoogleAnalytics getInstance(android.content.Context) -> a
    com.google.analytics.tracking.android.GoogleAnalytics getInstance() -> a
    void setDryRun(boolean) -> a
    boolean isDryRunEnabled() -> b
    void sendHit(java.util.Map) -> a
    boolean getAppOptOut() -> c
    com.google.analytics.tracking.android.Logger getLogger() -> d
com.google.analytics.tracking.android.Hit -> com.google.analytics.tracking.android.ap:
    java.lang.String mHitString -> a
    long mHitId -> b
    long mHitTime -> c
    java.lang.String mHitUrlScheme -> d
    java.lang.String getHitParams() -> a
    void setHitString(java.lang.String) -> a
    long getHitId() -> b
    long getHitTime() -> c
    java.lang.String getHitUrlScheme() -> d
    void setHitUrl(java.lang.String) -> b
com.google.analytics.tracking.android.HitBuilder -> com.google.analytics.tracking.android.aq:
    java.lang.String encode(java.lang.String) -> a
com.google.analytics.tracking.android.Log -> com.google.analytics.tracking.android.ar:
    com.google.analytics.tracking.android.GoogleAnalytics sGaInstance -> a
    void e(java.lang.String) -> a
    void i(java.lang.String) -> b
    void v(java.lang.String) -> c
    void w(java.lang.String) -> d
    boolean isVerbose() -> a
    com.google.analytics.tracking.android.Logger getLogger() -> b
com.google.analytics.tracking.android.Logger -> com.google.analytics.tracking.android.as:
    void verbose(java.lang.String) -> a
    void info(java.lang.String) -> b
    void warn(java.lang.String) -> c
    void error(java.lang.String) -> d
    void setLogLevel(com.google.analytics.tracking.android.Logger$LogLevel) -> a
    com.google.analytics.tracking.android.Logger$LogLevel getLogLevel() -> a
com.google.analytics.tracking.android.Logger$LogLevel -> com.google.analytics.tracking.android.at:
    com.google.analytics.tracking.android.Logger$LogLevel VERBOSE -> a
    com.google.analytics.tracking.android.Logger$LogLevel INFO -> b
    com.google.analytics.tracking.android.Logger$LogLevel WARNING -> c
    com.google.analytics.tracking.android.Logger$LogLevel ERROR -> d
    com.google.analytics.tracking.android.Logger$LogLevel[] $VALUES -> e
    com.google.analytics.tracking.android.Logger$LogLevel[] values() -> values
    com.google.analytics.tracking.android.Logger$LogLevel valueOf(java.lang.String) -> valueOf
com.google.analytics.tracking.android.MapBuilder -> com.google.analytics.tracking.android.au:
    java.util.Map map -> a
    com.google.analytics.tracking.android.MapBuilder set(java.lang.String,java.lang.String) -> a
    java.util.Map build() -> a
com.google.analytics.tracking.android.ParameterLoader -> com.google.analytics.tracking.android.av:
    java.lang.String getString(java.lang.String) -> a
    java.lang.Double getDoubleFromString(java.lang.String) -> b
    boolean getBoolean(java.lang.String) -> c
    int getInt(java.lang.String,int) -> a
    void setResourcePackageName(java.lang.String) -> d
com.google.analytics.tracking.android.ParameterLoaderImpl -> com.google.analytics.tracking.android.aw:
    android.content.Context mContext -> a
    java.lang.String mOverrideResourcePackageName -> b
    int getResourceIdForType(java.lang.String,java.lang.String) -> a
    java.lang.String getString(java.lang.String) -> a
    boolean getBoolean(java.lang.String) -> c
    int getInt(java.lang.String,int) -> a
    java.lang.Double getDoubleFromString(java.lang.String) -> b
    void setResourcePackageName(java.lang.String) -> d
com.google.analytics.tracking.android.PersistentAnalyticsStore -> com.google.analytics.tracking.android.ax:
    java.lang.String CREATE_HITS_TABLE -> a
    com.google.analytics.tracking.android.PersistentAnalyticsStore$AnalyticsDatabaseHelper mDbHelper -> b
    com.google.analytics.tracking.android.Dispatcher mDispatcher -> c
    com.google.analytics.tracking.android.AnalyticsStoreStateListener mListener -> d
    android.content.Context mContext -> e
    java.lang.String mDatabaseName -> f
    long mLastDeleteStaleHitsTime -> g
    com.google.analytics.tracking.android.Clock mClock -> h
    void clearHits$1349ef() -> a
    void putHit(java.util.Map,long,java.lang.String,java.util.Collection) -> a
    void fillVersionParameter(java.util.Map,java.util.Collection) -> a
    java.lang.String generateHitString(java.util.Map) -> a
    java.util.List peekHitIds(int) -> a
    java.util.List peekHits$22f3aa59() -> e
    void deleteHits(java.util.Collection) -> a
    void deleteHits(java.lang.String[]) -> a
    int getNumStoredHits() -> f
    void dispatch() -> b
    com.google.analytics.tracking.android.Dispatcher getDispatcher() -> c
    android.database.sqlite.SQLiteDatabase getWritableDatabase(java.lang.String) -> a
    com.google.analytics.tracking.android.Clock access$000(com.google.analytics.tracking.android.PersistentAnalyticsStore) -> a
    java.lang.String access$100(com.google.analytics.tracking.android.PersistentAnalyticsStore) -> b
    android.content.Context access$200(com.google.analytics.tracking.android.PersistentAnalyticsStore) -> c
    java.lang.String access$300() -> d
com.google.analytics.tracking.android.PersistentAnalyticsStore$1 -> com.google.analytics.tracking.android.ay:
    com.google.analytics.tracking.android.PersistentAnalyticsStore this$0 -> a
    long currentTimeMillis() -> a
com.google.analytics.tracking.android.PersistentAnalyticsStore$AnalyticsDatabaseHelper -> com.google.analytics.tracking.android.az:
    boolean mBadDatabase -> b
    long mLastDatabaseCheckTime -> c
    com.google.analytics.tracking.android.PersistentAnalyticsStore this$0 -> a
    boolean tablePresent(java.lang.String,android.database.sqlite.SQLiteDatabase) -> a
    android.database.sqlite.SQLiteDatabase getWritableDatabase() -> getWritableDatabase
    void onOpen(android.database.sqlite.SQLiteDatabase) -> onOpen
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.google.analytics.tracking.android.ScreenResolutionDefaultProvider -> com.google.analytics.tracking.android.ba:
    com.google.analytics.tracking.android.ScreenResolutionDefaultProvider sInstance -> a
    java.lang.Object sInstanceLock -> b
    android.content.Context mContext -> c
    void initializeProvider(android.content.Context) -> a
    com.google.analytics.tracking.android.ScreenResolutionDefaultProvider getProvider() -> a
    java.lang.String getValue(java.lang.String) -> a
com.google.analytics.tracking.android.ServiceManager -> com.google.analytics.tracking.android.bb:
    void dispatchLocalHits() -> c
    void setLocalDispatchPeriod(int) -> a
    void updateConnectivityStatus(boolean) -> a
    void onRadioPowered() -> d
com.google.analytics.tracking.android.ServiceProxy -> com.google.analytics.tracking.android.bc:
    void putHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void setForceLocalDispatch() -> d
    void dispatch() -> c
    void createService() -> e
com.google.analytics.tracking.android.SimpleNetworkDispatcher -> com.google.analytics.tracking.android.bd:
    java.lang.String userAgent -> a
    org.apache.http.client.HttpClient httpClient -> b
    android.content.Context ctx -> c
    com.google.analytics.tracking.android.GoogleAnalytics gaInstance -> d
    java.net.URL mOverrideHostUrl -> e
    boolean okToDispatch() -> a
    int dispatchHits(java.util.List) -> a
    org.apache.http.HttpEntityEnclosingRequest buildRequest(java.lang.String,java.lang.String) -> a
    void logDebugInformation(org.apache.http.HttpEntityEnclosingRequest) -> a
    java.net.URL getUrl(com.google.analytics.tracking.android.Hit) -> a
    void overrideHostUrl(java.lang.String) -> a
com.google.analytics.tracking.android.StandardExceptionParser -> com.google.analytics.tracking.android.be:
    java.util.TreeSet includedPackages -> a
    void setIncludedPackages(android.content.Context,java.util.Collection) -> a
    java.lang.Throwable getCause(java.lang.Throwable) -> a
    java.lang.String getDescription(java.lang.String,java.lang.Throwable) -> a
com.google.analytics.tracking.android.Tracker -> com.google.analytics.tracking.android.bf:
    java.lang.String mName -> a
    com.google.analytics.tracking.android.TrackerHandler mHandler -> b
    java.util.Map mParams -> c
    long mTokens -> d
    long mLastTrackTime -> e
    com.google.analytics.tracking.android.ClientIdDefaultProvider mClientIdDefaultProvider -> f
    com.google.analytics.tracking.android.ScreenResolutionDefaultProvider mScreenResolutionDefaultProvider -> g
    com.google.analytics.tracking.android.AppFieldsDefaultProvider mAppFieldsDefaultProvider -> h
    void send(java.util.Map) -> a
    void set(java.lang.String,java.lang.String) -> a
    boolean tokensAvailable() -> a
com.google.analytics.tracking.android.TrackerHandler -> com.google.analytics.tracking.android.bg:
    void sendHit(java.util.Map) -> a
com.google.analytics.tracking.android.Utils -> com.google.analytics.tracking.android.bh:
    char[] HEXBYTES -> a
    java.util.Map parseURLParameters(java.lang.String) -> a
    double safeParseDouble$505d11f3(java.lang.String) -> b
    boolean safeParseBoolean$505cbf47(java.lang.String) -> c
    java.lang.String filterCampaign(java.lang.String) -> d
    java.lang.String getLanguage(java.util.Locale) -> a
    void putIfAbsent(java.util.Map,java.lang.String,java.lang.String) -> a
com.google.android.gms.analytics.internal.Command -> com.google.android.gms.analytics.internal.Command:
    java.lang.String id -> a
    java.lang.String urlParam -> b
    java.lang.String value -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String getId() -> a
    java.lang.String getValue() -> b
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.google.android.gms.analytics.internal.Command$1 -> com.google.android.gms.analytics.internal.a:
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.google.android.gms.analytics.internal.IAnalyticsService -> com.google.android.gms.analytics.internal.b:
    void sendHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void clearHits() -> a
com.google.android.gms.analytics.internal.IAnalyticsService$Stub -> com.google.android.gms.analytics.internal.c:
    com.google.android.gms.analytics.internal.IAnalyticsService asInterface(android.os.IBinder) -> a
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.google.android.gms.analytics.internal.IAnalyticsService$Stub$Proxy -> com.google.android.gms.analytics.internal.d:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    void sendHit(java.util.Map,long,java.lang.String,java.util.List) -> a
    void clearHits() -> a
com.google.android.vending.licensing.DeviceLimiter -> com.google.android.a.a.a:
com.google.android.vending.licensing.ILicenseResultListener -> com.google.android.a.a.b:
    void verifyLicense(int,java.lang.String,java.lang.String) -> a
com.google.android.vending.licensing.ILicenseResultListener$Stub -> com.google.android.a.a.c:
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.google.android.vending.licensing.ILicenseResultListener$Stub$Proxy -> com.google.android.a.a.d:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    void verifyLicense(int,java.lang.String,java.lang.String) -> a
com.google.android.vending.licensing.ILicensingService -> com.google.android.a.a.e:
    void checkLicense(long,java.lang.String,com.google.android.vending.licensing.ILicenseResultListener) -> a
com.google.android.vending.licensing.ILicensingService$Stub -> com.google.android.a.a.f:
    com.google.android.vending.licensing.ILicensingService asInterface(android.os.IBinder) -> a
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.google.android.vending.licensing.ILicensingService$Stub$Proxy -> com.google.android.a.a.g:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    void checkLicense(long,java.lang.String,com.google.android.vending.licensing.ILicenseResultListener) -> a
com.google.android.vending.licensing.LicenseChecker -> com.google.android.a.a.h:
    java.security.SecureRandom RANDOM -> a
    com.google.android.vending.licensing.ILicensingService mService -> b
    java.security.PublicKey mPublicKey -> c
    android.content.Context mContext -> d
    com.google.android.vending.licensing.Policy mPolicy -> e
    android.os.Handler mHandler -> f
    java.lang.String mPackageName -> g
    java.lang.String mVersionCode -> h
    java.util.Set mChecksInProgress -> i
    java.util.Queue mPendingChecks -> j
    void checkAccess(com.google.android.vending.licensing.LicenseCheckerCallback) -> a
    void runChecks() -> a
    void finishCheck(com.google.android.vending.licensing.LicenseValidator) -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    void handleServiceConnectionError(com.google.android.vending.licensing.LicenseValidator) -> b
    void access$0(com.google.android.vending.licensing.LicenseChecker,com.google.android.vending.licensing.LicenseValidator) -> a
    void access$1(com.google.android.vending.licensing.LicenseChecker,com.google.android.vending.licensing.LicenseValidator) -> b
    android.os.Handler access$2(com.google.android.vending.licensing.LicenseChecker) -> a
    java.util.Set access$3(com.google.android.vending.licensing.LicenseChecker) -> b
    java.security.PublicKey access$4(com.google.android.vending.licensing.LicenseChecker) -> c
com.google.android.vending.licensing.LicenseChecker$ResultListener -> com.google.android.a.a.i:
    com.google.android.vending.licensing.LicenseValidator mValidator -> b
    java.lang.Runnable mOnTimeout -> c
    com.google.android.vending.licensing.LicenseChecker this$0 -> a
    void verifyLicense(int,java.lang.String,java.lang.String) -> a
    com.google.android.vending.licensing.LicenseValidator access$0(com.google.android.vending.licensing.LicenseChecker$ResultListener) -> a
    void access$1(com.google.android.vending.licensing.LicenseChecker$ResultListener) -> b
    com.google.android.vending.licensing.LicenseChecker access$2(com.google.android.vending.licensing.LicenseChecker$ResultListener) -> c
com.google.android.vending.licensing.LicenseChecker$ResultListener$1 -> com.google.android.a.a.j:
    com.google.android.vending.licensing.LicenseChecker$ResultListener this$1 -> a
    void run() -> run
com.google.android.vending.licensing.LicenseChecker$ResultListener$2 -> com.google.android.a.a.k:
    com.google.android.vending.licensing.LicenseChecker$ResultListener this$1 -> a
    int val$responseCode -> b
    java.lang.String val$signedData -> c
    java.lang.String val$signature -> d
    void run() -> run
com.google.android.vending.licensing.LicenseCheckerCallback -> com.google.android.a.a.l:
com.google.android.vending.licensing.LicenseValidator -> com.google.android.a.a.m:
    com.google.android.vending.licensing.Policy mPolicy -> a
    com.google.android.vending.licensing.LicenseCheckerCallback mCallback -> b
    int mNonce -> c
    java.lang.String mPackageName -> d
    java.lang.String mVersionCode -> e
    com.google.android.vending.licensing.DeviceLimiter mDeviceLimiter -> f
    com.google.android.vending.licensing.LicenseCheckerCallback getCallback() -> a
    int getNonce() -> b
    java.lang.String getPackageName() -> c
    void verify(java.security.PublicKey,int,java.lang.String,java.lang.String) -> a
    void handleResponse$37e43be3() -> d
com.google.android.vending.licensing.NullDeviceLimiter -> com.google.android.a.a.n:
com.google.android.vending.licensing.Policy -> com.google.android.a.a.o:
    boolean allowAccess() -> a
com.google.android.vending.licensing.ResponseData -> com.google.android.a.a.p:
    int responseCode -> a
    int nonce -> b
    java.lang.String packageName -> c
    java.lang.String versionCode -> d
    java.lang.String userId -> e
    long timestamp -> f
    java.lang.String extra -> g
    java.lang.String toString() -> toString
com.google.android.vending.licensing.util.Base64 -> com.google.android.a.a.a.a:
    byte[] ALPHABET -> b
    byte[] WEBSAFE_ALPHABET -> c
    byte[] DECODABET -> d
    byte[] WEBSAFE_DECODABET -> e
    boolean $assertionsDisabled -> a
    int decode4to3$355785af(byte[],byte[],int,byte[]) -> a
    byte[] decode(java.lang.String) -> a
com.google.android.vending.licensing.util.Base64DecoderException -> com.google.android.a.a.a.b:
com.google.gdata.util.common.base.PercentEscaper -> com.google.a.a.a.a.a:
    char[] URI_ESCAPED_SPACE -> a
    char[] UPPER_HEX_DIGITS -> b
    boolean plusForSpace -> c
    boolean[] safeOctets -> d
    boolean[] createSafeOctets(java.lang.String) -> b
    int nextEscapeIndex(java.lang.CharSequence,int,int) -> a
    java.lang.String escape(java.lang.String) -> a
    char[] escape(int) -> a
com.google.gdata.util.common.base.UnicodeEscaper -> com.google.a.a.a.a.b:
    java.lang.ThreadLocal DEST_TL -> a
    char[] escape(int) -> a
    int nextEscapeIndex(java.lang.CharSequence,int,int) -> a
    java.lang.String escape(java.lang.String) -> a
    java.lang.String escapeSlow(java.lang.String,int) -> a
    int codePointAt(java.lang.CharSequence,int,int) -> b
    char[] growBuffer(char[],int,int) -> a
com.google.gdata.util.common.base.UnicodeEscaper$2 -> com.google.a.a.a.a.c:
    java.lang.Object initialValue() -> initialValue
com.google.tagmanager.AdwordsClickReferrerListener -> com.google.tagmanager.a:
    android.content.Context context -> a
com.google.tagmanager.Clock -> com.google.tagmanager.b:
    long currentTimeMillis() -> a
com.google.tagmanager.Container -> com.google.tagmanager.c:
    com.google.tagmanager.TagManager mTagManager -> a
    com.google.tagmanager.Container$ResourceLoaderScheduler mNetworkLoadScheduler -> b
    com.google.tagmanager.Runtime mRuntime -> c
    com.google.tagmanager.Clock mClock -> d
    java.lang.String mCtfeUrlPathAndQuery -> e
    com.google.analytics.containertag.proto.Serving$Resource mLastLoadedResource -> f
    long mLastRefreshMethodCalledTime -> g
    int mNumTokens -> h
    void refresh() -> a
    void loadAfterDelay$1349ef() -> c
    com.google.tagmanager.Runtime getRuntime() -> d
    void setCtfeUrlPathAndQuery(java.lang.String) -> a
    java.lang.String getCtfeUrlPathAndQuery() -> b
    boolean isDefaultContainerRefreshMode() -> e
com.google.tagmanager.Container$ResourceLoaderScheduler -> com.google.tagmanager.d:
com.google.tagmanager.DataLayer -> com.google.tagmanager.e:
    java.lang.Object OBJECT_NOT_PRESENT -> a
    java.util.concurrent.ConcurrentHashMap mListeners -> b
    java.util.Map mModel -> c
    java.util.concurrent.locks.ReentrantLock mPushLock -> d
    java.util.LinkedList mUpdateQueue -> e
    void registerListener(com.google.tagmanager.DataLayer$Listener) -> a
com.google.tagmanager.DataLayer$Listener -> com.google.tagmanager.f:
com.google.tagmanager.DefaultLogger -> com.google.tagmanager.g:
    com.google.tagmanager.Logger$LogLevel mLogLevel -> a
    void e(java.lang.String) -> a
    void w(java.lang.String) -> b
    void i(java.lang.String) -> c
    void v(java.lang.String) -> d
com.google.tagmanager.InstallReferrerReceiver -> com.google.tagmanager.InstallReferrerReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.tagmanager.InstallReferrerService -> com.google.tagmanager.InstallReferrerService:
    com.google.analytics.tracking.android.CampaignTrackingService gaService -> a
    android.content.Context contextOverride -> b
    void onHandleIntent(android.content.Intent) -> onHandleIntent
com.google.tagmanager.InstallReferrerUtil -> com.google.tagmanager.h:
    java.lang.String installReferrer -> b
    java.util.Map clickReferrers -> a
    void cacheInstallReferrer(java.lang.String) -> a
    void saveInstallReferrer(android.content.Context,java.lang.String) -> a
com.google.tagmanager.Log -> com.google.tagmanager.i:
    com.google.tagmanager.Logger sLogger -> a
    void e(java.lang.String) -> a
    void w(java.lang.String) -> b
    void i(java.lang.String) -> c
    void v(java.lang.String) -> d
com.google.tagmanager.Logger -> com.google.tagmanager.j:
    void e(java.lang.String) -> a
    void w(java.lang.String) -> b
    void i(java.lang.String) -> c
    void v(java.lang.String) -> d
com.google.tagmanager.Logger$LogLevel -> com.google.tagmanager.k:
    com.google.tagmanager.Logger$LogLevel VERBOSE -> a
    com.google.tagmanager.Logger$LogLevel DEBUG -> b
    com.google.tagmanager.Logger$LogLevel INFO -> c
    com.google.tagmanager.Logger$LogLevel WARNING -> d
    com.google.tagmanager.Logger$LogLevel ERROR -> e
    com.google.tagmanager.Logger$LogLevel NONE -> f
    com.google.tagmanager.Logger$LogLevel[] $VALUES -> g
    com.google.tagmanager.Logger$LogLevel[] values() -> values
    com.google.tagmanager.Logger$LogLevel valueOf(java.lang.String) -> valueOf
com.google.tagmanager.ObjectAndStatic -> com.google.tagmanager.l:
    java.lang.Object mObject -> a
    boolean mIsStatic -> b
com.google.tagmanager.PreviewActivity -> com.google.tagmanager.PreviewActivity:
    void onCreate(android.os.Bundle) -> onCreate
com.google.tagmanager.PreviewManager -> com.google.tagmanager.m:
    com.google.tagmanager.PreviewManager sInstance -> a
    com.google.tagmanager.PreviewManager$PreviewMode mPreviewMode -> b
    java.lang.String mContainerId -> c
    java.lang.String mCTFEUrlPath -> d
    java.lang.String mCTFEUrlQuery -> e
    com.google.tagmanager.PreviewManager getInstance() -> a
    boolean setPreviewData(android.net.Uri) -> a
    com.google.tagmanager.PreviewManager$PreviewMode getPreviewMode() -> b
    java.lang.String getCTFEUrlPath() -> c
    java.lang.String getContainerId() -> d
    java.lang.String getContainerId(java.lang.String) -> a
com.google.tagmanager.PreviewManager$PreviewMode -> com.google.tagmanager.n:
    com.google.tagmanager.PreviewManager$PreviewMode NONE -> a
    com.google.tagmanager.PreviewManager$PreviewMode CONTAINER -> b
    com.google.tagmanager.PreviewManager$PreviewMode CONTAINER_DEBUG -> c
    com.google.tagmanager.PreviewManager$PreviewMode[] $VALUES -> d
    com.google.tagmanager.PreviewManager$PreviewMode[] values() -> values
    com.google.tagmanager.PreviewManager$PreviewMode valueOf(java.lang.String) -> valueOf
com.google.tagmanager.Runtime -> com.google.tagmanager.o:
    com.google.tagmanager.ObjectAndStatic DEFAULT_VALUE_AND_STATIC -> a
com.google.tagmanager.SharedPreferencesUtil -> com.google.tagmanager.p:
    void saveAsync(android.content.Context,java.lang.String,java.lang.String,java.lang.String) -> a
com.google.tagmanager.SharedPreferencesUtil$1 -> com.google.tagmanager.q:
    android.content.SharedPreferences$Editor val$editor -> a
    void run() -> run
com.google.tagmanager.TagManager -> com.google.tagmanager.r:
    com.google.tagmanager.TagManager$ContainerProvider mContainerProvider -> a
    android.content.Context mContext -> b
    com.google.tagmanager.DataLayer mDataLayer -> c
    com.google.tagmanager.TagManager$RefreshMode mRefreshMode -> d
    java.util.concurrent.ConcurrentMap mContainers -> e
    com.google.tagmanager.TagManager sInstance -> f
    com.google.tagmanager.TagManager getInstance(android.content.Context) -> a
    com.google.tagmanager.TagManager$RefreshMode getRefreshMode() -> a
    boolean setPreviewData(android.net.Uri) -> a
com.google.tagmanager.TagManager$1 -> com.google.tagmanager.s:
    com.google.tagmanager.TagManager this$0 -> a
com.google.tagmanager.TagManager$2 -> com.google.tagmanager.t:
com.google.tagmanager.TagManager$3 -> com.google.tagmanager.u:
    int[] $SwitchMap$com$google$tagmanager$PreviewManager$PreviewMode -> a
com.google.tagmanager.TagManager$ContainerProvider -> com.google.tagmanager.v:
com.google.tagmanager.TagManager$RefreshMode -> com.google.tagmanager.w:
    com.google.tagmanager.TagManager$RefreshMode STANDARD -> a
    com.google.tagmanager.TagManager$RefreshMode DEFAULT_CONTAINER -> b
    com.google.tagmanager.TagManager$RefreshMode[] $VALUES -> c
    com.google.tagmanager.TagManager$RefreshMode[] values() -> values
    com.google.tagmanager.TagManager$RefreshMode valueOf(java.lang.String) -> valueOf
com.google.tagmanager.TypedNumber -> com.google.tagmanager.x:
    double mDouble -> a
    long mInt64 -> b
    boolean mIsInt64 -> c
    com.google.tagmanager.TypedNumber numberWithInt64$7be0f6bf() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(com.google.tagmanager.TypedNumber) -> a
    boolean isDouble() -> b
    boolean isInt64() -> c
    double doubleValue() -> doubleValue
    float floatValue() -> floatValue
    long longValue() -> longValue
    int intValue() -> intValue
    short shortValue() -> shortValue
    byte byteValue() -> byteValue
    int compareTo(java.lang.Object) -> compareTo
com.google.tagmanager.Types -> com.google.tagmanager.y:
    java.lang.Object DEFAULT_OBJECT -> a
    java.lang.Long DEFAULT_INT64 -> b
    java.lang.Double DEFAULT_DOUBLE -> c
    com.google.tagmanager.TypedNumber DEFAULT_NUMBER -> d
    java.lang.String DEFAULT_STRING -> e
    java.lang.Boolean DEFAULT_BOOLEAN -> f
    java.util.List DEFAULT_LIST -> g
    java.util.Map DEFAULT_MAP -> h
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value DEFAULT_VALUE -> i
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value getDefaultValue() -> a
    com.google.analytics.midtier.proto.containertag.TypeSystem$Value objectToValue(java.lang.Object) -> a
com.google.tagmanager.protobuf.AbstractMessageLite -> com.google.tagmanager.a.a:
    int memoizedHashCode -> b
com.google.tagmanager.protobuf.AbstractMessageLite$Builder -> com.google.tagmanager.a.b:
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder clone() -> d
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
    java.lang.Object clone() -> clone
    com.google.tagmanager.protobuf.MessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> b
com.google.tagmanager.protobuf.AbstractMutableMessageLite -> com.google.tagmanager.a.c:
    boolean isMutable -> b
    int cachedSize -> a
    com.google.tagmanager.protobuf.UninitializedMessageException newUninitializedMessageException() -> a
    java.lang.Object clone() -> clone
com.google.tagmanager.protobuf.AbstractParser -> com.google.tagmanager.a.d:
    com.google.tagmanager.protobuf.ExtensionRegistryLite EMPTY_REGISTRY -> a
    com.google.tagmanager.protobuf.MessageLite parsePartialFrom(com.google.tagmanager.protobuf.ByteString,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> b
    java.lang.Object parseFrom(com.google.tagmanager.protobuf.ByteString,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
com.google.tagmanager.protobuf.BoundedByteString -> com.google.tagmanager.a.e:
    int bytesOffset -> d
    int bytesLength -> e
    byte byteAt(int) -> a
    int size() -> a
    int getOffsetIntoBytes() -> b
    void copyToInternal(byte[],int,int,int) -> a
    com.google.tagmanager.protobuf.ByteString$ByteIterator iterator() -> c
    java.util.Iterator iterator() -> iterator
com.google.tagmanager.protobuf.BoundedByteString$BoundedByteIterator -> com.google.tagmanager.a.f:
    int position -> b
    int limit -> c
    com.google.tagmanager.protobuf.BoundedByteString this$0 -> a
    boolean hasNext() -> hasNext
    byte nextByte() -> a
    void remove() -> remove
    java.lang.Object next() -> next
com.google.tagmanager.protobuf.ByteString -> com.google.tagmanager.a.g:
    com.google.tagmanager.protobuf.ByteString EMPTY -> a
    boolean $assertionsDisabled -> b
    com.google.tagmanager.protobuf.ByteString$ByteIterator iterator() -> c
    int size() -> a
    boolean isEmpty() -> d
    com.google.tagmanager.protobuf.ByteString copyFrom(byte[],int,int) -> a
    com.google.tagmanager.protobuf.ByteString concat(com.google.tagmanager.protobuf.ByteString) -> a
    com.google.tagmanager.protobuf.ByteString copyFrom(java.lang.Iterable) -> a
    com.google.tagmanager.protobuf.ByteString balancedConcat(java.util.Iterator,int) -> a
    void copyTo(byte[],int,int,int) -> b
    void copyToInternal(byte[],int,int,int) -> a
    byte[] toByteArray() -> e
    void writeTo(java.io.OutputStream,int,int) -> a
    void writeToInternal(java.io.OutputStream,int,int) -> b
    java.lang.String toString(java.lang.String) -> a
    java.lang.String toStringUtf8() -> f
    boolean isValidUtf8() -> g
    int partialIsValidUtf8(int,int,int) -> a
    int hashCode() -> hashCode
    com.google.tagmanager.protobuf.CodedInputStream newCodedInput() -> h
    com.google.tagmanager.protobuf.ByteString$Output newOutput() -> i
    int getTreeDepth() -> j
    boolean isBalanced() -> k
    int peekCachedHashCode() -> l
    int partialHash(int,int,int) -> b
    java.lang.String toString() -> toString
    java.util.Iterator iterator() -> iterator
com.google.tagmanager.protobuf.ByteString$ByteIterator -> com.google.tagmanager.a.h:
    byte nextByte() -> a
com.google.tagmanager.protobuf.ByteString$Output -> com.google.tagmanager.a.i:
    byte[] EMPTY_BYTE_ARRAY -> a
    int initialCapacity -> b
    java.util.ArrayList flushedBuffers -> c
    int flushedBuffersTotalBytes -> d
    byte[] buffer -> e
    int bufferPos -> f
    void write(int) -> write
    void write(byte[],int,int) -> write
    com.google.tagmanager.protobuf.ByteString toByteString() -> a
    int size() -> b
    java.lang.String toString() -> toString
    void flushFullBuffer(int) -> a
com.google.tagmanager.protobuf.CodedInputStream -> com.google.tagmanager.a.j:
    byte[] buffer -> a
    boolean bufferIsImmutable -> b
    int bufferSize -> c
    int bufferSizeAfterLimit -> d
    int bufferPos -> e
    java.io.InputStream input -> f
    int lastTag -> g
    boolean enableAliasing -> h
    int totalBytesRetired -> i
    int currentLimit -> j
    int recursionDepth -> k
    int recursionLimit -> l
    int sizeLimit -> m
    com.google.tagmanager.protobuf.CodedInputStream$RefillCallback refillCallback -> n
    com.google.tagmanager.protobuf.CodedInputStream newInstance(java.io.InputStream) -> a
    com.google.tagmanager.protobuf.CodedInputStream newInstance(com.google.tagmanager.protobuf.LiteralByteString) -> a
    int readTag() -> a
    void checkLastTagWas(int) -> a
    boolean skipField(int,com.google.tagmanager.protobuf.CodedOutputStream) -> a
    float readFloat() -> b
    long readInt64() -> c
    int readInt32() -> d
    boolean readBool() -> e
    java.lang.String readString() -> f
    void readGroup(int,com.google.tagmanager.protobuf.MessageLite$Builder,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
    void readMessage(com.google.tagmanager.protobuf.MessageLite$Builder,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
    com.google.tagmanager.protobuf.MessageLite readMessage(com.google.tagmanager.protobuf.Parser,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
    com.google.tagmanager.protobuf.ByteString readBytes() -> g
    int readEnum() -> h
    int readRawVarint32() -> i
    long readRawVarint64() -> j
    int readRawLittleEndian32() -> k
    long readRawLittleEndian64() -> l
    int pushLimit(int) -> b
    void recomputeBufferSizeAfterLimit() -> n
    void popLimit(int) -> c
    int getBytesUntilLimit() -> m
    boolean refillBuffer(boolean) -> a
    byte readRawByte() -> o
    byte[] readRawBytes(int) -> d
    void skipRawBytes(int) -> e
com.google.tagmanager.protobuf.CodedInputStream$RefillCallback -> com.google.tagmanager.a.k:
com.google.tagmanager.protobuf.CodedOutputStream -> com.google.tagmanager.a.l:
    byte[] buffer -> a
    int limit -> b
    int position -> c
    int totalBytesWritten -> d
    java.io.OutputStream output -> e
    com.google.tagmanager.protobuf.CodedOutputStream newInstance(java.io.OutputStream) -> a
    void refreshBuffer() -> b
    void flush() -> a
    void writeRawByte(int) -> a
    void writeRawBytes$4d83c943(com.google.tagmanager.protobuf.ByteString,int) -> a
    void writeRawVarint32(int) -> b
com.google.tagmanager.protobuf.CodedOutputStream$OutOfSpaceException -> com.google.tagmanager.a.m:
com.google.tagmanager.protobuf.ExtensionRegistryLite -> com.google.tagmanager.a.n:
    boolean eagerlyParseMessageSets -> a
    java.util.Map extensionsByNumber -> b
    com.google.tagmanager.protobuf.ExtensionRegistryLite EMPTY -> c
    com.google.tagmanager.protobuf.ExtensionRegistryLite getEmptyRegistry() -> a
    com.google.tagmanager.protobuf.GeneratedMessageLite$GeneratedExtension findLiteExtensionByNumber(com.google.tagmanager.protobuf.MessageLite,int) -> a
com.google.tagmanager.protobuf.ExtensionRegistryLite$ObjectIntPair -> com.google.tagmanager.a.o:
    java.lang.Object object -> a
    int number -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.tagmanager.protobuf.FieldSet -> com.google.tagmanager.a.p:
    com.google.tagmanager.protobuf.SmallSortedMap fields -> a
    boolean isImmutable -> b
    boolean hasLazyField -> c
    com.google.tagmanager.protobuf.FieldSet DEFAULT_INSTANCE -> d
    com.google.tagmanager.protobuf.FieldSet newFieldSet() -> a
    com.google.tagmanager.protobuf.FieldSet emptySet() -> b
    void makeImmutable() -> c
    com.google.tagmanager.protobuf.FieldSet clone() -> d
    java.lang.Object getField(com.google.tagmanager.protobuf.FieldSet$FieldDescriptorLite) -> a
    void setField(com.google.tagmanager.protobuf.FieldSet$FieldDescriptorLite,java.lang.Object) -> a
    void addRepeatedField(com.google.tagmanager.protobuf.FieldSet$FieldDescriptorLite,java.lang.Object) -> b
    void verifyType(com.google.tagmanager.protobuf.WireFormat$FieldType,java.lang.Object) -> a
    boolean isInitialized() -> e
    boolean isInitialized(java.util.Map$Entry) -> a
    int getWireFormatForFieldType(com.google.tagmanager.protobuf.WireFormat$FieldType,boolean) -> a
    void mergeFrom(com.google.tagmanager.protobuf.FieldSet) -> a
    void mergeFromField(java.util.Map$Entry) -> b
    java.lang.Object readPrimitiveField$2af6991a(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.WireFormat$FieldType) -> a
    java.lang.Object clone() -> clone
com.google.tagmanager.protobuf.FieldSet$1 -> com.google.tagmanager.a.q:
    int[] $SwitchMap$com$google$protobuf$WireFormat$JavaType -> a
    int[] $SwitchMap$com$google$protobuf$WireFormat$FieldType -> b
com.google.tagmanager.protobuf.FieldSet$FieldDescriptorLite -> com.google.tagmanager.a.r:
    com.google.tagmanager.protobuf.WireFormat$FieldType getLiteType() -> a
    com.google.tagmanager.protobuf.WireFormat$JavaType getLiteJavaType() -> b
    boolean isRepeated() -> c
    com.google.tagmanager.protobuf.MessageLite$Builder internalMergeFrom(com.google.tagmanager.protobuf.MessageLite$Builder,com.google.tagmanager.protobuf.MessageLite) -> a
    com.google.tagmanager.protobuf.MutableMessageLite internalMergeFrom$18ddb507(com.google.tagmanager.protobuf.MutableMessageLite) -> a
com.google.tagmanager.protobuf.GeneratedMessageLite -> com.google.tagmanager.a.s:
    com.google.tagmanager.protobuf.Parser getParserForType() -> b
    boolean parseUnknownField(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.CodedOutputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite,int) -> a
    void makeExtensionsImmutable() -> t
com.google.tagmanager.protobuf.GeneratedMessageLite$1 -> com.google.tagmanager.a.t:
    int[] $SwitchMap$com$google$protobuf$WireFormat$JavaType -> a
com.google.tagmanager.protobuf.GeneratedMessageLite$Builder -> com.google.tagmanager.a.u:
    com.google.tagmanager.protobuf.ByteString unknownFields -> a
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder clone() -> c
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.GeneratedMessageLite) -> a
    com.google.tagmanager.protobuf.GeneratedMessageLite getDefaultInstanceForType() -> b
    com.google.tagmanager.protobuf.ByteString getUnknownFields() -> h
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder setUnknownFields(com.google.tagmanager.protobuf.ByteString) -> a
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder clone() -> d
    com.google.tagmanager.protobuf.MessageLite getDefaultInstanceForType() -> m
    java.lang.Object clone() -> clone
com.google.tagmanager.protobuf.GeneratedMessageLite$ExtendableBuilder -> com.google.tagmanager.a.v:
    com.google.tagmanager.protobuf.FieldSet extensions -> a
    boolean extensionsIsMutable -> b
    com.google.tagmanager.protobuf.GeneratedMessageLite$ExtendableBuilder clone() -> f
    boolean extensionsAreInitialized() -> j
    void mergeExtensionFields(com.google.tagmanager.protobuf.GeneratedMessageLite$ExtendableMessage) -> a
    com.google.tagmanager.protobuf.GeneratedMessageLite$Builder clone() -> c
    com.google.tagmanager.protobuf.AbstractMessageLite$Builder clone() -> d
    java.lang.Object clone() -> clone
    com.google.tagmanager.protobuf.FieldSet access$000(com.google.tagmanager.protobuf.GeneratedMessageLite$ExtendableBuilder) -> a
com.google.tagmanager.protobuf.GeneratedMessageLite$ExtendableMessage -> com.google.tagmanager.a.w:
    com.google.tagmanager.protobuf.FieldSet extensions -> a
    boolean extensionsAreInitialized() -> s
    boolean parseUnknownField(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.CodedOutputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite,int) -> a
    void makeExtensionsImmutable() -> t
    com.google.tagmanager.protobuf.FieldSet access$200(com.google.tagmanager.protobuf.GeneratedMessageLite$ExtendableMessage) -> a
com.google.tagmanager.protobuf.GeneratedMessageLite$ExtendableMessageOrBuilder -> com.google.tagmanager.a.x:
com.google.tagmanager.protobuf.GeneratedMessageLite$ExtensionDescriptor -> com.google.tagmanager.a.y:
    com.google.tagmanager.protobuf.Internal$EnumLiteMap enumTypeMap -> a
    int number -> b
    com.google.tagmanager.protobuf.WireFormat$FieldType type -> c
    boolean isRepeated -> d
    int getNumber() -> d
    com.google.tagmanager.protobuf.WireFormat$FieldType getLiteType() -> a
    com.google.tagmanager.protobuf.WireFormat$JavaType getLiteJavaType() -> b
    boolean isRepeated() -> c
    com.google.tagmanager.protobuf.Internal$EnumLiteMap getEnumType() -> e
    com.google.tagmanager.protobuf.MessageLite$Builder internalMergeFrom(com.google.tagmanager.protobuf.MessageLite$Builder,com.google.tagmanager.protobuf.MessageLite) -> a
    com.google.tagmanager.protobuf.MutableMessageLite internalMergeFrom$18ddb507(com.google.tagmanager.protobuf.MutableMessageLite) -> a
    int compareTo(java.lang.Object) -> compareTo
com.google.tagmanager.protobuf.GeneratedMessageLite$GeneratedExtension -> com.google.tagmanager.a.z:
    com.google.tagmanager.protobuf.MessageLite messageDefaultInstance -> a
    com.google.tagmanager.protobuf.GeneratedMessageLite$ExtensionDescriptor descriptor -> b
    java.lang.Object singularToFieldSetType(java.lang.Object) -> a
com.google.tagmanager.protobuf.GeneratedMutableMessageLite -> com.google.tagmanager.a.aa:
    com.google.tagmanager.protobuf.ByteString unknownFields -> b
    com.google.tagmanager.protobuf.GeneratedMutableMessageLite mergeFrom$615f62df() -> c
com.google.tagmanager.protobuf.Internal -> com.google.tagmanager.a.ab:
    byte[] EMPTY_BYTE_ARRAY -> a
    java.nio.ByteBuffer EMPTY_BYTE_BUFFER -> b
    boolean isValidUtf8(byte[]) -> a
    java.lang.String toStringUtf8(byte[]) -> b
    int hashLong(long) -> a
    int hashBoolean(boolean) -> a
    int hashEnum(com.google.tagmanager.protobuf.Internal$EnumLite) -> a
    int hashEnumList(java.util.List) -> a
com.google.tagmanager.protobuf.Internal$EnumLite -> com.google.tagmanager.a.ac:
    int getNumber() -> a
com.google.tagmanager.protobuf.Internal$EnumLiteMap -> com.google.tagmanager.a.ad:
    com.google.tagmanager.protobuf.Internal$EnumLite findValueByNumber(int) -> a
com.google.tagmanager.protobuf.InvalidProtocolBufferException -> com.google.tagmanager.a.ae:
    com.google.tagmanager.protobuf.MessageLite unfinishedMessage -> a
    com.google.tagmanager.protobuf.InvalidProtocolBufferException setUnfinishedMessage(com.google.tagmanager.protobuf.MessageLite) -> a
    com.google.tagmanager.protobuf.MessageLite getUnfinishedMessage() -> a
    com.google.tagmanager.protobuf.InvalidProtocolBufferException truncatedMessage() -> b
    com.google.tagmanager.protobuf.InvalidProtocolBufferException negativeSize() -> c
    com.google.tagmanager.protobuf.InvalidProtocolBufferException malformedVarint() -> d
    com.google.tagmanager.protobuf.InvalidProtocolBufferException invalidTag() -> e
    com.google.tagmanager.protobuf.InvalidProtocolBufferException invalidEndTag() -> f
    com.google.tagmanager.protobuf.InvalidProtocolBufferException invalidWireType() -> g
    com.google.tagmanager.protobuf.InvalidProtocolBufferException recursionLimitExceeded() -> h
    com.google.tagmanager.protobuf.InvalidProtocolBufferException sizeLimitExceeded() -> i
com.google.tagmanager.protobuf.LazyField -> com.google.tagmanager.a.af:
    com.google.tagmanager.protobuf.MessageLite defaultInstance -> a
    com.google.tagmanager.protobuf.ExtensionRegistryLite extensionRegistry -> b
    com.google.tagmanager.protobuf.ByteString bytes -> c
    com.google.tagmanager.protobuf.MessageLite value -> d
    com.google.tagmanager.protobuf.MessageLite getValue() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void ensureInitialized() -> b
com.google.tagmanager.protobuf.LazyStringArrayList -> com.google.tagmanager.a.ag:
    com.google.tagmanager.protobuf.LazyStringList EMPTY -> a
    java.util.List list -> b
    int size() -> size
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    void clear() -> clear
    void add(com.google.tagmanager.protobuf.ByteString) -> a
    java.lang.String asString(java.lang.Object) -> a
    java.util.List getUnderlyingElements() -> a
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
com.google.tagmanager.protobuf.LazyStringList -> com.google.tagmanager.a.ah:
    void add(com.google.tagmanager.protobuf.ByteString) -> a
    java.util.List getUnderlyingElements() -> a
com.google.tagmanager.protobuf.LiteralByteString -> com.google.tagmanager.a.ai:
    byte[] bytes -> c
    int hash -> d
    byte byteAt(int) -> a
    int size() -> a
    void copyToInternal(byte[],int,int,int) -> a
    void writeToInternal(java.io.OutputStream,int,int) -> b
    java.lang.String toString(java.lang.String) -> a
    boolean isValidUtf8() -> g
    int partialIsValidUtf8(int,int,int) -> a
    boolean equals(java.lang.Object) -> equals
    boolean equalsRange(com.google.tagmanager.protobuf.LiteralByteString,int,int) -> a
    int hashCode() -> hashCode
    int peekCachedHashCode() -> l
    int partialHash(int,int,int) -> b
    com.google.tagmanager.protobuf.CodedInputStream newCodedInput() -> h
    com.google.tagmanager.protobuf.ByteString$ByteIterator iterator() -> c
    int getTreeDepth() -> j
    boolean isBalanced() -> k
    int getOffsetIntoBytes() -> b
    java.util.Iterator iterator() -> iterator
com.google.tagmanager.protobuf.LiteralByteString$LiteralByteIterator -> com.google.tagmanager.a.aj:
    int position -> b
    int limit -> c
    com.google.tagmanager.protobuf.LiteralByteString this$0 -> a
    boolean hasNext() -> hasNext
    byte nextByte() -> a
    void remove() -> remove
    java.lang.Object next() -> next
com.google.tagmanager.protobuf.MessageLite -> com.google.tagmanager.a.ak:
    com.google.tagmanager.protobuf.Parser getParserForType() -> b
    com.google.tagmanager.protobuf.MessageLite$Builder newBuilderForType() -> l
    com.google.tagmanager.protobuf.MessageLite$Builder toBuilder() -> k
com.google.tagmanager.protobuf.MessageLite$Builder -> com.google.tagmanager.a.al:
    com.google.tagmanager.protobuf.MessageLite build() -> e
    com.google.tagmanager.protobuf.MessageLite$Builder mergeFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> b
com.google.tagmanager.protobuf.MessageLiteOrBuilder -> com.google.tagmanager.a.am:
    com.google.tagmanager.protobuf.MessageLite getDefaultInstanceForType() -> m
    boolean isInitialized() -> i
com.google.tagmanager.protobuf.MutableMessageLite -> com.google.tagmanager.a.an:
com.google.tagmanager.protobuf.Parser -> com.google.tagmanager.a.ao:
    java.lang.Object parsePartialFrom(com.google.tagmanager.protobuf.CodedInputStream,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
    java.lang.Object parseFrom(com.google.tagmanager.protobuf.ByteString,com.google.tagmanager.protobuf.ExtensionRegistryLite) -> a
com.google.tagmanager.protobuf.RopeByteString -> com.google.tagmanager.a.ap:
    int[] minLengthByDepth -> c
    int totalLength -> d
    com.google.tagmanager.protobuf.ByteString left -> e
    com.google.tagmanager.protobuf.ByteString right -> f
    int leftLength -> g
    int treeDepth -> h
    int hash -> i
    com.google.tagmanager.protobuf.ByteString concatenate(com.google.tagmanager.protobuf.ByteString,com.google.tagmanager.protobuf.ByteString) -> a
    com.google.tagmanager.protobuf.LiteralByteString concatenateBytes(com.google.tagmanager.protobuf.ByteString,com.google.tagmanager.protobuf.ByteString) -> b
    int size() -> a
    int getTreeDepth() -> j
    boolean isBalanced() -> k
    void copyToInternal(byte[],int,int,int) -> a
    void writeToInternal(java.io.OutputStream,int,int) -> b
    java.lang.String toString(java.lang.String) -> a
    boolean isValidUtf8() -> g
    int partialIsValidUtf8(int,int,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int peekCachedHashCode() -> l
    int partialHash(int,int,int) -> b
    com.google.tagmanager.protobuf.CodedInputStream newCodedInput() -> h
    com.google.tagmanager.protobuf.ByteString$ByteIterator iterator() -> c
    java.util.Iterator iterator() -> iterator
    int[] access$300() -> b
    com.google.tagmanager.protobuf.ByteString access$500(com.google.tagmanager.protobuf.RopeByteString) -> a
    com.google.tagmanager.protobuf.ByteString access$600(com.google.tagmanager.protobuf.RopeByteString) -> b
com.google.tagmanager.protobuf.RopeByteString$Balancer -> com.google.tagmanager.a.aq:
    java.util.Deque prefixesStack -> a
    void doBalance(com.google.tagmanager.protobuf.ByteString) -> a
    int getDepthBinForLength(int) -> a
    com.google.tagmanager.protobuf.ByteString access$100(com.google.tagmanager.protobuf.RopeByteString$Balancer,com.google.tagmanager.protobuf.ByteString,com.google.tagmanager.protobuf.ByteString) -> a
com.google.tagmanager.protobuf.RopeByteString$PieceIterator -> com.google.tagmanager.a.ar:
    java.util.Deque breadCrumbs -> a
    com.google.tagmanager.protobuf.LiteralByteString next -> b
    com.google.tagmanager.protobuf.LiteralByteString getLeafByLeft(com.google.tagmanager.protobuf.ByteString) -> a
    com.google.tagmanager.protobuf.LiteralByteString getNextNonEmptyLeaf() -> b
    boolean hasNext() -> hasNext
    com.google.tagmanager.protobuf.LiteralByteString next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
com.google.tagmanager.protobuf.RopeByteString$RopeByteIterator -> com.google.tagmanager.a.as:
    com.google.tagmanager.protobuf.RopeByteString$PieceIterator pieces -> c
    com.google.tagmanager.protobuf.ByteString$ByteIterator bytes -> d
    int bytesRemaining -> a
    com.google.tagmanager.protobuf.RopeByteString this$0 -> b
    boolean hasNext() -> hasNext
    byte nextByte() -> a
    void remove() -> remove
    java.lang.Object next() -> next
com.google.tagmanager.protobuf.RopeByteString$RopeInputStream -> com.google.tagmanager.a.at:
    com.google.tagmanager.protobuf.RopeByteString$PieceIterator pieceIterator -> b
    com.google.tagmanager.protobuf.LiteralByteString currentPiece -> c
    int currentPieceSize -> d
    int currentPieceIndex -> e
    int currentPieceOffsetInRope -> f
    int mark -> g
    com.google.tagmanager.protobuf.RopeByteString this$0 -> a
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int readSkipInternal(byte[],int,int) -> a
    int read() -> read
    int available() -> available
    boolean markSupported() -> markSupported
    void mark(int) -> mark
    void reset() -> reset
    void initialize() -> a
    void advanceIfCurrentPieceFullyRead() -> b
com.google.tagmanager.protobuf.SmallSortedMap -> com.google.tagmanager.a.au:
    int maxArraySize -> a
    java.util.List entryList -> b
    java.util.Map overflowEntries -> c
    boolean isImmutable -> d
    com.google.tagmanager.protobuf.SmallSortedMap$EntrySet lazyEntrySet -> e
    com.google.tagmanager.protobuf.SmallSortedMap newFieldMap(int) -> a
    void makeImmutable() -> a
    boolean isImmutable() -> b
    int getNumArrayEntries() -> c
    java.util.Map$Entry getArrayEntryAt(int) -> b
    java.lang.Iterable getOverflowEntries() -> d
    int size() -> size
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Comparable,java.lang.Object) -> a
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeArrayEntryAt(int) -> c
    int binarySearchInArray(java.lang.Comparable) -> a
    java.util.Set entrySet() -> entrySet
    void checkMutable() -> e
    java.util.SortedMap getOverflowEntriesMutable() -> f
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void access$200(com.google.tagmanager.protobuf.SmallSortedMap) -> a
    java.util.List access$400(com.google.tagmanager.protobuf.SmallSortedMap) -> b
    java.lang.Object access$500(com.google.tagmanager.protobuf.SmallSortedMap,int) -> a
    java.util.Map access$600(com.google.tagmanager.protobuf.SmallSortedMap) -> c
com.google.tagmanager.protobuf.SmallSortedMap$1 -> com.google.tagmanager.a.av:
    void makeImmutable() -> a
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
com.google.tagmanager.protobuf.SmallSortedMap$EmptySet -> com.google.tagmanager.a.aw:
    java.util.Iterator ITERATOR -> a
    java.lang.Iterable ITERABLE -> b
    java.lang.Iterable iterable() -> a
    java.util.Iterator access$700() -> b
com.google.tagmanager.protobuf.SmallSortedMap$EmptySet$1 -> com.google.tagmanager.a.ax:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.google.tagmanager.protobuf.SmallSortedMap$EmptySet$2 -> com.google.tagmanager.a.ay:
    java.util.Iterator iterator() -> iterator
com.google.tagmanager.protobuf.SmallSortedMap$Entry -> com.google.tagmanager.a.az:
    java.lang.Comparable key -> b
    java.lang.Object value -> c
    com.google.tagmanager.protobuf.SmallSortedMap this$0 -> a
    java.lang.Comparable getKey() -> a
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object,java.lang.Object) -> a
    java.lang.Object getKey() -> getKey
    int compareTo(java.lang.Object) -> compareTo
com.google.tagmanager.protobuf.SmallSortedMap$EntryIterator -> com.google.tagmanager.a.ba:
    int pos -> b
    boolean nextCalledBeforeRemove -> c
    java.util.Iterator lazyOverflowIterator -> d
    com.google.tagmanager.protobuf.SmallSortedMap this$0 -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.util.Iterator getOverflowIterator() -> a
    java.lang.Object next() -> next
com.google.tagmanager.protobuf.SmallSortedMap$EntrySet -> com.google.tagmanager.a.bb:
    com.google.tagmanager.protobuf.SmallSortedMap this$0 -> a
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
    boolean add(java.lang.Object) -> add
com.google.tagmanager.protobuf.UninitializedMessageException -> com.google.tagmanager.a.bc:
    java.util.List missingFields -> a
    com.google.tagmanager.protobuf.InvalidProtocolBufferException asInvalidProtocolBufferException() -> a
com.google.tagmanager.protobuf.UnmodifiableLazyStringList -> com.google.tagmanager.a.bd:
    com.google.tagmanager.protobuf.LazyStringList list -> a
    int size() -> size
    void add(com.google.tagmanager.protobuf.ByteString) -> a
    java.util.ListIterator listIterator(int) -> listIterator
    java.util.Iterator iterator() -> iterator
    java.util.List getUnderlyingElements() -> a
    java.lang.Object get(int) -> get
    com.google.tagmanager.protobuf.LazyStringList access$000(com.google.tagmanager.protobuf.UnmodifiableLazyStringList) -> a
com.google.tagmanager.protobuf.UnmodifiableLazyStringList$1 -> com.google.tagmanager.a.be:
    java.util.ListIterator iter -> a
    int val$index -> b
    com.google.tagmanager.protobuf.UnmodifiableLazyStringList this$0 -> c
    boolean hasNext() -> hasNext
    boolean hasPrevious() -> hasPrevious
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void remove() -> remove
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    java.lang.Object previous() -> previous
    java.lang.Object next() -> next
com.google.tagmanager.protobuf.UnmodifiableLazyStringList$2 -> com.google.tagmanager.a.bf:
    java.util.Iterator iter -> a
    com.google.tagmanager.protobuf.UnmodifiableLazyStringList this$0 -> b
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
com.google.tagmanager.protobuf.Utf8 -> com.google.tagmanager.a.bg:
    boolean isValidUtf8(byte[],int,int) -> a
    int partialIsValidUtf8(int,byte[],int,int) -> a
    int partialIsValidUtf8(byte[],int,int) -> b
    int incompleteStateFor(int,int) -> a
    int incompleteStateFor(int,int,int) -> a
    int incompleteStateFor(byte[],int,int) -> c
com.google.tagmanager.protobuf.WireFormat -> com.google.tagmanager.a.bh:
    int MESSAGE_SET_ITEM_TAG -> a
    int MESSAGE_SET_ITEM_END_TAG -> b
    int MESSAGE_SET_TYPE_ID_TAG -> c
    int MESSAGE_SET_MESSAGE_TAG -> d
    int getTagWireType(int) -> a
    int getTagFieldNumber(int) -> b
    int makeTag$255f288(int) -> c
com.google.tagmanager.protobuf.WireFormat$FieldType -> com.google.tagmanager.a.bi:
    com.google.tagmanager.protobuf.WireFormat$FieldType DOUBLE -> a
    com.google.tagmanager.protobuf.WireFormat$FieldType FLOAT -> b
    com.google.tagmanager.protobuf.WireFormat$FieldType INT64 -> c
    com.google.tagmanager.protobuf.WireFormat$FieldType UINT64 -> d
    com.google.tagmanager.protobuf.WireFormat$FieldType INT32 -> e
    com.google.tagmanager.protobuf.WireFormat$FieldType FIXED64 -> f
    com.google.tagmanager.protobuf.WireFormat$FieldType FIXED32 -> g
    com.google.tagmanager.protobuf.WireFormat$FieldType BOOL -> h
    com.google.tagmanager.protobuf.WireFormat$FieldType STRING -> i
    com.google.tagmanager.protobuf.WireFormat$FieldType GROUP -> j
    com.google.tagmanager.protobuf.WireFormat$FieldType MESSAGE -> k
    com.google.tagmanager.protobuf.WireFormat$FieldType BYTES -> l
    com.google.tagmanager.protobuf.WireFormat$FieldType UINT32 -> m
    com.google.tagmanager.protobuf.WireFormat$FieldType ENUM -> n
    com.google.tagmanager.protobuf.WireFormat$FieldType SFIXED32 -> o
    com.google.tagmanager.protobuf.WireFormat$FieldType SFIXED64 -> p
    com.google.tagmanager.protobuf.WireFormat$FieldType SINT32 -> q
    com.google.tagmanager.protobuf.WireFormat$FieldType SINT64 -> r
    com.google.tagmanager.protobuf.WireFormat$JavaType javaType -> s
    int wireType -> t
    com.google.tagmanager.protobuf.WireFormat$FieldType[] $VALUES -> u
    com.google.tagmanager.protobuf.WireFormat$FieldType[] values() -> values
    com.google.tagmanager.protobuf.WireFormat$FieldType valueOf(java.lang.String) -> valueOf
    com.google.tagmanager.protobuf.WireFormat$JavaType getJavaType() -> a
    int getWireType() -> b
    boolean isPackable() -> c
com.google.tagmanager.protobuf.WireFormat$FieldType$1 -> com.google.tagmanager.a.bj:
    boolean isPackable() -> c
com.google.tagmanager.protobuf.WireFormat$FieldType$2 -> com.google.tagmanager.a.bk:
    boolean isPackable() -> c
com.google.tagmanager.protobuf.WireFormat$FieldType$3 -> com.google.tagmanager.a.bl:
    boolean isPackable() -> c
com.google.tagmanager.protobuf.WireFormat$FieldType$4 -> com.google.tagmanager.a.bm:
    boolean isPackable() -> c
com.google.tagmanager.protobuf.WireFormat$JavaType -> com.google.tagmanager.a.bn:
    com.google.tagmanager.protobuf.WireFormat$JavaType INT -> a
    com.google.tagmanager.protobuf.WireFormat$JavaType LONG -> b
    com.google.tagmanager.protobuf.WireFormat$JavaType FLOAT -> c
    com.google.tagmanager.protobuf.WireFormat$JavaType DOUBLE -> d
    com.google.tagmanager.protobuf.WireFormat$JavaType BOOLEAN -> e
    com.google.tagmanager.protobuf.WireFormat$JavaType STRING -> f
    com.google.tagmanager.protobuf.WireFormat$JavaType BYTE_STRING -> g
    com.google.tagmanager.protobuf.WireFormat$JavaType ENUM -> h
    com.google.tagmanager.protobuf.WireFormat$JavaType MESSAGE -> i
    java.lang.Object defaultDefault -> j
    com.google.tagmanager.protobuf.WireFormat$JavaType[] $VALUES -> k
    com.google.tagmanager.protobuf.WireFormat$JavaType[] values() -> values
    com.google.tagmanager.protobuf.WireFormat$JavaType valueOf(java.lang.String) -> valueOf
oauth.signpost.AbstractOAuthConsumer -> oauth.signpost.AbstractOAuthConsumer:
    long serialVersionUID -> serialVersionUID
    java.lang.String consumerKey -> consumerKey
    java.lang.String consumerSecret -> consumerSecret
    java.lang.String token -> token
    oauth.signpost.signature.OAuthMessageSigner messageSigner -> messageSigner
    oauth.signpost.signature.SigningStrategy signingStrategy -> signingStrategy
    oauth.signpost.http.HttpParameters additionalParameters -> additionalParameters
    oauth.signpost.http.HttpParameters requestParameters -> requestParameters
    boolean sendEmptyTokens -> sendEmptyTokens
    void setMessageSigner(oauth.signpost.signature.OAuthMessageSigner) -> setMessageSigner
    void setSigningStrategy(oauth.signpost.signature.SigningStrategy) -> setSigningStrategy
    void setAdditionalParameters(oauth.signpost.http.HttpParameters) -> setAdditionalParameters
    oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest) -> sign
    oauth.signpost.http.HttpRequest sign(java.lang.Object) -> sign
    java.lang.String sign(java.lang.String) -> sign
    oauth.signpost.http.HttpRequest wrap(java.lang.Object) -> wrap
    void setTokenWithSecret(java.lang.String,java.lang.String) -> setTokenWithSecret
    java.lang.String getToken() -> getToken
    java.lang.String getTokenSecret() -> getTokenSecret
    java.lang.String getConsumerKey() -> getConsumerKey
    java.lang.String getConsumerSecret() -> getConsumerSecret
    void completeOAuthParameters(oauth.signpost.http.HttpParameters) -> completeOAuthParameters
    oauth.signpost.http.HttpParameters getRequestParameters() -> getRequestParameters
    void setSendEmptyTokens(boolean) -> setSendEmptyTokens
    void collectHeaderParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters) -> collectHeaderParameters
    void collectBodyParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters) -> collectBodyParameters
    void collectQueryParameters(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters) -> collectQueryParameters
    java.lang.String generateTimestamp() -> generateTimestamp
    java.lang.String generateNonce() -> generateNonce
oauth.signpost.AbstractOAuthProvider -> oauth.signpost.AbstractOAuthProvider:
    long serialVersionUID -> serialVersionUID
    java.lang.String requestTokenEndpointUrl -> requestTokenEndpointUrl
    java.lang.String accessTokenEndpointUrl -> accessTokenEndpointUrl
    java.lang.String authorizationWebsiteUrl -> authorizationWebsiteUrl
    oauth.signpost.http.HttpParameters responseParameters -> responseParameters
    java.util.Map defaultHeaders -> defaultHeaders
    boolean isOAuth10a -> isOAuth10a
    oauth.signpost.OAuthProviderListener listener -> listener
    java.lang.String retrieveRequestToken(oauth.signpost.OAuthConsumer,java.lang.String) -> retrieveRequestToken
    void retrieveAccessToken(oauth.signpost.OAuthConsumer,java.lang.String) -> retrieveAccessToken
    void retrieveToken(oauth.signpost.OAuthConsumer,java.lang.String,java.lang.String[]) -> retrieveToken
    void handleUnexpectedResponse(int,oauth.signpost.http.HttpResponse) -> handleUnexpectedResponse
    oauth.signpost.http.HttpRequest createRequest(java.lang.String) -> createRequest
    oauth.signpost.http.HttpResponse sendRequest(oauth.signpost.http.HttpRequest) -> sendRequest
    void closeConnection(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpResponse) -> closeConnection
    oauth.signpost.http.HttpParameters getResponseParameters() -> getResponseParameters
    java.lang.String getResponseParameter(java.lang.String) -> getResponseParameter
    void setResponseParameters(oauth.signpost.http.HttpParameters) -> setResponseParameters
    void setOAuth10a(boolean) -> setOAuth10a
    boolean isOAuth10a() -> isOAuth10a
    java.lang.String getRequestTokenEndpointUrl() -> getRequestTokenEndpointUrl
    java.lang.String getAccessTokenEndpointUrl() -> getAccessTokenEndpointUrl
    java.lang.String getAuthorizationWebsiteUrl() -> getAuthorizationWebsiteUrl
    void setRequestHeader(java.lang.String,java.lang.String) -> setRequestHeader
    java.util.Map getRequestHeaders() -> getRequestHeaders
    void setListener(oauth.signpost.OAuthProviderListener) -> setListener
    void removeListener(oauth.signpost.OAuthProviderListener) -> removeListener
oauth.signpost.OAuth -> oauth.signpost.OAuth:
    java.lang.String VERSION_1_0 -> VERSION_1_0
    java.lang.String ENCODING -> ENCODING
    java.lang.String FORM_ENCODED -> FORM_ENCODED
    java.lang.String HTTP_AUTHORIZATION_HEADER -> HTTP_AUTHORIZATION_HEADER
    java.lang.String OAUTH_CONSUMER_KEY -> OAUTH_CONSUMER_KEY
    java.lang.String OAUTH_TOKEN -> OAUTH_TOKEN
    java.lang.String OAUTH_TOKEN_SECRET -> OAUTH_TOKEN_SECRET
    java.lang.String OAUTH_SIGNATURE_METHOD -> OAUTH_SIGNATURE_METHOD
    java.lang.String OAUTH_SIGNATURE -> OAUTH_SIGNATURE
    java.lang.String OAUTH_TIMESTAMP -> OAUTH_TIMESTAMP
    java.lang.String OAUTH_NONCE -> OAUTH_NONCE
    java.lang.String OAUTH_VERSION -> OAUTH_VERSION
    java.lang.String OAUTH_CALLBACK -> OAUTH_CALLBACK
    java.lang.String OAUTH_CALLBACK_CONFIRMED -> OAUTH_CALLBACK_CONFIRMED
    java.lang.String OAUTH_VERIFIER -> OAUTH_VERIFIER
    java.lang.String OUT_OF_BAND -> OUT_OF_BAND
    com.google.gdata.util.common.base.PercentEscaper percentEncoder -> percentEncoder
    java.lang.String percentEncode(java.lang.String) -> percentEncode
    java.lang.String percentDecode(java.lang.String) -> percentDecode
    void formEncode(java.util.Collection,java.io.OutputStream) -> formEncode
    java.lang.String formEncode(java.util.Collection) -> formEncode
    oauth.signpost.http.HttpParameters decodeForm(java.lang.String) -> decodeForm
    oauth.signpost.http.HttpParameters decodeForm(java.io.InputStream) -> decodeForm
    java.util.Map toMap(java.util.Collection) -> toMap
    java.lang.String safeToString(java.lang.Object) -> safeToString
    boolean isEmpty(java.lang.String) -> isEmpty
    java.lang.String addQueryParameters(java.lang.String,java.lang.String[]) -> addQueryParameters
    java.lang.String addQueryParameters(java.lang.String,java.util.Map) -> addQueryParameters
    java.lang.String prepareOAuthHeader(java.lang.String[]) -> prepareOAuthHeader
    oauth.signpost.http.HttpParameters oauthHeaderToParamsMap(java.lang.String) -> oauthHeaderToParamsMap
    java.lang.String toHeaderElement(java.lang.String,java.lang.String) -> toHeaderElement
    void debugOut(java.lang.String,java.lang.String) -> debugOut
oauth.signpost.OAuthConsumer -> oauth.signpost.OAuthConsumer:
    void setMessageSigner(oauth.signpost.signature.OAuthMessageSigner) -> setMessageSigner
    void setAdditionalParameters(oauth.signpost.http.HttpParameters) -> setAdditionalParameters
    void setSigningStrategy(oauth.signpost.signature.SigningStrategy) -> setSigningStrategy
    void setSendEmptyTokens(boolean) -> setSendEmptyTokens
    oauth.signpost.http.HttpRequest sign(oauth.signpost.http.HttpRequest) -> sign
    oauth.signpost.http.HttpRequest sign(java.lang.Object) -> sign
    java.lang.String sign(java.lang.String) -> sign
    void setTokenWithSecret(java.lang.String,java.lang.String) -> setTokenWithSecret
    java.lang.String getToken() -> getToken
    java.lang.String getTokenSecret() -> getTokenSecret
    java.lang.String getConsumerKey() -> getConsumerKey
    java.lang.String getConsumerSecret() -> getConsumerSecret
    oauth.signpost.http.HttpParameters getRequestParameters() -> getRequestParameters
oauth.signpost.OAuthProvider -> oauth.signpost.OAuthProvider:
    java.lang.String retrieveRequestToken(oauth.signpost.OAuthConsumer,java.lang.String) -> retrieveRequestToken
    void retrieveAccessToken(oauth.signpost.OAuthConsumer,java.lang.String) -> retrieveAccessToken
    oauth.signpost.http.HttpParameters getResponseParameters() -> getResponseParameters
    void setResponseParameters(oauth.signpost.http.HttpParameters) -> setResponseParameters
    void setRequestHeader(java.lang.String,java.lang.String) -> setRequestHeader
    java.util.Map getRequestHeaders() -> getRequestHeaders
    void setOAuth10a(boolean) -> setOAuth10a
    boolean isOAuth10a() -> isOAuth10a
    java.lang.String getRequestTokenEndpointUrl() -> getRequestTokenEndpointUrl
    java.lang.String getAccessTokenEndpointUrl() -> getAccessTokenEndpointUrl
    java.lang.String getAuthorizationWebsiteUrl() -> getAuthorizationWebsiteUrl
    void setListener(oauth.signpost.OAuthProviderListener) -> setListener
    void removeListener(oauth.signpost.OAuthProviderListener) -> removeListener
oauth.signpost.OAuthProviderListener -> oauth.signpost.OAuthProviderListener:
    void prepareRequest(oauth.signpost.http.HttpRequest) -> prepareRequest
    void prepareSubmission(oauth.signpost.http.HttpRequest) -> prepareSubmission
    boolean onResponseReceived(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpResponse) -> onResponseReceived
oauth.signpost.basic.DefaultOAuthConsumer -> oauth.signpost.basic.DefaultOAuthConsumer:
    long serialVersionUID -> serialVersionUID
    oauth.signpost.http.HttpRequest wrap(java.lang.Object) -> wrap
oauth.signpost.basic.DefaultOAuthProvider -> oauth.signpost.basic.DefaultOAuthProvider:
    long serialVersionUID -> serialVersionUID
    oauth.signpost.http.HttpRequest createRequest(java.lang.String) -> createRequest
    oauth.signpost.http.HttpResponse sendRequest(oauth.signpost.http.HttpRequest) -> sendRequest
    void closeConnection(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpResponse) -> closeConnection
oauth.signpost.basic.HttpURLConnectionRequestAdapter -> oauth.signpost.basic.HttpURLConnectionRequestAdapter:
    java.net.HttpURLConnection connection -> connection
    java.lang.String getMethod() -> getMethod
    java.lang.String getRequestUrl() -> getRequestUrl
    void setRequestUrl(java.lang.String) -> setRequestUrl
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    java.lang.String getHeader(java.lang.String) -> getHeader
    java.util.Map getAllHeaders() -> getAllHeaders
    java.io.InputStream getMessagePayload() -> getMessagePayload
    java.lang.String getContentType() -> getContentType
    java.net.HttpURLConnection unwrap() -> unwrap
    java.lang.Object unwrap() -> unwrap
oauth.signpost.basic.HttpURLConnectionResponseAdapter -> oauth.signpost.basic.HttpURLConnectionResponseAdapter:
    java.net.HttpURLConnection connection -> connection
    java.io.InputStream getContent() -> getContent
    int getStatusCode() -> getStatusCode
    java.lang.String getReasonPhrase() -> getReasonPhrase
    java.lang.Object unwrap() -> unwrap
oauth.signpost.basic.UrlStringRequestAdapter -> oauth.signpost.basic.UrlStringRequestAdapter:
    java.lang.String url -> url
    java.lang.String getMethod() -> getMethod
    java.lang.String getRequestUrl() -> getRequestUrl
    void setRequestUrl(java.lang.String) -> setRequestUrl
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    java.lang.String getHeader(java.lang.String) -> getHeader
    java.util.Map getAllHeaders() -> getAllHeaders
    java.io.InputStream getMessagePayload() -> getMessagePayload
    java.lang.String getContentType() -> getContentType
    java.lang.Object unwrap() -> unwrap
oauth.signpost.commonshttp.CommonsHttpOAuthConsumer -> oauth.signpost.commonshttp.CommonsHttpOAuthConsumer:
    long serialVersionUID -> serialVersionUID
    oauth.signpost.http.HttpRequest wrap(java.lang.Object) -> wrap
oauth.signpost.commonshttp.CommonsHttpOAuthProvider -> oauth.signpost.commonshttp.CommonsHttpOAuthProvider:
    long serialVersionUID -> serialVersionUID
    org.apache.http.client.HttpClient httpClient -> httpClient
    void setHttpClient(org.apache.http.client.HttpClient) -> setHttpClient
    oauth.signpost.http.HttpRequest createRequest(java.lang.String) -> createRequest
    oauth.signpost.http.HttpResponse sendRequest(oauth.signpost.http.HttpRequest) -> sendRequest
    void closeConnection(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpResponse) -> closeConnection
oauth.signpost.commonshttp.HttpRequestAdapter -> oauth.signpost.commonshttp.HttpRequestAdapter:
    org.apache.http.client.methods.HttpUriRequest request -> request
    org.apache.http.HttpEntity entity -> entity
    java.lang.String getMethod() -> getMethod
    java.lang.String getRequestUrl() -> getRequestUrl
    void setRequestUrl(java.lang.String) -> setRequestUrl
    java.lang.String getHeader(java.lang.String) -> getHeader
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    java.util.Map getAllHeaders() -> getAllHeaders
    java.lang.String getContentType() -> getContentType
    java.io.InputStream getMessagePayload() -> getMessagePayload
    java.lang.Object unwrap() -> unwrap
oauth.signpost.commonshttp.HttpResponseAdapter -> oauth.signpost.commonshttp.HttpResponseAdapter:
    org.apache.http.HttpResponse response -> response
    java.io.InputStream getContent() -> getContent
    int getStatusCode() -> getStatusCode
    java.lang.String getReasonPhrase() -> getReasonPhrase
    java.lang.Object unwrap() -> unwrap
oauth.signpost.exception.OAuthCommunicationException -> oauth.signpost.exception.OAuthCommunicationException:
    java.lang.String responseBody -> responseBody
    java.lang.String getResponseBody() -> getResponseBody
oauth.signpost.exception.OAuthException -> oauth.signpost.exception.OAuthException:
oauth.signpost.exception.OAuthExpectationFailedException -> oauth.signpost.exception.OAuthExpectationFailedException:
oauth.signpost.exception.OAuthMessageSignerException -> oauth.signpost.exception.OAuthMessageSignerException:
oauth.signpost.exception.OAuthNotAuthorizedException -> oauth.signpost.exception.OAuthNotAuthorizedException:
    java.lang.String ERROR -> ERROR
    java.lang.String responseBody -> responseBody
    java.lang.String getResponseBody() -> getResponseBody
oauth.signpost.http.HttpParameters -> oauth.signpost.http.HttpParameters:
    java.util.TreeMap wrappedMap -> wrappedMap
    java.util.SortedSet put(java.lang.String,java.util.SortedSet) -> put
    java.util.SortedSet put(java.lang.String,java.util.SortedSet,boolean) -> put
    java.lang.String put(java.lang.String,java.lang.String) -> put
    java.lang.String put(java.lang.String,java.lang.String,boolean) -> put
    java.lang.String putNull(java.lang.String,java.lang.String) -> putNull
    void putAll(java.util.Map) -> putAll
    void putAll(java.util.Map,boolean) -> putAll
    void putAll(java.lang.String[],boolean) -> putAll
    void putMap(java.util.Map) -> putMap
    java.util.SortedSet get(java.lang.Object) -> get
    java.lang.String getFirst(java.lang.Object) -> getFirst
    java.lang.String getFirst(java.lang.Object,boolean) -> getFirst
    java.lang.String getAsQueryString(java.lang.Object) -> getAsQueryString
    java.lang.String getAsHeaderElement(java.lang.String) -> getAsHeaderElement
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
    java.util.SortedSet remove(java.lang.Object) -> remove
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
oauth.signpost.http.HttpRequest -> oauth.signpost.http.HttpRequest:
    java.lang.String getMethod() -> getMethod
    java.lang.String getRequestUrl() -> getRequestUrl
    void setRequestUrl(java.lang.String) -> setRequestUrl
    void setHeader(java.lang.String,java.lang.String) -> setHeader
    java.lang.String getHeader(java.lang.String) -> getHeader
    java.util.Map getAllHeaders() -> getAllHeaders
    java.io.InputStream getMessagePayload() -> getMessagePayload
    java.lang.String getContentType() -> getContentType
    java.lang.Object unwrap() -> unwrap
oauth.signpost.http.HttpResponse -> oauth.signpost.http.HttpResponse:
    int getStatusCode() -> getStatusCode
    java.lang.String getReasonPhrase() -> getReasonPhrase
    java.io.InputStream getContent() -> getContent
    java.lang.Object unwrap() -> unwrap
oauth.signpost.signature.AuthorizationHeaderSigningStrategy -> oauth.signpost.signature.AuthorizationHeaderSigningStrategy:
    long serialVersionUID -> serialVersionUID
    java.lang.String writeSignature(java.lang.String,oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters) -> writeSignature
oauth.signpost.signature.HmacSha1MessageSigner -> oauth.signpost.signature.HmacSha1MessageSigner:
    java.lang.String MAC_NAME -> MAC_NAME
    java.lang.String getSignatureMethod() -> getSignatureMethod
    java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters) -> sign
oauth.signpost.signature.OAuthMessageSigner -> oauth.signpost.signature.OAuthMessageSigner:
    long serialVersionUID -> serialVersionUID
    org.apache.commons.codec.binary.Base64 base64 -> base64
    java.lang.String consumerSecret -> consumerSecret
    java.lang.String tokenSecret -> tokenSecret
    java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters) -> sign
    java.lang.String getSignatureMethod() -> getSignatureMethod
    java.lang.String getConsumerSecret() -> getConsumerSecret
    java.lang.String getTokenSecret() -> getTokenSecret
    void setConsumerSecret(java.lang.String) -> setConsumerSecret
    void setTokenSecret(java.lang.String) -> setTokenSecret
    byte[] decodeBase64(java.lang.String) -> decodeBase64
    java.lang.String base64Encode(byte[]) -> base64Encode
    void readObject(java.io.ObjectInputStream) -> readObject
oauth.signpost.signature.PlainTextMessageSigner -> oauth.signpost.signature.PlainTextMessageSigner:
    java.lang.String getSignatureMethod() -> getSignatureMethod
    java.lang.String sign(oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters) -> sign
oauth.signpost.signature.QueryStringSigningStrategy -> oauth.signpost.signature.QueryStringSigningStrategy:
    long serialVersionUID -> serialVersionUID
    java.lang.String writeSignature(java.lang.String,oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters) -> writeSignature
oauth.signpost.signature.SignatureBaseString -> oauth.signpost.signature.SignatureBaseString:
    oauth.signpost.http.HttpRequest request -> request
    oauth.signpost.http.HttpParameters requestParameters -> requestParameters
    java.lang.String generate() -> generate
    java.lang.String normalizeRequestUrl() -> normalizeRequestUrl
    java.lang.String normalizeRequestParameters() -> normalizeRequestParameters
oauth.signpost.signature.SigningStrategy -> oauth.signpost.signature.SigningStrategy:
    java.lang.String writeSignature(java.lang.String,oauth.signpost.http.HttpRequest,oauth.signpost.http.HttpParameters) -> writeSignature
twitter4j.AbstractStreamImplementation -> twitter4j.AbstractStreamImplementation:
    twitter4j.internal.logging.Logger logger -> logger
    boolean streamAlive -> streamAlive
    java.io.BufferedReader br -> br
    java.io.InputStream is -> is
    twitter4j.internal.http.HttpResponse response -> response
    twitter4j.internal.async.Dispatcher dispatcher -> dispatcher
    java.lang.Class class$twitter4j$StatusStreamImpl -> class$twitter4j$StatusStreamImpl
    java.lang.String parseLine(java.lang.String) -> parseLine
    void next(twitter4j.StreamListener[]) -> next
    void handleNextElement() -> handleNextElement
    void onSender(twitter4j.internal.org.json.JSONObject) -> onSender
    void onStatus(twitter4j.internal.org.json.JSONObject) -> onStatus
    void onDirectMessage(twitter4j.internal.org.json.JSONObject) -> onDirectMessage
    void onDelete(twitter4j.internal.org.json.JSONObject) -> onDelete
    void onLimit(twitter4j.internal.org.json.JSONObject) -> onLimit
    void onScrubGeo(twitter4j.internal.org.json.JSONObject) -> onScrubGeo
    void onFriends(twitter4j.internal.org.json.JSONObject) -> onFriends
    void onFavorite(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onFavorite
    void onUnfavorite(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUnfavorite
    void onRetweet(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onRetweet
    void onFollow(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onFollow
    void onUserListSubscribed(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserListSubscribed
    void onUserListCreated(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserListCreated
    void onUserListUpdated(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserListUpdated
    void onUserListDestroyed(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserListDestroyed
    void onUserUpdate(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserUpdate
    void onBlock(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onBlock
    void onUnblock(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUnblock
    void onException(java.lang.Exception) -> onException
    void close() -> close
    twitter4j.Status asStatus(twitter4j.internal.org.json.JSONObject) -> asStatus
    twitter4j.DirectMessage asDirectMessage(twitter4j.internal.org.json.JSONObject) -> asDirectMessage
    int[] asFriendList(twitter4j.internal.org.json.JSONObject) -> asFriendList
    twitter4j.User asUser(twitter4j.internal.org.json.JSONObject) -> asUser
    twitter4j.UserList asUserList(twitter4j.internal.org.json.JSONObject) -> asUserList
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.AbstractStreamImplementation$1 -> twitter4j.AbstractStreamImplementation$1:
    twitter4j.AbstractStreamImplementation this$0 -> this$0
    void run() -> run
twitter4j.AbstractStreamImplementation$StreamEvent -> twitter4j.AbstractStreamImplementation$StreamEvent:
    java.lang.String line -> line
    twitter4j.AbstractStreamImplementation this$0 -> this$0
twitter4j.AccountSettings -> twitter4j.AccountSettings:
    boolean isSleepTimeEnabled() -> isSleepTimeEnabled
    java.lang.String getSleepStartTime() -> getSleepStartTime
    java.lang.String getSleepEndTime() -> getSleepEndTime
    twitter4j.Location[] getTrendLocations() -> getTrendLocations
    boolean isGeoEnabled() -> isGeoEnabled
twitter4j.AccountSettingsJSONImpl -> twitter4j.AccountSettingsJSONImpl:
    long serialVersionUID -> serialVersionUID
    boolean SLEEP_TIME_ENABLED -> SLEEP_TIME_ENABLED
    java.lang.String SLEEP_START_TIME -> SLEEP_START_TIME
    java.lang.String SLEEP_END_TIME -> SLEEP_END_TIME
    twitter4j.Location[] TREND_LOCATION -> TREND_LOCATION
    boolean GEO_ENABLED -> GEO_ENABLED
    boolean isSleepTimeEnabled() -> isSleepTimeEnabled
    java.lang.String getSleepStartTime() -> getSleepStartTime
    java.lang.String getSleepEndTime() -> getSleepEndTime
    twitter4j.Location[] getTrendLocations() -> getTrendLocations
    boolean isGeoEnabled() -> isGeoEnabled
twitter4j.AccountTotals -> twitter4j.AccountTotals:
    int getUpdates() -> getUpdates
    int getFollowers() -> getFollowers
    int getFavorites() -> getFavorites
    int getFriends() -> getFriends
twitter4j.AccountTotalsJSONImpl -> twitter4j.AccountTotalsJSONImpl:
    long serialVersionUID -> serialVersionUID
    int updates -> updates
    int followers -> followers
    int favorites -> favorites
    int friends -> friends
    int getUpdates() -> getUpdates
    int getFollowers() -> getFollowers
    int getFavorites() -> getFavorites
    int getFriends() -> getFriends
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.Annotation -> twitter4j.Annotation:
    long serialVersionUID -> serialVersionUID
    java.lang.String type -> type
    java.util.Map attributes -> attributes
    java.lang.String getType() -> getType
    void setType(java.lang.String) -> setType
    twitter4j.Annotation type(java.lang.String) -> type
    java.util.Map getAttributes() -> getAttributes
    void setAttributes(java.util.Map) -> setAttributes
    twitter4j.Annotation attributes(java.util.Map) -> attributes
    void addAttribute(java.lang.String,java.lang.String) -> addAttribute
    twitter4j.Annotation attribute(java.lang.String,java.lang.String) -> attribute
    boolean isEmpty() -> isEmpty
    java.lang.Integer size() -> size
    java.lang.String asParameterValue() -> asParameterValue
    twitter4j.internal.org.json.JSONObject asJSONObject() -> asJSONObject
    int compareTo(twitter4j.Annotation) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.SortedSet sortedNames() -> sortedNames
    int compareTo(java.lang.Object) -> compareTo
twitter4j.Annotations -> twitter4j.Annotations:
    long serialVersionUID -> serialVersionUID
    int lengthLimit -> lengthLimit
    java.util.List annotations -> annotations
    java.util.List getAnnotations() -> getAnnotations
    void setAnnotations(java.util.List) -> setAnnotations
    void addAnnotation(twitter4j.Annotation) -> addAnnotation
    twitter4j.Annotations annotation(twitter4j.Annotation) -> annotation
    boolean isEmpty() -> isEmpty
    java.lang.Integer size() -> size
    boolean isExceedingLengthLimit(twitter4j.Annotations) -> isExceedingLengthLimit
    boolean isExceedingLengthLimit() -> isExceedingLengthLimit
    java.lang.String asParameterValue() -> asParameterValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.util.List getSortedAnnotations() -> getSortedAnnotations
twitter4j.AsyncTwitter -> twitter4j.AsyncTwitter:
    long serialVersionUID -> serialVersionUID
    twitter4j.Twitter twitter -> twitter
    twitter4j.TwitterListener listener -> listener
    twitter4j.internal.async.Dispatcher dispatcher -> dispatcher
    boolean shutdown -> shutdown
    java.lang.Class class$twitter4j$AsyncTwitter -> class$twitter4j$AsyncTwitter
    java.lang.String getScreenName() -> getScreenName
    int getId() -> getId
    void search(twitter4j.Query) -> search
    void getTrends() -> getTrends
    void getCurrentTrends() -> getCurrentTrends
    void getCurrentTrends(boolean) -> getCurrentTrends
    void getDailyTrends() -> getDailyTrends
    void getDailyTrends(java.util.Date,boolean) -> getDailyTrends
    void getWeeklyTrends() -> getWeeklyTrends
    void getWeeklyTrends(java.util.Date,boolean) -> getWeeklyTrends
    void getPublicTimeline() -> getPublicTimeline
    void getHomeTimeline() -> getHomeTimeline
    void getHomeTimeline(twitter4j.Paging) -> getHomeTimeline
    void getFriendsTimeline() -> getFriendsTimeline
    void getFriendsTimeline(twitter4j.Paging) -> getFriendsTimeline
    void getUserTimeline(java.lang.String,twitter4j.Paging) -> getUserTimeline
    void getUserTimeline(int,twitter4j.Paging) -> getUserTimeline
    void getUserTimeline(twitter4j.Paging) -> getUserTimeline
    void getUserTimeline(java.lang.String) -> getUserTimeline
    void getUserTimeline(int) -> getUserTimeline
    void getUserTimeline() -> getUserTimeline
    void getMentions() -> getMentions
    void getMentions(twitter4j.Paging) -> getMentions
    void getRetweetedByMe() -> getRetweetedByMe
    void getRetweetedByMe(twitter4j.Paging) -> getRetweetedByMe
    void getRetweetedToMe() -> getRetweetedToMe
    void getRetweetedToMe(twitter4j.Paging) -> getRetweetedToMe
    void getRetweetsOfMe() -> getRetweetsOfMe
    void getRetweetsOfMe(twitter4j.Paging) -> getRetweetsOfMe
    void getRetweetedByUser(java.lang.String,twitter4j.Paging) -> getRetweetedByUser
    void getRetweetedByUser(int,twitter4j.Paging) -> getRetweetedByUser
    void getRetweetedToUser(java.lang.String,twitter4j.Paging) -> getRetweetedToUser
    void getRetweetedToUser(int,twitter4j.Paging) -> getRetweetedToUser
    void showStatus(long) -> showStatus
    void updateStatus(java.lang.String) -> updateStatus
    void updateStatus(java.lang.String,twitter4j.GeoLocation) -> updateStatus
    void updateStatus(java.lang.String,long) -> updateStatus
    void updateStatus(java.lang.String,long,twitter4j.GeoLocation) -> updateStatus
    void updateStatus(twitter4j.StatusUpdate) -> updateStatus
    void destroyStatus(long) -> destroyStatus
    void retweetStatus(long) -> retweetStatus
    void getRetweets(long) -> getRetweets
    void getRetweetedBy(long) -> getRetweetedBy
    void getRetweetedBy(long,twitter4j.Paging) -> getRetweetedBy
    void getRetweetedByIDs(long) -> getRetweetedByIDs
    void getRetweetedByIDs(long,twitter4j.Paging) -> getRetweetedByIDs
    void showUser(java.lang.String) -> showUser
    void showUser(int) -> showUser
    void lookupUsers(java.lang.String[]) -> lookupUsers
    void lookupUsers(int[]) -> lookupUsers
    void searchUsers(java.lang.String,int) -> searchUsers
    void getSuggestedUserCategories() -> getSuggestedUserCategories
    void getUserSuggestions(java.lang.String) -> getUserSuggestions
    void getMemberSuggestions(java.lang.String) -> getMemberSuggestions
    void getProfileImage(java.lang.String,twitter4j.ProfileImage$ImageSize) -> getProfileImage
    void getAccountTotals() -> getAccountTotals
    void getAccountSettings() -> getAccountSettings
    void getFriendsStatuses() -> getFriendsStatuses
    void getFriendsStatuses(long) -> getFriendsStatuses
    void getFriendsStatuses(java.lang.String) -> getFriendsStatuses
    void getFriendsStatuses(int) -> getFriendsStatuses
    void getFriendsStatuses(java.lang.String,long) -> getFriendsStatuses
    void getFriendsStatuses(int,long) -> getFriendsStatuses
    void getFollowersStatuses() -> getFollowersStatuses
    void getFollowersStatuses(long) -> getFollowersStatuses
    void getFollowersStatuses(java.lang.String) -> getFollowersStatuses
    void getFollowersStatuses(int) -> getFollowersStatuses
    void getFollowersStatuses(java.lang.String,long) -> getFollowersStatuses
    void getFollowersStatuses(int,long) -> getFollowersStatuses
    void createUserList(java.lang.String,boolean,java.lang.String) -> createUserList
    void updateUserList(int,java.lang.String,boolean,java.lang.String) -> updateUserList
    void getUserLists(java.lang.String,long) -> getUserLists
    void showUserList(java.lang.String,int) -> showUserList
    void destroyUserList(int) -> destroyUserList
    void getUserListStatuses(java.lang.String,int,twitter4j.Paging) -> getUserListStatuses
    void getUserListMemberships(java.lang.String,long) -> getUserListMemberships
    void getUserListSubscriptions(java.lang.String,long) -> getUserListSubscriptions
    void getAllSubscribingUserLists(java.lang.String) -> getAllSubscribingUserLists
    void getAllSubscribingUserLists(int) -> getAllSubscribingUserLists
    void getUserListMembers(java.lang.String,int,long) -> getUserListMembers
    void addUserListMember(int,int) -> addUserListMember
    void addUserListMembers(int,int[]) -> addUserListMembers
    void addUserListMembers(int,java.lang.String[]) -> addUserListMembers
    void deleteUserListMember(int,int) -> deleteUserListMember
    void checkUserListMembership(java.lang.String,int,int) -> checkUserListMembership
    void getUserListSubscribers(java.lang.String,int,long) -> getUserListSubscribers
    void subscribeUserList(java.lang.String,int) -> subscribeUserList
    void unsubscribeUserList(java.lang.String,int) -> unsubscribeUserList
    void checkUserListSubscription(java.lang.String,int,int) -> checkUserListSubscription
    void getDirectMessages() -> getDirectMessages
    void getDirectMessages(twitter4j.Paging) -> getDirectMessages
    void getSentDirectMessages() -> getSentDirectMessages
    void getSentDirectMessages(twitter4j.Paging) -> getSentDirectMessages
    void sendDirectMessage(java.lang.String,java.lang.String) -> sendDirectMessage
    void sendDirectMessage(int,java.lang.String) -> sendDirectMessage
    void destroyDirectMessage(long) -> destroyDirectMessage
    void showDirectMessage(long) -> showDirectMessage
    void createFriendship(java.lang.String) -> createFriendship
    void createFriendship(int) -> createFriendship
    void createFriendship(java.lang.String,boolean) -> createFriendship
    void createFriendship(int,boolean) -> createFriendship
    void destroyFriendship(java.lang.String) -> destroyFriendship
    void destroyFriendship(int) -> destroyFriendship
    void existsFriendship(java.lang.String,java.lang.String) -> existsFriendship
    void showFriendship(java.lang.String,java.lang.String) -> showFriendship
    void showFriendship(int,int) -> showFriendship
    void getIncomingFriendships(long) -> getIncomingFriendships
    void getOutgoingFriendships(long) -> getOutgoingFriendships
    void lookupFriendships(java.lang.String[]) -> lookupFriendships
    void lookupFriendships(int[]) -> lookupFriendships
    void updateFriendship(java.lang.String,boolean,boolean) -> updateFriendship
    void updateFriendship(int,boolean,boolean) -> updateFriendship
    void getFriendsIDs() -> getFriendsIDs
    void getFriendsIDs(long) -> getFriendsIDs
    void getFriendsIDs(int) -> getFriendsIDs
    void getFriendsIDs(int,long) -> getFriendsIDs
    void getFriendsIDs(java.lang.String) -> getFriendsIDs
    void getFriendsIDs(java.lang.String,long) -> getFriendsIDs
    void getFollowersIDs() -> getFollowersIDs
    void getFollowersIDs(long) -> getFollowersIDs
    void getFollowersIDs(int) -> getFollowersIDs
    void getFollowersIDs(int,long) -> getFollowersIDs
    void getFollowersIDs(java.lang.String) -> getFollowersIDs
    void getFollowersIDs(java.lang.String,long) -> getFollowersIDs
    void verifyCredentials() -> verifyCredentials
    void updateProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateProfile
    void updateProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateProfile
    void getRateLimitStatus() -> getRateLimitStatus
    void updateProfileColors(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateProfileColors
    void updateProfileImage(java.io.File) -> updateProfileImage
    void updateProfileBackgroundImage(java.io.File,boolean) -> updateProfileBackgroundImage
    void getFavorites() -> getFavorites
    void getFavorites(int) -> getFavorites
    void getFavorites(java.lang.String) -> getFavorites
    void getFavorites(java.lang.String,int) -> getFavorites
    void createFavorite(long) -> createFavorite
    void destroyFavorite(long) -> destroyFavorite
    void enableNotification(java.lang.String) -> enableNotification
    void enableNotification(int) -> enableNotification
    void disableNotification(java.lang.String) -> disableNotification
    void disableNotification(int) -> disableNotification
    void createBlock(java.lang.String) -> createBlock
    void createBlock(int) -> createBlock
    void destroyBlock(java.lang.String) -> destroyBlock
    void destroyBlock(int) -> destroyBlock
    void existsBlock(java.lang.String) -> existsBlock
    void existsBlock(int) -> existsBlock
    void getBlockingUsers() -> getBlockingUsers
    void getBlockingUsers(int) -> getBlockingUsers
    void getBlockingUsersIDs() -> getBlockingUsersIDs
    void reportSpam(int) -> reportSpam
    void reportSpam(java.lang.String) -> reportSpam
    void getAvailableTrends() -> getAvailableTrends
    void getAvailableTrends(twitter4j.GeoLocation) -> getAvailableTrends
    void getLocationTrends(int) -> getLocationTrends
    void searchPlaces(twitter4j.GeoQuery) -> searchPlaces
    void getSimilarPlaces(twitter4j.GeoLocation,java.lang.String,java.lang.String,java.lang.String) -> getSimilarPlaces
    void getNearbyPlaces(twitter4j.GeoQuery) -> getNearbyPlaces
    void reverseGeoCode(twitter4j.GeoQuery) -> reverseGeoCode
    void getGeoDetails(java.lang.String) -> getGeoDetails
    void createPlace(java.lang.String,java.lang.String,java.lang.String,twitter4j.GeoLocation,java.lang.String) -> createPlace
    void getTermsOfService() -> getTermsOfService
    void getPrivacyPolicy() -> getPrivacyPolicy
    void getRelatedResults(long) -> getRelatedResults
    void test() -> test
    void shutdown() -> shutdown
    twitter4j.internal.async.Dispatcher getDispatcher() -> getDispatcher
    void setOAuthConsumer(java.lang.String,java.lang.String) -> setOAuthConsumer
    twitter4j.http.RequestToken getOAuthRequestToken() -> getOAuthRequestToken
    twitter4j.http.RequestToken getOAuthRequestToken(java.lang.String) -> getOAuthRequestToken
    twitter4j.http.AccessToken getOAuthAccessToken() -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(twitter4j.http.RequestToken) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(twitter4j.http.RequestToken,java.lang.String) -> getOAuthAccessToken
    void setOAuthAccessToken(twitter4j.http.AccessToken) -> setOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String,java.lang.String) -> getOAuthAccessToken
    void setOAuthAccessToken(java.lang.String,java.lang.String) -> setOAuthAccessToken
    void httpResponseReceived(twitter4j.internal.http.HttpResponseEvent) -> httpResponseReceived
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void setRateLimitStatusListener(twitter4j.RateLimitStatusListener) -> setRateLimitStatusListener
    boolean isOAuthEnabled() -> isOAuthEnabled
    java.lang.String toString() -> toString
    twitter4j.conf.Configuration getConfiguration() -> getConfiguration
    twitter4j.Twitter access$000(twitter4j.AsyncTwitter) -> access$000
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.AsyncTwitter$1 -> twitter4j.AsyncTwitter$1:
    twitter4j.Query val$query -> val$query
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$10 -> twitter4j.AsyncTwitter$10:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$100 -> twitter4j.AsyncTwitter$100:
    java.lang.String[] val$screenNames -> val$screenNames
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$101 -> twitter4j.AsyncTwitter$101:
    int[] val$ids -> val$ids
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$102 -> twitter4j.AsyncTwitter$102:
    java.lang.String val$screenName -> val$screenName
    boolean val$enableDeviceNotification -> val$enableDeviceNotification
    boolean val$retweet -> val$retweet
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$103 -> twitter4j.AsyncTwitter$103:
    int val$userId -> val$userId
    boolean val$enableDeviceNotification -> val$enableDeviceNotification
    boolean val$retweet -> val$retweet
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$104 -> twitter4j.AsyncTwitter$104:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$105 -> twitter4j.AsyncTwitter$105:
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$106 -> twitter4j.AsyncTwitter$106:
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$107 -> twitter4j.AsyncTwitter$107:
    int val$userId -> val$userId
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$108 -> twitter4j.AsyncTwitter$108:
    java.lang.String val$screenName -> val$screenName
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$109 -> twitter4j.AsyncTwitter$109:
    java.lang.String val$screenName -> val$screenName
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$11 -> twitter4j.AsyncTwitter$11:
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$110 -> twitter4j.AsyncTwitter$110:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$111 -> twitter4j.AsyncTwitter$111:
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$112 -> twitter4j.AsyncTwitter$112:
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$113 -> twitter4j.AsyncTwitter$113:
    int val$userId -> val$userId
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$114 -> twitter4j.AsyncTwitter$114:
    java.lang.String val$screenName -> val$screenName
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$115 -> twitter4j.AsyncTwitter$115:
    java.lang.String val$screenName -> val$screenName
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$116 -> twitter4j.AsyncTwitter$116:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$117 -> twitter4j.AsyncTwitter$117:
    java.lang.String val$name -> val$name
    java.lang.String val$url -> val$url
    java.lang.String val$location -> val$location
    java.lang.String val$description -> val$description
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$118 -> twitter4j.AsyncTwitter$118:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$119 -> twitter4j.AsyncTwitter$119:
    java.lang.String val$profileBackgroundColor -> val$profileBackgroundColor
    java.lang.String val$profileTextColor -> val$profileTextColor
    java.lang.String val$profileLinkColor -> val$profileLinkColor
    java.lang.String val$profileSidebarFillColor -> val$profileSidebarFillColor
    java.lang.String val$profileSidebarBorderColor -> val$profileSidebarBorderColor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$12 -> twitter4j.AsyncTwitter$12:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$120 -> twitter4j.AsyncTwitter$120:
    java.io.File val$image -> val$image
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$121 -> twitter4j.AsyncTwitter$121:
    java.io.File val$image -> val$image
    boolean val$tile -> val$tile
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$122 -> twitter4j.AsyncTwitter$122:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$123 -> twitter4j.AsyncTwitter$123:
    int val$page -> val$page
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$124 -> twitter4j.AsyncTwitter$124:
    java.lang.String val$id -> val$id
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$125 -> twitter4j.AsyncTwitter$125:
    java.lang.String val$id -> val$id
    int val$page -> val$page
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$126 -> twitter4j.AsyncTwitter$126:
    long val$id -> val$id
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$127 -> twitter4j.AsyncTwitter$127:
    long val$id -> val$id
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$128 -> twitter4j.AsyncTwitter$128:
    java.lang.String val$screenName -> val$screenName
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$129 -> twitter4j.AsyncTwitter$129:
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$13 -> twitter4j.AsyncTwitter$13:
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$130 -> twitter4j.AsyncTwitter$130:
    java.lang.String val$screenName -> val$screenName
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$131 -> twitter4j.AsyncTwitter$131:
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$132 -> twitter4j.AsyncTwitter$132:
    java.lang.String val$screenName -> val$screenName
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$133 -> twitter4j.AsyncTwitter$133:
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$134 -> twitter4j.AsyncTwitter$134:
    java.lang.String val$screenName -> val$screenName
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$135 -> twitter4j.AsyncTwitter$135:
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$136 -> twitter4j.AsyncTwitter$136:
    java.lang.String val$screenName -> val$screenName
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$137 -> twitter4j.AsyncTwitter$137:
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$138 -> twitter4j.AsyncTwitter$138:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$139 -> twitter4j.AsyncTwitter$139:
    int val$page -> val$page
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$14 -> twitter4j.AsyncTwitter$14:
    java.lang.String val$screenName -> val$screenName
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$140 -> twitter4j.AsyncTwitter$140:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$141 -> twitter4j.AsyncTwitter$141:
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$142 -> twitter4j.AsyncTwitter$142:
    java.lang.String val$screenName -> val$screenName
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$143 -> twitter4j.AsyncTwitter$143:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$144 -> twitter4j.AsyncTwitter$144:
    twitter4j.GeoLocation val$location -> val$location
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$145 -> twitter4j.AsyncTwitter$145:
    int val$woeid -> val$woeid
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$146 -> twitter4j.AsyncTwitter$146:
    twitter4j.GeoQuery val$query -> val$query
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$147 -> twitter4j.AsyncTwitter$147:
    twitter4j.GeoLocation val$location -> val$location
    java.lang.String val$name -> val$name
    java.lang.String val$containedWithin -> val$containedWithin
    java.lang.String val$streetAddress -> val$streetAddress
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$148 -> twitter4j.AsyncTwitter$148:
    twitter4j.GeoQuery val$query -> val$query
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$149 -> twitter4j.AsyncTwitter$149:
    twitter4j.GeoQuery val$query -> val$query
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$15 -> twitter4j.AsyncTwitter$15:
    int val$userId -> val$userId
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$150 -> twitter4j.AsyncTwitter$150:
    java.lang.String val$id -> val$id
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$151 -> twitter4j.AsyncTwitter$151:
    java.lang.String val$name -> val$name
    java.lang.String val$containedWithin -> val$containedWithin
    java.lang.String val$token -> val$token
    twitter4j.GeoLocation val$location -> val$location
    java.lang.String val$streetAddress -> val$streetAddress
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$152 -> twitter4j.AsyncTwitter$152:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$153 -> twitter4j.AsyncTwitter$153:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$154 -> twitter4j.AsyncTwitter$154:
    long val$statusId -> val$statusId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$155 -> twitter4j.AsyncTwitter$155:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$16 -> twitter4j.AsyncTwitter$16:
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$17 -> twitter4j.AsyncTwitter$17:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$18 -> twitter4j.AsyncTwitter$18:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$19 -> twitter4j.AsyncTwitter$19:
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$2 -> twitter4j.AsyncTwitter$2:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$20 -> twitter4j.AsyncTwitter$20:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$21 -> twitter4j.AsyncTwitter$21:
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$22 -> twitter4j.AsyncTwitter$22:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$23 -> twitter4j.AsyncTwitter$23:
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$24 -> twitter4j.AsyncTwitter$24:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$25 -> twitter4j.AsyncTwitter$25:
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$26 -> twitter4j.AsyncTwitter$26:
    java.lang.String val$screenName -> val$screenName
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$27 -> twitter4j.AsyncTwitter$27:
    int val$userId -> val$userId
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$28 -> twitter4j.AsyncTwitter$28:
    java.lang.String val$screenName -> val$screenName
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$29 -> twitter4j.AsyncTwitter$29:
    int val$userId -> val$userId
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$3 -> twitter4j.AsyncTwitter$3:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$30 -> twitter4j.AsyncTwitter$30:
    long val$id -> val$id
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$31 -> twitter4j.AsyncTwitter$31:
    java.lang.String val$status -> val$status
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$32 -> twitter4j.AsyncTwitter$32:
    java.lang.String val$status -> val$status
    twitter4j.GeoLocation val$location -> val$location
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$33 -> twitter4j.AsyncTwitter$33:
    java.lang.String val$status -> val$status
    long val$inReplyToStatusId -> val$inReplyToStatusId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$34 -> twitter4j.AsyncTwitter$34:
    java.lang.String val$status -> val$status
    long val$inReplyToStatusId -> val$inReplyToStatusId
    twitter4j.GeoLocation val$location -> val$location
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$35 -> twitter4j.AsyncTwitter$35:
    twitter4j.StatusUpdate val$latestStatus -> val$latestStatus
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$36 -> twitter4j.AsyncTwitter$36:
    long val$statusId -> val$statusId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$37 -> twitter4j.AsyncTwitter$37:
    long val$statusId -> val$statusId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$38 -> twitter4j.AsyncTwitter$38:
    long val$statusId -> val$statusId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$39 -> twitter4j.AsyncTwitter$39:
    long val$statusId -> val$statusId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$4 -> twitter4j.AsyncTwitter$4:
    boolean val$excludeHashTags -> val$excludeHashTags
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$40 -> twitter4j.AsyncTwitter$40:
    long val$statusId -> val$statusId
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$41 -> twitter4j.AsyncTwitter$41:
    long val$statusId -> val$statusId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$42 -> twitter4j.AsyncTwitter$42:
    long val$statusId -> val$statusId
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$43 -> twitter4j.AsyncTwitter$43:
    java.lang.String val$screenName -> val$screenName
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$44 -> twitter4j.AsyncTwitter$44:
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$45 -> twitter4j.AsyncTwitter$45:
    java.lang.String[] val$screenNames -> val$screenNames
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$46 -> twitter4j.AsyncTwitter$46:
    int[] val$ids -> val$ids
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$47 -> twitter4j.AsyncTwitter$47:
    java.lang.String val$query -> val$query
    int val$page -> val$page
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$48 -> twitter4j.AsyncTwitter$48:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$49 -> twitter4j.AsyncTwitter$49:
    java.lang.String val$categorySlug -> val$categorySlug
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$5 -> twitter4j.AsyncTwitter$5:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$50 -> twitter4j.AsyncTwitter$50:
    java.lang.String val$categorySlug -> val$categorySlug
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$51 -> twitter4j.AsyncTwitter$51:
    java.lang.String val$screenName -> val$screenName
    twitter4j.ProfileImage$ImageSize val$size -> val$size
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$52 -> twitter4j.AsyncTwitter$52:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$53 -> twitter4j.AsyncTwitter$53:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$54 -> twitter4j.AsyncTwitter$54:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$55 -> twitter4j.AsyncTwitter$55:
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$56 -> twitter4j.AsyncTwitter$56:
    java.lang.String val$screenName -> val$screenName
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$57 -> twitter4j.AsyncTwitter$57:
    int val$userId -> val$userId
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$58 -> twitter4j.AsyncTwitter$58:
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$59 -> twitter4j.AsyncTwitter$59:
    java.lang.String val$screenName -> val$screenName
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$6 -> twitter4j.AsyncTwitter$6:
    java.util.Date val$date -> val$date
    boolean val$excludeHashTags -> val$excludeHashTags
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$60 -> twitter4j.AsyncTwitter$60:
    int val$userId -> val$userId
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$61 -> twitter4j.AsyncTwitter$61:
    java.lang.String val$listName -> val$listName
    boolean val$isPublicList -> val$isPublicList
    java.lang.String val$description -> val$description
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$62 -> twitter4j.AsyncTwitter$62:
    int val$listId -> val$listId
    java.lang.String val$newListName -> val$newListName
    boolean val$isPublicList -> val$isPublicList
    java.lang.String val$newDescription -> val$newDescription
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$63 -> twitter4j.AsyncTwitter$63:
    java.lang.String val$listOwnerScreenName -> val$listOwnerScreenName
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$64 -> twitter4j.AsyncTwitter$64:
    java.lang.String val$listOwnerScreenName -> val$listOwnerScreenName
    int val$id -> val$id
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$65 -> twitter4j.AsyncTwitter$65:
    int val$listId -> val$listId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$66 -> twitter4j.AsyncTwitter$66:
    java.lang.String val$listOwnerScreenName -> val$listOwnerScreenName
    int val$id -> val$id
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$67 -> twitter4j.AsyncTwitter$67:
    java.lang.String val$listMemberScreenName -> val$listMemberScreenName
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$68 -> twitter4j.AsyncTwitter$68:
    java.lang.String val$listOwnerScreenName -> val$listOwnerScreenName
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$69 -> twitter4j.AsyncTwitter$69:
    java.lang.String val$screenName -> val$screenName
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$7 -> twitter4j.AsyncTwitter$7:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$70 -> twitter4j.AsyncTwitter$70:
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$71 -> twitter4j.AsyncTwitter$71:
    java.lang.String val$listOwnerScreenName -> val$listOwnerScreenName
    int val$listId -> val$listId
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$72 -> twitter4j.AsyncTwitter$72:
    int val$listId -> val$listId
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$73 -> twitter4j.AsyncTwitter$73:
    int val$listId -> val$listId
    int[] val$userIds -> val$userIds
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$74 -> twitter4j.AsyncTwitter$74:
    int val$listId -> val$listId
    java.lang.String[] val$screenNames -> val$screenNames
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$75 -> twitter4j.AsyncTwitter$75:
    int val$listId -> val$listId
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$76 -> twitter4j.AsyncTwitter$76:
    java.lang.String val$listOwnerScreenName -> val$listOwnerScreenName
    int val$listId -> val$listId
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$77 -> twitter4j.AsyncTwitter$77:
    java.lang.String val$listOwnerScreenName -> val$listOwnerScreenName
    int val$listId -> val$listId
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$78 -> twitter4j.AsyncTwitter$78:
    java.lang.String val$listOwnerScreenName -> val$listOwnerScreenName
    int val$listId -> val$listId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$79 -> twitter4j.AsyncTwitter$79:
    java.lang.String val$listOwnerScreenName -> val$listOwnerScreenName
    int val$listId -> val$listId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$8 -> twitter4j.AsyncTwitter$8:
    java.util.Date val$date -> val$date
    boolean val$excludeHashTags -> val$excludeHashTags
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$80 -> twitter4j.AsyncTwitter$80:
    java.lang.String val$listOwnerScreenName -> val$listOwnerScreenName
    int val$listId -> val$listId
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$81 -> twitter4j.AsyncTwitter$81:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$82 -> twitter4j.AsyncTwitter$82:
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$83 -> twitter4j.AsyncTwitter$83:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$84 -> twitter4j.AsyncTwitter$84:
    twitter4j.Paging val$paging -> val$paging
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$85 -> twitter4j.AsyncTwitter$85:
    java.lang.String val$screenName -> val$screenName
    java.lang.String val$text -> val$text
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$86 -> twitter4j.AsyncTwitter$86:
    int val$userId -> val$userId
    java.lang.String val$text -> val$text
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$87 -> twitter4j.AsyncTwitter$87:
    long val$id -> val$id
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$88 -> twitter4j.AsyncTwitter$88:
    long val$id -> val$id
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$89 -> twitter4j.AsyncTwitter$89:
    java.lang.String val$screenName -> val$screenName
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$9 -> twitter4j.AsyncTwitter$9:
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$90 -> twitter4j.AsyncTwitter$90:
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$91 -> twitter4j.AsyncTwitter$91:
    java.lang.String val$screenName -> val$screenName
    boolean val$follow -> val$follow
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$92 -> twitter4j.AsyncTwitter$92:
    int val$userId -> val$userId
    boolean val$follow -> val$follow
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$93 -> twitter4j.AsyncTwitter$93:
    java.lang.String val$screenName -> val$screenName
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$94 -> twitter4j.AsyncTwitter$94:
    int val$userId -> val$userId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$95 -> twitter4j.AsyncTwitter$95:
    java.lang.String val$userA -> val$userA
    java.lang.String val$userB -> val$userB
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$96 -> twitter4j.AsyncTwitter$96:
    java.lang.String val$sourceScreenName -> val$sourceScreenName
    java.lang.String val$targetScreenName -> val$targetScreenName
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$97 -> twitter4j.AsyncTwitter$97:
    int val$sourceId -> val$sourceId
    int val$targetId -> val$targetId
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$98 -> twitter4j.AsyncTwitter$98:
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$99 -> twitter4j.AsyncTwitter$99:
    long val$cursor -> val$cursor
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
twitter4j.AsyncTwitter$AsyncTask -> twitter4j.AsyncTwitter$AsyncTask:
    twitter4j.TwitterListener listener -> listener
    twitter4j.TwitterMethod method -> method
    twitter4j.AsyncTwitter this$0 -> this$0
    void invoke(twitter4j.TwitterListener) -> invoke
    void run() -> run
twitter4j.AsyncTwitterFactory -> twitter4j.AsyncTwitterFactory:
    twitter4j.TwitterListener listener -> listener
    twitter4j.conf.Configuration conf -> conf
    long serialVersionUID -> serialVersionUID
    twitter4j.AsyncTwitter getInstance() -> getInstance
    twitter4j.AsyncTwitter getInstance(java.lang.String,java.lang.String) -> getInstance
    twitter4j.AsyncTwitter getInstance(twitter4j.http.AccessToken) -> getInstance
    twitter4j.AsyncTwitter getInstance(twitter4j.http.Authorization) -> getInstance
    twitter4j.AsyncTwitter getOAuthAuthorizedInstance(java.lang.String,java.lang.String) -> getOAuthAuthorizedInstance
    twitter4j.AsyncTwitter getOAuthAuthorizedInstance(java.lang.String,java.lang.String,twitter4j.http.AccessToken) -> getOAuthAuthorizedInstance
    twitter4j.AsyncTwitter getOAuthAuthorizedInstance(twitter4j.http.AccessToken) -> getOAuthAuthorizedInstance
    twitter4j.AsyncTwitter getInstance(twitter4j.conf.Configuration,twitter4j.http.Authorization) -> getInstance
    twitter4j.AsyncTwitter getInstance(twitter4j.conf.Configuration) -> getInstance
twitter4j.Category -> twitter4j.Category:
    java.lang.String getName() -> getName
    java.lang.String getSlug() -> getSlug
    int getSize() -> getSize
twitter4j.CategoryJSONImpl -> twitter4j.CategoryJSONImpl:
    java.lang.String name -> name
    java.lang.String slug -> slug
    int size -> size
    long serialVersionUID -> serialVersionUID
    void init(twitter4j.internal.org.json.JSONObject) -> init
    twitter4j.ResponseList createCategoriesList(twitter4j.internal.http.HttpResponse) -> createCategoriesList
    twitter4j.ResponseList createCategoriesList(twitter4j.internal.org.json.JSONArray,twitter4j.internal.http.HttpResponse) -> createCategoriesList
    java.lang.String getName() -> getName
    java.lang.String getSlug() -> getSlug
    int getSize() -> getSize
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.ConnectionLifeCycleListener -> twitter4j.ConnectionLifeCycleListener:
    void onConnect() -> onConnect
    void onDisconnect() -> onDisconnect
    void onCleanUp() -> onCleanUp
twitter4j.CursorSupport -> twitter4j.CursorSupport:
    boolean hasPrevious() -> hasPrevious
    long getPreviousCursor() -> getPreviousCursor
    boolean hasNext() -> hasNext
    long getNextCursor() -> getNextCursor
twitter4j.DirectMessage -> twitter4j.DirectMessage:
    long getId() -> getId
    java.lang.String getText() -> getText
    int getSenderId() -> getSenderId
    int getRecipientId() -> getRecipientId
    java.util.Date getCreatedAt() -> getCreatedAt
    java.lang.String getSenderScreenName() -> getSenderScreenName
    java.lang.String getRecipientScreenName() -> getRecipientScreenName
    twitter4j.User getSender() -> getSender
    twitter4j.User getRecipient() -> getRecipient
twitter4j.DirectMessageJSONImpl -> twitter4j.DirectMessageJSONImpl:
    long id -> id
    java.lang.String text -> text
    int senderId -> senderId
    int recipientId -> recipientId
    java.util.Date createdAt -> createdAt
    java.lang.String senderScreenName -> senderScreenName
    java.lang.String recipientScreenName -> recipientScreenName
    long serialVersionUID -> serialVersionUID
    twitter4j.User sender -> sender
    twitter4j.User recipient -> recipient
    void init(twitter4j.internal.org.json.JSONObject) -> init
    long getId() -> getId
    java.lang.String getText() -> getText
    int getSenderId() -> getSenderId
    int getRecipientId() -> getRecipientId
    java.util.Date getCreatedAt() -> getCreatedAt
    java.lang.String getSenderScreenName() -> getSenderScreenName
    java.lang.String getRecipientScreenName() -> getRecipientScreenName
    twitter4j.User getSender() -> getSender
    twitter4j.User getRecipient() -> getRecipient
    twitter4j.ResponseList createDirectMessageList(twitter4j.internal.http.HttpResponse) -> createDirectMessageList
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
twitter4j.ExceptionDiagnosis -> twitter4j.ExceptionDiagnosis:
    int stackLineHash -> stackLineHash
    int lineNumberHash -> lineNumberHash
    java.lang.String hexString -> hexString
    java.lang.Throwable th -> th
    long serialVersionUID -> serialVersionUID
    int getStackLineHash() -> getStackLineHash
    int getLineNumberHash() -> getLineNumberHash
    java.lang.String asHexString() -> asHexString
    java.lang.String toHexString(int) -> toHexString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.FilterQuery -> twitter4j.FilterQuery:
    int count -> count
    int[] follow -> follow
    java.lang.String[] track -> track
    double[][] locations -> locations
    boolean includeEntities -> includeEntities
    twitter4j.FilterQuery count(int) -> count
    twitter4j.FilterQuery follow(int[]) -> follow
    twitter4j.FilterQuery track(java.lang.String[]) -> track
    twitter4j.FilterQuery locations(double[][]) -> locations
    twitter4j.FilterQuery setIncludeEntities(boolean) -> setIncludeEntities
    twitter4j.internal.http.HttpParameter[] asHttpParameterArray() -> asHttpParameterArray
    java.lang.String toLocationsString(double[][]) -> toLocationsString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.Friendship -> twitter4j.Friendship:
    int getId() -> getId
    java.lang.String getName() -> getName
    java.lang.String getScreenName() -> getScreenName
    boolean isFollowing() -> isFollowing
    boolean isFollowedBy() -> isFollowedBy
twitter4j.FriendshipJSONImpl -> twitter4j.FriendshipJSONImpl:
    long serialVersionUID -> serialVersionUID
    int id -> id
    java.lang.String name -> name
    java.lang.String screenName -> screenName
    boolean following -> following
    boolean followedBy -> followedBy
    twitter4j.ResponseList createFriendshipList(twitter4j.internal.http.HttpResponse) -> createFriendshipList
    int getId() -> getId
    java.lang.String getName() -> getName
    java.lang.String getScreenName() -> getScreenName
    boolean isFollowing() -> isFollowing
    boolean isFollowedBy() -> isFollowedBy
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.GeoLocation -> twitter4j.GeoLocation:
    double latitude -> latitude
    double longitude -> longitude
    long serialVersionUID -> serialVersionUID
    twitter4j.GeoLocation getInstance(twitter4j.internal.org.json.JSONObject) -> getInstance
    twitter4j.GeoLocation[][] coordinatesAsGeoLocationArray(twitter4j.internal.org.json.JSONArray) -> coordinatesAsGeoLocationArray
    double getLatitude() -> getLatitude
    double getLongitude() -> getLongitude
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.GeoQuery -> twitter4j.GeoQuery:
    twitter4j.GeoLocation location -> location
    java.lang.String ip -> ip
    java.lang.String accuracy -> accuracy
    java.lang.String granularity -> granularity
    int maxResults -> maxResults
    java.lang.String NEIGHBORHOOD -> NEIGHBORHOOD
    java.lang.String CITY -> CITY
    long serialVersionUID -> serialVersionUID
    twitter4j.GeoLocation getLocation() -> getLocation
    java.lang.String getIp() -> getIp
    java.lang.String getAccuracy() -> getAccuracy
    void setAccuracy(java.lang.String) -> setAccuracy
    twitter4j.GeoQuery accuracy(java.lang.String) -> accuracy
    java.lang.String getGranularity() -> getGranularity
    void setGranularity(java.lang.String) -> setGranularity
    twitter4j.GeoQuery granularity(java.lang.String) -> granularity
    int getMaxResults() -> getMaxResults
    void setMaxResults(int) -> setMaxResults
    twitter4j.GeoQuery maxResults(int) -> maxResults
    twitter4j.internal.http.HttpParameter[] asHttpParameterArray() -> asHttpParameterArray
    void appendParameter(java.lang.String,java.lang.String,java.util.List) -> appendParameter
    void appendParameter(java.lang.String,int,java.util.List) -> appendParameter
    void appendParameter(java.lang.String,double,java.util.List) -> appendParameter
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.HashtagEntity -> twitter4j.HashtagEntity:
    java.lang.String getText() -> getText
    int getStart() -> getStart
    int getEnd() -> getEnd
twitter4j.HashtagEntityJSONImpl -> twitter4j.HashtagEntityJSONImpl:
    long serialVersionUID -> serialVersionUID
    int start -> start
    int end -> end
    java.lang.String text -> text
    void init(twitter4j.internal.org.json.JSONObject) -> init
    java.lang.String getText() -> getText
    int getStart() -> getStart
    int getEnd() -> getEnd
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.IDs -> twitter4j.IDs:
    int[] getIDs() -> getIDs
    boolean hasPrevious() -> hasPrevious
    long getPreviousCursor() -> getPreviousCursor
    boolean hasNext() -> hasNext
    long getNextCursor() -> getNextCursor
twitter4j.IDsJSONImpl -> twitter4j.IDsJSONImpl:
    int[] ids -> ids
    long previousCursor -> previousCursor
    long nextCursor -> nextCursor
    long serialVersionUID -> serialVersionUID
    void init(java.lang.String) -> init
    int[] getIDs() -> getIDs
    boolean hasPrevious() -> hasPrevious
    long getPreviousCursor() -> getPreviousCursor
    boolean hasNext() -> hasNext
    long getNextCursor() -> getNextCursor
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.Location -> twitter4j.Location:
    int getWoeid() -> getWoeid
    java.lang.String getCountryName() -> getCountryName
    java.lang.String getCountryCode() -> getCountryCode
    java.lang.String getPlaceName() -> getPlaceName
    int getPlaceCode() -> getPlaceCode
    java.lang.String getName() -> getName
    java.lang.String getURL() -> getURL
twitter4j.LocationJSONImpl -> twitter4j.LocationJSONImpl:
    int woeid -> woeid
    java.lang.String countryName -> countryName
    java.lang.String countryCode -> countryCode
    java.lang.String placeName -> placeName
    int placeCode -> placeCode
    java.lang.String name -> name
    java.lang.String url -> url
    long serialVersionUID -> serialVersionUID
    twitter4j.ResponseList createLocationList(twitter4j.internal.http.HttpResponse) -> createLocationList
    twitter4j.ResponseList createLocationList(twitter4j.internal.org.json.JSONArray) -> createLocationList
    int getWoeid() -> getWoeid
    java.lang.String getCountryName() -> getCountryName
    java.lang.String getCountryCode() -> getCountryCode
    java.lang.String getPlaceName() -> getPlaceName
    int getPlaceCode() -> getPlaceCode
    java.lang.String getName() -> getName
    java.lang.String getURL() -> getURL
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.PagableResponseList -> twitter4j.PagableResponseList:
    boolean hasPrevious() -> hasPrevious
    long getPreviousCursor() -> getPreviousCursor
    boolean hasNext() -> hasNext
    long getNextCursor() -> getNextCursor
twitter4j.PagableResponseListImpl -> twitter4j.PagableResponseListImpl:
    long previousCursor -> previousCursor
    long nextCursor -> nextCursor
    long serialVersionUID -> serialVersionUID
    boolean hasPrevious() -> hasPrevious
    long getPreviousCursor() -> getPreviousCursor
    boolean hasNext() -> hasNext
    long getNextCursor() -> getNextCursor
twitter4j.Paging -> twitter4j.Paging:
    int page -> page
    int count -> count
    long sinceId -> sinceId
    long maxId -> maxId
    long serialVersionUID -> serialVersionUID
    char[] S -> S
    char[] SMCP -> SMCP
    java.lang.String COUNT -> COUNT
    java.lang.String PER_PAGE -> PER_PAGE
    twitter4j.internal.http.HttpParameter[] NULL_PARAMETER_ARRAY -> NULL_PARAMETER_ARRAY
    java.util.List NULL_PARAMETER_LIST -> NULL_PARAMETER_LIST
    java.util.List asPostParameterList() -> asPostParameterList
    twitter4j.internal.http.HttpParameter[] asPostParameterArray() -> asPostParameterArray
    java.util.List asPostParameterList(char[]) -> asPostParameterList
    java.util.List asPostParameterList(char[],java.lang.String) -> asPostParameterList
    twitter4j.internal.http.HttpParameter[] asPostParameterArray(char[],java.lang.String) -> asPostParameterArray
    void addPostParameter(char[],char,java.util.List,java.lang.String,long) -> addPostParameter
    int getPage() -> getPage
    void setPage(int) -> setPage
    int getCount() -> getCount
    void setCount(int) -> setCount
    twitter4j.Paging count(int) -> count
    long getSinceId() -> getSinceId
    void setSinceId(long) -> setSinceId
    twitter4j.Paging sinceId(long) -> sinceId
    long getMaxId() -> getMaxId
    void setMaxId(long) -> setMaxId
    twitter4j.Paging maxId(long) -> maxId
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.Place -> twitter4j.Place:
    java.lang.String getName() -> getName
    java.lang.String getStreetAddress() -> getStreetAddress
    java.lang.String getCountryCode() -> getCountryCode
    java.lang.String getId() -> getId
    java.lang.String getCountry() -> getCountry
    java.lang.String getPlaceType() -> getPlaceType
    java.lang.String getURL() -> getURL
    java.lang.String getFullName() -> getFullName
    java.lang.String getBoundingBoxType() -> getBoundingBoxType
    twitter4j.GeoLocation[][] getBoundingBoxCoordinates() -> getBoundingBoxCoordinates
    java.lang.String getGeometryType() -> getGeometryType
    twitter4j.GeoLocation[][] getGeometryCoordinates() -> getGeometryCoordinates
    twitter4j.Place[] getContainedWithIn() -> getContainedWithIn
twitter4j.PlaceJSONImpl -> twitter4j.PlaceJSONImpl:
    java.lang.String name -> name
    java.lang.String streetAddress -> streetAddress
    java.lang.String countryCode -> countryCode
    java.lang.String id -> id
    java.lang.String country -> country
    java.lang.String placeType -> placeType
    java.lang.String url -> url
    java.lang.String fullName -> fullName
    java.lang.String boundingBoxType -> boundingBoxType
    twitter4j.GeoLocation[][] boundingBoxCoordinates -> boundingBoxCoordinates
    java.lang.String geometryType -> geometryType
    twitter4j.GeoLocation[][] geometryCoordinates -> geometryCoordinates
    twitter4j.Place[] containedWithIn -> containedWithIn
    long serialVersionUID -> serialVersionUID
    void init(twitter4j.internal.org.json.JSONObject) -> init
    int compareTo(twitter4j.Place) -> compareTo
    twitter4j.ResponseList createPlaceList(twitter4j.internal.http.HttpResponse) -> createPlaceList
    twitter4j.ResponseList createPlaceList(twitter4j.internal.org.json.JSONArray,twitter4j.internal.http.HttpResponse) -> createPlaceList
    java.lang.String getName() -> getName
    java.lang.String getStreetAddress() -> getStreetAddress
    java.lang.String getCountryCode() -> getCountryCode
    java.lang.String getId() -> getId
    java.lang.String getCountry() -> getCountry
    java.lang.String getPlaceType() -> getPlaceType
    java.lang.String getURL() -> getURL
    java.lang.String getFullName() -> getFullName
    java.lang.String getBoundingBoxType() -> getBoundingBoxType
    twitter4j.GeoLocation[][] getBoundingBoxCoordinates() -> getBoundingBoxCoordinates
    java.lang.String getGeometryType() -> getGeometryType
    twitter4j.GeoLocation[][] getGeometryCoordinates() -> getGeometryCoordinates
    twitter4j.Place[] getContainedWithIn() -> getContainedWithIn
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.ProfileImage -> twitter4j.ProfileImage:
    twitter4j.ProfileImage$ImageSize BIGGER -> BIGGER
    twitter4j.ProfileImage$ImageSize NORMAL -> NORMAL
    twitter4j.ProfileImage$ImageSize MINI -> MINI
    java.lang.String getURL() -> getURL
twitter4j.ProfileImage$1 -> twitter4j.ProfileImage$1:
twitter4j.ProfileImage$ImageSize -> twitter4j.ProfileImage$ImageSize:
    java.util.Map instances -> instances
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    java.lang.String getName() -> getName
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    twitter4j.ProfileImage$ImageSize getInstance(java.lang.String) -> getInstance
    java.lang.Object readResolve() -> readResolve
twitter4j.ProfileImageImpl -> twitter4j.ProfileImageImpl:
    long serialVersionUID -> serialVersionUID
    java.lang.String url -> url
    java.lang.String getURL() -> getURL
twitter4j.Query -> twitter4j.Query:
    java.lang.String query -> query
    java.lang.String lang -> lang
    java.lang.String locale -> locale
    long maxId -> maxId
    int rpp -> rpp
    int page -> page
    java.lang.String since -> since
    long sinceId -> sinceId
    java.lang.String geocode -> geocode
    java.lang.String until -> until
    java.lang.String resultType -> resultType
    long serialVersionUID -> serialVersionUID
    java.lang.String MILES -> MILES
    java.lang.String KILOMETERS -> KILOMETERS
    java.lang.String MIXED -> MIXED
    java.lang.String POPULAR -> POPULAR
    java.lang.String RECENT -> RECENT
    java.lang.String getQuery() -> getQuery
    void setQuery(java.lang.String) -> setQuery
    twitter4j.Query query(java.lang.String) -> query
    java.lang.String getLang() -> getLang
    void setLang(java.lang.String) -> setLang
    twitter4j.Query lang(java.lang.String) -> lang
    java.lang.String getLocale() -> getLocale
    void setLocale(java.lang.String) -> setLocale
    twitter4j.Query locale(java.lang.String) -> locale
    long getMaxId() -> getMaxId
    void setMaxId(long) -> setMaxId
    twitter4j.Query maxId(long) -> maxId
    int getRpp() -> getRpp
    void setRpp(int) -> setRpp
    twitter4j.Query rpp(int) -> rpp
    int getPage() -> getPage
    void setPage(int) -> setPage
    twitter4j.Query page(int) -> page
    java.lang.String getSince() -> getSince
    void setSince(java.lang.String) -> setSince
    twitter4j.Query since(java.lang.String) -> since
    long getSinceId() -> getSinceId
    void setSinceId(long) -> setSinceId
    twitter4j.Query sinceId(long) -> sinceId
    java.lang.String getGeocode() -> getGeocode
    void setGeoCode(twitter4j.GeoLocation,double,java.lang.String) -> setGeoCode
    twitter4j.Query geoCode(twitter4j.GeoLocation,double,java.lang.String) -> geoCode
    java.lang.String getUntil() -> getUntil
    void setUntil(java.lang.String) -> setUntil
    twitter4j.Query until(java.lang.String) -> until
    java.lang.String getResultType() -> getResultType
    void setResultType(java.lang.String) -> setResultType
    twitter4j.Query resultType(java.lang.String) -> resultType
    twitter4j.internal.http.HttpParameter[] asHttpParameterArray() -> asHttpParameterArray
    void appendParameter(java.lang.String,java.lang.String,java.util.List) -> appendParameter
    void appendParameter(java.lang.String,long,java.util.List) -> appendParameter
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.QueryResult -> twitter4j.QueryResult:
    long getSinceId() -> getSinceId
    long getMaxId() -> getMaxId
    java.lang.String getRefreshUrl() -> getRefreshUrl
    int getResultsPerPage() -> getResultsPerPage
    java.lang.String getWarning() -> getWarning
    double getCompletedIn() -> getCompletedIn
    int getPage() -> getPage
    java.lang.String getQuery() -> getQuery
    java.util.List getTweets() -> getTweets
twitter4j.QueryResultJSONImpl -> twitter4j.QueryResultJSONImpl:
    long sinceId -> sinceId
    long maxId -> maxId
    java.lang.String refreshUrl -> refreshUrl
    int resultsPerPage -> resultsPerPage
    java.lang.String warning -> warning
    double completedIn -> completedIn
    int page -> page
    java.lang.String query -> query
    java.util.List tweets -> tweets
    long serialVersionUID -> serialVersionUID
    long getSinceId() -> getSinceId
    long getMaxId() -> getMaxId
    java.lang.String getRefreshUrl() -> getRefreshUrl
    int getResultsPerPage() -> getResultsPerPage
    java.lang.String getWarning() -> getWarning
    double getCompletedIn() -> getCompletedIn
    int getPage() -> getPage
    java.lang.String getQuery() -> getQuery
    java.util.List getTweets() -> getTweets
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.RateLimitStatus -> twitter4j.RateLimitStatus:
    int getRemainingHits() -> getRemainingHits
    int getHourlyLimit() -> getHourlyLimit
    int getResetTimeInSeconds() -> getResetTimeInSeconds
    int getSecondsUntilReset() -> getSecondsUntilReset
    java.util.Date getResetTime() -> getResetTime
twitter4j.RateLimitStatusEvent -> twitter4j.RateLimitStatusEvent:
    twitter4j.RateLimitStatus rateLimitStatus -> rateLimitStatus
    boolean isAccountRateLimitStatus -> isAccountRateLimitStatus
    long serialVersionUID -> serialVersionUID
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
    boolean isAccountRateLimitStatus() -> isAccountRateLimitStatus
    boolean isIPRateLimitStatus() -> isIPRateLimitStatus
twitter4j.RateLimitStatusJSONImpl -> twitter4j.RateLimitStatusJSONImpl:
    int remainingHits -> remainingHits
    int hourlyLimit -> hourlyLimit
    int resetTimeInSeconds -> resetTimeInSeconds
    int secondsUntilReset -> secondsUntilReset
    java.util.Date resetTime -> resetTime
    long serialVersionUID -> serialVersionUID
    void init(twitter4j.internal.org.json.JSONObject) -> init
    twitter4j.RateLimitStatus createFromResponseHeader(twitter4j.internal.http.HttpResponse) -> createFromResponseHeader
    twitter4j.RateLimitStatus createFeatureSpecificRateLimitStatusFromResponseHeader(twitter4j.internal.http.HttpResponse) -> createFeatureSpecificRateLimitStatusFromResponseHeader
    int getRemainingHits() -> getRemainingHits
    int getHourlyLimit() -> getHourlyLimit
    int getResetTimeInSeconds() -> getResetTimeInSeconds
    int getSecondsUntilReset() -> getSecondsUntilReset
    java.util.Date getResetTime() -> getResetTime
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.RateLimitStatusListener -> twitter4j.RateLimitStatusListener:
    void onRateLimitStatus(twitter4j.RateLimitStatusEvent) -> onRateLimitStatus
    void onRateLimitReached(twitter4j.RateLimitStatusEvent) -> onRateLimitReached
twitter4j.RelatedResults -> twitter4j.RelatedResults:
    twitter4j.ResponseList getTweetsWithConversation() -> getTweetsWithConversation
    twitter4j.ResponseList getTweetsWithReply() -> getTweetsWithReply
    twitter4j.ResponseList getTweetsFromUser() -> getTweetsFromUser
twitter4j.RelatedResultsJSONImpl -> twitter4j.RelatedResultsJSONImpl:
    java.lang.String TWEETS_WITH_CONVERSATION -> TWEETS_WITH_CONVERSATION
    java.lang.String TWEETS_WITH_REPLY -> TWEETS_WITH_REPLY
    java.lang.String TWEETS_FROM_USER -> TWEETS_FROM_USER
    long serialVersionUID -> serialVersionUID
    java.util.Map tweetsMap -> tweetsMap
    void init(twitter4j.internal.org.json.JSONArray,twitter4j.internal.http.HttpResponse,boolean) -> init
    twitter4j.ResponseList getTweetsWithConversation() -> getTweetsWithConversation
    twitter4j.ResponseList getTweetsWithReply() -> getTweetsWithReply
    twitter4j.ResponseList getTweetsFromUser() -> getTweetsFromUser
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
twitter4j.Relationship -> twitter4j.Relationship:
    int getSourceUserId() -> getSourceUserId
    int getTargetUserId() -> getTargetUserId
    boolean isSourceBlockingTarget() -> isSourceBlockingTarget
    java.lang.String getSourceUserScreenName() -> getSourceUserScreenName
    java.lang.String getTargetUserScreenName() -> getTargetUserScreenName
    boolean isSourceFollowingTarget() -> isSourceFollowingTarget
    boolean isTargetFollowingSource() -> isTargetFollowingSource
    boolean isSourceFollowedByTarget() -> isSourceFollowedByTarget
    boolean isTargetFollowedBySource() -> isTargetFollowedBySource
    boolean isSourceNotificationsEnabled() -> isSourceNotificationsEnabled
twitter4j.RelationshipJSONImpl -> twitter4j.RelationshipJSONImpl:
    int targetUserId -> targetUserId
    java.lang.String targetUserScreenName -> targetUserScreenName
    boolean sourceBlockingTarget -> sourceBlockingTarget
    boolean sourceNotificationsEnabled -> sourceNotificationsEnabled
    boolean sourceFollowingTarget -> sourceFollowingTarget
    boolean sourceFollowedByTarget -> sourceFollowedByTarget
    int sourceUserId -> sourceUserId
    java.lang.String sourceUserScreenName -> sourceUserScreenName
    long serialVersionUID -> serialVersionUID
    twitter4j.ResponseList createRelationshipList(twitter4j.internal.http.HttpResponse) -> createRelationshipList
    int getSourceUserId() -> getSourceUserId
    int getTargetUserId() -> getTargetUserId
    boolean isSourceBlockingTarget() -> isSourceBlockingTarget
    java.lang.String getSourceUserScreenName() -> getSourceUserScreenName
    java.lang.String getTargetUserScreenName() -> getTargetUserScreenName
    boolean isSourceFollowingTarget() -> isSourceFollowingTarget
    boolean isTargetFollowingSource() -> isTargetFollowingSource
    boolean isSourceFollowedByTarget() -> isSourceFollowedByTarget
    boolean isTargetFollowedBySource() -> isTargetFollowedBySource
    boolean isSourceNotificationsEnabled() -> isSourceNotificationsEnabled
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.ResponseList -> twitter4j.ResponseList:
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
    twitter4j.RateLimitStatus getFeatureSpecificRateLimitStatus() -> getFeatureSpecificRateLimitStatus
twitter4j.ResponseListImpl -> twitter4j.ResponseListImpl:
    twitter4j.RateLimitStatus rateLimitStatus -> rateLimitStatus
    twitter4j.RateLimitStatus featureSpecificRateLimitStatus -> featureSpecificRateLimitStatus
    long serialVersionUID -> serialVersionUID
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
    twitter4j.RateLimitStatus getFeatureSpecificRateLimitStatus() -> getFeatureSpecificRateLimitStatus
twitter4j.SavedSearch -> twitter4j.SavedSearch:
    java.util.Date getCreatedAt() -> getCreatedAt
    java.lang.String getQuery() -> getQuery
    int getPosition() -> getPosition
    java.lang.String getName() -> getName
    int getId() -> getId
twitter4j.SavedSearchJSONImpl -> twitter4j.SavedSearchJSONImpl:
    java.util.Date createdAt -> createdAt
    java.lang.String query -> query
    int position -> position
    java.lang.String name -> name
    int id -> id
    long serialVersionUID -> serialVersionUID
    twitter4j.ResponseList createSavedSearchList(twitter4j.internal.http.HttpResponse) -> createSavedSearchList
    void init(twitter4j.internal.org.json.JSONObject) -> init
    int compareTo(twitter4j.SavedSearch) -> compareTo
    java.util.Date getCreatedAt() -> getCreatedAt
    java.lang.String getQuery() -> getQuery
    int getPosition() -> getPosition
    java.lang.String getName() -> getName
    int getId() -> getId
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.SimilarPlaces -> twitter4j.SimilarPlaces:
    java.lang.String getToken() -> getToken
twitter4j.SimilarPlacesImpl -> twitter4j.SimilarPlacesImpl:
    long serialVersionUID -> serialVersionUID
    java.lang.String token -> token
    java.lang.String getToken() -> getToken
    twitter4j.SimilarPlaces createSimilarPlaces(twitter4j.internal.http.HttpResponse) -> createSimilarPlaces
    twitter4j.RateLimitStatus getFeatureSpecificRateLimitStatus() -> getFeatureSpecificRateLimitStatus
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
twitter4j.SiteStreamsAdapter -> twitter4j.SiteStreamsAdapter:
    void onStatus(int,twitter4j.Status) -> onStatus
    void onDeletionNotice(int,twitter4j.StatusDeletionNotice) -> onDeletionNotice
    void onFriendList(int,int[]) -> onFriendList
    void onFavorite(int,twitter4j.User,twitter4j.User,twitter4j.Status) -> onFavorite
    void onUnfavorite(int,twitter4j.User,twitter4j.User,twitter4j.Status) -> onUnfavorite
    void onFollow(int,twitter4j.User,twitter4j.User) -> onFollow
    void onDirectMessage(int,twitter4j.DirectMessage) -> onDirectMessage
    void onDeletionNotice(int,int,int) -> onDeletionNotice
    void onUserListSubscription(int,twitter4j.User,twitter4j.User,twitter4j.UserList) -> onUserListSubscription
    void onUserListCreation(int,twitter4j.User,twitter4j.UserList) -> onUserListCreation
    void onUserListUpdate(int,twitter4j.User,twitter4j.UserList) -> onUserListUpdate
    void onUserListDeletion(int,twitter4j.User,twitter4j.UserList) -> onUserListDeletion
    void onUserProfileUpdate(int,twitter4j.User) -> onUserProfileUpdate
    void onBlock(int,twitter4j.User,twitter4j.User) -> onBlock
    void onUnblock(int,twitter4j.User,twitter4j.User) -> onUnblock
    void onException(java.lang.Exception) -> onException
twitter4j.SiteStreamsImpl -> twitter4j.SiteStreamsImpl:
    twitter4j.SiteStreamsListener listener -> listener
    java.lang.ThreadLocal forUser -> forUser
    void next(twitter4j.StreamListener[]) -> next
    java.lang.String parseLine(java.lang.String) -> parseLine
    void onStatus(twitter4j.internal.org.json.JSONObject) -> onStatus
    void onDelete(twitter4j.internal.org.json.JSONObject) -> onDelete
    void onDirectMessage(twitter4j.internal.org.json.JSONObject) -> onDirectMessage
    void onFriends(twitter4j.internal.org.json.JSONObject) -> onFriends
    void onFavorite(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onFavorite
    void onUnfavorite(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUnfavorite
    void onFollow(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onFollow
    void onUserListSubscribed(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserListSubscribed
    void onUserListCreated(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserListCreated
    void onUserListUpdated(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserListUpdated
    void onUserListDestroyed(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserListDestroyed
    void onUserUpdate(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserUpdate
    void onBlock(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onBlock
    void onUnblock(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUnblock
    void onException(java.lang.Exception) -> onException
twitter4j.SiteStreamsImpl$1 -> twitter4j.SiteStreamsImpl$1:
    java.lang.Integer initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
twitter4j.SiteStreamsListener -> twitter4j.SiteStreamsListener:
    void onStatus(int,twitter4j.Status) -> onStatus
    void onDeletionNotice(int,twitter4j.StatusDeletionNotice) -> onDeletionNotice
    void onFriendList(int,int[]) -> onFriendList
    void onFavorite(int,twitter4j.User,twitter4j.User,twitter4j.Status) -> onFavorite
    void onUnfavorite(int,twitter4j.User,twitter4j.User,twitter4j.Status) -> onUnfavorite
    void onFollow(int,twitter4j.User,twitter4j.User) -> onFollow
    void onDirectMessage(int,twitter4j.DirectMessage) -> onDirectMessage
    void onDeletionNotice(int,int,int) -> onDeletionNotice
    void onUserListSubscription(int,twitter4j.User,twitter4j.User,twitter4j.UserList) -> onUserListSubscription
    void onUserListCreation(int,twitter4j.User,twitter4j.UserList) -> onUserListCreation
    void onUserListUpdate(int,twitter4j.User,twitter4j.UserList) -> onUserListUpdate
    void onUserListDeletion(int,twitter4j.User,twitter4j.UserList) -> onUserListDeletion
    void onUserProfileUpdate(int,twitter4j.User) -> onUserProfileUpdate
    void onBlock(int,twitter4j.User,twitter4j.User) -> onBlock
    void onUnblock(int,twitter4j.User,twitter4j.User) -> onUnblock
    void onException(java.lang.Exception) -> onException
twitter4j.Status -> twitter4j.Status:
    java.util.Date getCreatedAt() -> getCreatedAt
    long getId() -> getId
    java.lang.String getText() -> getText
    java.lang.String getSource() -> getSource
    boolean isTruncated() -> isTruncated
    long getInReplyToStatusId() -> getInReplyToStatusId
    int getInReplyToUserId() -> getInReplyToUserId
    java.lang.String getInReplyToScreenName() -> getInReplyToScreenName
    twitter4j.GeoLocation getGeoLocation() -> getGeoLocation
    twitter4j.Place getPlace() -> getPlace
    boolean isFavorited() -> isFavorited
    twitter4j.User getUser() -> getUser
    boolean isRetweet() -> isRetweet
    twitter4j.Status getRetweetedStatus() -> getRetweetedStatus
    java.lang.String[] getContributors() -> getContributors
    long getRetweetCount() -> getRetweetCount
    boolean isRetweetedByMe() -> isRetweetedByMe
    twitter4j.User[] getUserMentions() -> getUserMentions
    twitter4j.UserMentionEntity[] getUserMentionEntities() -> getUserMentionEntities
    java.net.URL[] getURLs() -> getURLs
    twitter4j.URLEntity[] getURLEntities() -> getURLEntities
    java.lang.String[] getHashtags() -> getHashtags
    twitter4j.HashtagEntity[] getHashtagEntities() -> getHashtagEntities
    twitter4j.Annotations getAnnotations() -> getAnnotations
twitter4j.StatusAdapter -> twitter4j.StatusAdapter:
    void onStatus(twitter4j.Status) -> onStatus
    void onDeletionNotice(twitter4j.StatusDeletionNotice) -> onDeletionNotice
    void onTrackLimitationNotice(int) -> onTrackLimitationNotice
    void onScrubGeo(int,long) -> onScrubGeo
    void onException(java.lang.Exception) -> onException
twitter4j.StatusDeletionNotice -> twitter4j.StatusDeletionNotice:
    long getStatusId() -> getStatusId
    int getUserId() -> getUserId
twitter4j.StatusDeletionNoticeImpl -> twitter4j.StatusDeletionNoticeImpl:
    long statusId -> statusId
    int userId -> userId
    long serialVersionUID -> serialVersionUID
    long getStatusId() -> getStatusId
    int getUserId() -> getUserId
    int compareTo(twitter4j.StatusDeletionNotice) -> compareTo
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.StatusJSONImpl -> twitter4j.StatusJSONImpl:
    twitter4j.internal.logging.Logger logger -> logger
    java.util.Date createdAt -> createdAt
    long id -> id
    java.lang.String text -> text
    java.lang.String source -> source
    boolean isTruncated -> isTruncated
    long inReplyToStatusId -> inReplyToStatusId
    int inReplyToUserId -> inReplyToUserId
    boolean isFavorited -> isFavorited
    java.lang.String inReplyToScreenName -> inReplyToScreenName
    twitter4j.GeoLocation geoLocation -> geoLocation
    twitter4j.Place place -> place
    long retweetCount -> retweetCount
    boolean wasRetweetedByMe -> wasRetweetedByMe
    java.lang.String[] contributors -> contributors
    twitter4j.Annotations annotations -> annotations
    twitter4j.Status retweetedStatus -> retweetedStatus
    twitter4j.User[] userMentions -> userMentions
    twitter4j.UserMentionEntity[] userMentionEntities -> userMentionEntities
    java.net.URL[] urls -> urls
    twitter4j.URLEntity[] urlEntities -> urlEntities
    java.lang.String[] hashtags -> hashtags
    twitter4j.HashtagEntity[] hashtagEntities -> hashtagEntities
    long serialVersionUID -> serialVersionUID
    twitter4j.User user -> user
    java.lang.Class class$twitter4j$StatusJSONImpl -> class$twitter4j$StatusJSONImpl
    void init(twitter4j.internal.org.json.JSONObject) -> init
    int compareTo(twitter4j.Status) -> compareTo
    java.util.Date getCreatedAt() -> getCreatedAt
    long getId() -> getId
    java.lang.String getText() -> getText
    java.lang.String getSource() -> getSource
    boolean isTruncated() -> isTruncated
    long getInReplyToStatusId() -> getInReplyToStatusId
    int getInReplyToUserId() -> getInReplyToUserId
    java.lang.String getInReplyToScreenName() -> getInReplyToScreenName
    twitter4j.GeoLocation getGeoLocation() -> getGeoLocation
    twitter4j.Place getPlace() -> getPlace
    java.lang.String[] getContributors() -> getContributors
    twitter4j.Annotations getAnnotations() -> getAnnotations
    boolean isFavorited() -> isFavorited
    twitter4j.User getUser() -> getUser
    boolean isRetweet() -> isRetweet
    twitter4j.Status getRetweetedStatus() -> getRetweetedStatus
    long getRetweetCount() -> getRetweetCount
    boolean isRetweetedByMe() -> isRetweetedByMe
    twitter4j.User[] getUserMentions() -> getUserMentions
    twitter4j.UserMentionEntity[] getUserMentionEntities() -> getUserMentionEntities
    java.net.URL[] getURLs() -> getURLs
    twitter4j.URLEntity[] getURLEntities() -> getURLEntities
    java.lang.String[] getHashtags() -> getHashtags
    twitter4j.HashtagEntity[] getHashtagEntities() -> getHashtagEntities
    twitter4j.ResponseList createStatusList(twitter4j.internal.http.HttpResponse) -> createStatusList
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.StatusListener -> twitter4j.StatusListener:
    void onStatus(twitter4j.Status) -> onStatus
    void onDeletionNotice(twitter4j.StatusDeletionNotice) -> onDeletionNotice
    void onTrackLimitationNotice(int) -> onTrackLimitationNotice
    void onScrubGeo(int,long) -> onScrubGeo
twitter4j.StatusStream -> twitter4j.StatusStream:
    void next(twitter4j.StatusListener) -> next
    void close() -> close
twitter4j.StatusStreamImpl -> twitter4j.StatusStreamImpl:
    java.lang.String line -> line
    twitter4j.StreamListener[] listeners -> listeners
    void next(twitter4j.StatusListener) -> next
    void next(twitter4j.StreamListener[]) -> next
    java.lang.String parseLine(java.lang.String) -> parseLine
    void onStatus(twitter4j.internal.org.json.JSONObject) -> onStatus
    void onDelete(twitter4j.internal.org.json.JSONObject) -> onDelete
    void onLimit(twitter4j.internal.org.json.JSONObject) -> onLimit
    void onScrubGeo(twitter4j.internal.org.json.JSONObject) -> onScrubGeo
    void onException(java.lang.Exception) -> onException
twitter4j.StatusUpdate -> twitter4j.StatusUpdate:
    java.lang.String status -> status
    long inReplyToStatusId -> inReplyToStatusId
    twitter4j.GeoLocation location -> location
    java.lang.String placeId -> placeId
    boolean displayCoordinates -> displayCoordinates
    twitter4j.Annotations annotations -> annotations
    long serialVersionUID -> serialVersionUID
    java.lang.String getStatus() -> getStatus
    long getInReplyToStatusId() -> getInReplyToStatusId
    void setInReplyToStatusId(long) -> setInReplyToStatusId
    twitter4j.StatusUpdate inReplyToStatusId(long) -> inReplyToStatusId
    twitter4j.GeoLocation getLocation() -> getLocation
    void setLocation(twitter4j.GeoLocation) -> setLocation
    twitter4j.StatusUpdate location(twitter4j.GeoLocation) -> location
    java.lang.String getPlaceId() -> getPlaceId
    void setPlaceId(java.lang.String) -> setPlaceId
    twitter4j.StatusUpdate placeId(java.lang.String) -> placeId
    boolean isDisplayCoordinates() -> isDisplayCoordinates
    void setDisplayCoordinates(boolean) -> setDisplayCoordinates
    twitter4j.StatusUpdate displayCoordinates(boolean) -> displayCoordinates
    twitter4j.Annotations getAnnotations() -> getAnnotations
    void setAnnotations(twitter4j.Annotations) -> setAnnotations
    twitter4j.StatusUpdate annotations(twitter4j.Annotations) -> annotations
    void addAnnotation(twitter4j.Annotation) -> addAnnotation
    twitter4j.StatusUpdate annotation(twitter4j.Annotation) -> annotation
    twitter4j.internal.http.HttpParameter[] asHttpParameterArray() -> asHttpParameterArray
    void appendParameter(java.lang.String,java.lang.String,java.util.List) -> appendParameter
    void appendParameter(java.lang.String,double,java.util.List) -> appendParameter
    void appendParameter(java.lang.String,long,java.util.List) -> appendParameter
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.StreamImplementation -> twitter4j.StreamImplementation:
    void next(twitter4j.StreamListener[]) -> next
    void close() -> close
    void onException(java.lang.Exception) -> onException
twitter4j.StreamListener -> twitter4j.StreamListener:
    void onException(java.lang.Exception) -> onException
twitter4j.StreamingReadTimeoutConfiguration -> twitter4j.StreamingReadTimeoutConfiguration:
    twitter4j.conf.Configuration nestedConf -> nestedConf
    java.lang.String getHttpProxyHost() -> getHttpProxyHost
    int getHttpProxyPort() -> getHttpProxyPort
    java.lang.String getHttpProxyUser() -> getHttpProxyUser
    java.lang.String getHttpProxyPassword() -> getHttpProxyPassword
    int getHttpConnectionTimeout() -> getHttpConnectionTimeout
    int getHttpReadTimeout() -> getHttpReadTimeout
    int getHttpRetryCount() -> getHttpRetryCount
    int getHttpRetryIntervalSeconds() -> getHttpRetryIntervalSeconds
    int getHttpMaxTotalConnections() -> getHttpMaxTotalConnections
    int getHttpDefaultMaxPerRoute() -> getHttpDefaultMaxPerRoute
    java.util.Map getRequestHeaders() -> getRequestHeaders
twitter4j.Trend -> twitter4j.Trend:
    java.lang.String getName() -> getName
    java.lang.String getUrl() -> getUrl
    java.lang.String getQuery() -> getQuery
twitter4j.TrendJSONImpl -> twitter4j.TrendJSONImpl:
    java.lang.String name -> name
    java.lang.String url -> url
    java.lang.String query -> query
    long serialVersionUID -> serialVersionUID
    java.lang.String getName() -> getName
    java.lang.String getUrl() -> getUrl
    java.lang.String getQuery() -> getQuery
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.Trends -> twitter4j.Trends:
    twitter4j.Trend[] getTrends() -> getTrends
    twitter4j.Location getLocation() -> getLocation
    java.util.Date getAsOf() -> getAsOf
    java.util.Date getTrendAt() -> getTrendAt
twitter4j.TrendsJSONImpl -> twitter4j.TrendsJSONImpl:
    java.util.Date asOf -> asOf
    java.util.Date trendAt -> trendAt
    twitter4j.Trend[] trends -> trends
    twitter4j.Location location -> location
    long serialVersionUID -> serialVersionUID
    int compareTo(twitter4j.Trends) -> compareTo
    void init(java.lang.String) -> init
    java.util.List createTrendsList(twitter4j.internal.http.HttpResponse) -> createTrendsList
    twitter4j.Location extractLocation(twitter4j.internal.org.json.JSONObject) -> extractLocation
    java.util.Date parseTrendsDate(java.lang.String) -> parseTrendsDate
    twitter4j.Trend[] jsonArrayToTrendArray(twitter4j.internal.org.json.JSONArray) -> jsonArrayToTrendArray
    twitter4j.Trend[] getTrends() -> getTrends
    twitter4j.Location getLocation() -> getLocation
    java.util.Date getAsOf() -> getAsOf
    java.util.Date getTrendAt() -> getTrendAt
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.Tweet -> twitter4j.Tweet:
    java.lang.String getText() -> getText
    int getToUserId() -> getToUserId
    java.lang.String getToUser() -> getToUser
    java.lang.String getFromUser() -> getFromUser
    long getId() -> getId
    int getFromUserId() -> getFromUserId
    java.lang.String getIsoLanguageCode() -> getIsoLanguageCode
    java.lang.String getSource() -> getSource
    java.lang.String getProfileImageUrl() -> getProfileImageUrl
    java.util.Date getCreatedAt() -> getCreatedAt
    twitter4j.GeoLocation getGeoLocation() -> getGeoLocation
    java.lang.String getLocation() -> getLocation
    twitter4j.Annotations getAnnotations() -> getAnnotations
twitter4j.TweetJSONImpl -> twitter4j.TweetJSONImpl:
    java.lang.String text -> text
    int toUserId -> toUserId
    java.lang.String toUser -> toUser
    java.lang.String fromUser -> fromUser
    long id -> id
    int fromUserId -> fromUserId
    java.lang.String isoLanguageCode -> isoLanguageCode
    java.lang.String source -> source
    java.lang.String profileImageUrl -> profileImageUrl
    java.util.Date createdAt -> createdAt
    java.lang.String location -> location
    twitter4j.GeoLocation geoLocation -> geoLocation
    twitter4j.Annotations annotations -> annotations
    long serialVersionUID -> serialVersionUID
    int compareTo(twitter4j.Tweet) -> compareTo
    java.lang.String getText() -> getText
    int getToUserId() -> getToUserId
    java.lang.String getToUser() -> getToUser
    java.lang.String getFromUser() -> getFromUser
    long getId() -> getId
    int getFromUserId() -> getFromUserId
    java.lang.String getIsoLanguageCode() -> getIsoLanguageCode
    java.lang.String getSource() -> getSource
    java.lang.String getProfileImageUrl() -> getProfileImageUrl
    java.util.Date getCreatedAt() -> getCreatedAt
    twitter4j.GeoLocation getGeoLocation() -> getGeoLocation
    java.lang.String getLocation() -> getLocation
    twitter4j.Annotations getAnnotations() -> getAnnotations
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.Twitter -> twitter4j.Twitter:
    long serialVersionUID -> serialVersionUID
    twitter4j.internal.http.HttpParameter INCLUDE_ENTITIES -> INCLUDE_ENTITIES
    twitter4j.internal.http.HttpParameter INCLUDE_RTS -> INCLUDE_RTS
    twitter4j.internal.http.HttpParameter[] mergeParameters(twitter4j.internal.http.HttpParameter[],twitter4j.internal.http.HttpParameter[]) -> mergeParameters
    twitter4j.internal.http.HttpParameter[] mergeParameters(twitter4j.internal.http.HttpParameter[],twitter4j.internal.http.HttpParameter) -> mergeParameters
    java.lang.String getScreenName() -> getScreenName
    int getId() -> getId
    twitter4j.QueryResult search(twitter4j.Query) -> search
    twitter4j.Trends getTrends() -> getTrends
    twitter4j.Trends getCurrentTrends() -> getCurrentTrends
    twitter4j.Trends getCurrentTrends(boolean) -> getCurrentTrends
    java.util.List getDailyTrends() -> getDailyTrends
    java.util.List getDailyTrends(java.util.Date,boolean) -> getDailyTrends
    java.lang.String toDateStr(java.util.Date) -> toDateStr
    java.util.List getWeeklyTrends() -> getWeeklyTrends
    java.util.List getWeeklyTrends(java.util.Date,boolean) -> getWeeklyTrends
    twitter4j.ResponseList getPublicTimeline() -> getPublicTimeline
    twitter4j.ResponseList getHomeTimeline() -> getHomeTimeline
    twitter4j.ResponseList getHomeTimeline(twitter4j.Paging) -> getHomeTimeline
    twitter4j.ResponseList getFriendsTimeline() -> getFriendsTimeline
    twitter4j.ResponseList getFriendsTimeline(twitter4j.Paging) -> getFriendsTimeline
    twitter4j.ResponseList getUserTimeline(java.lang.String,twitter4j.Paging) -> getUserTimeline
    twitter4j.ResponseList getUserTimeline(int,twitter4j.Paging) -> getUserTimeline
    twitter4j.ResponseList getUserTimeline(java.lang.String) -> getUserTimeline
    twitter4j.ResponseList getUserTimeline(int) -> getUserTimeline
    twitter4j.ResponseList getUserTimeline() -> getUserTimeline
    twitter4j.ResponseList getUserTimeline(twitter4j.Paging) -> getUserTimeline
    twitter4j.ResponseList getMentions() -> getMentions
    twitter4j.ResponseList getMentions(twitter4j.Paging) -> getMentions
    twitter4j.ResponseList getRetweetedByMe() -> getRetweetedByMe
    twitter4j.ResponseList getRetweetedByMe(twitter4j.Paging) -> getRetweetedByMe
    twitter4j.ResponseList getRetweetedToMe() -> getRetweetedToMe
    twitter4j.ResponseList getRetweetedToMe(twitter4j.Paging) -> getRetweetedToMe
    twitter4j.ResponseList getRetweetsOfMe() -> getRetweetsOfMe
    twitter4j.ResponseList getRetweetsOfMe(twitter4j.Paging) -> getRetweetsOfMe
    twitter4j.ResponseList getRetweetedToUser(java.lang.String,twitter4j.Paging) -> getRetweetedToUser
    twitter4j.ResponseList getRetweetedToUser(int,twitter4j.Paging) -> getRetweetedToUser
    twitter4j.ResponseList getRetweetedByUser(java.lang.String,twitter4j.Paging) -> getRetweetedByUser
    twitter4j.ResponseList getRetweetedByUser(int,twitter4j.Paging) -> getRetweetedByUser
    twitter4j.ResponseList getRetweetedBy(long) -> getRetweetedBy
    twitter4j.ResponseList getRetweetedBy(long,twitter4j.Paging) -> getRetweetedBy
    twitter4j.IDs getRetweetedByIDs(long) -> getRetweetedByIDs
    twitter4j.IDs getRetweetedByIDs(long,twitter4j.Paging) -> getRetweetedByIDs
    twitter4j.Status showStatus(long) -> showStatus
    twitter4j.Status updateStatus(java.lang.String) -> updateStatus
    twitter4j.Status updateStatus(java.lang.String,twitter4j.GeoLocation) -> updateStatus
    twitter4j.Status updateStatus(java.lang.String,long) -> updateStatus
    twitter4j.Status updateStatus(java.lang.String,long,twitter4j.GeoLocation) -> updateStatus
    twitter4j.Status updateStatus(twitter4j.StatusUpdate) -> updateStatus
    twitter4j.Status destroyStatus(long) -> destroyStatus
    twitter4j.Status retweetStatus(long) -> retweetStatus
    twitter4j.ResponseList getRetweets(long) -> getRetweets
    twitter4j.User showUser(java.lang.String) -> showUser
    twitter4j.User showUser(int) -> showUser
    twitter4j.ResponseList lookupUsers(java.lang.String[]) -> lookupUsers
    twitter4j.ResponseList lookupUsers(int[]) -> lookupUsers
    twitter4j.ResponseList searchUsers(java.lang.String,int) -> searchUsers
    twitter4j.ResponseList getSuggestedUserCategories() -> getSuggestedUserCategories
    twitter4j.ResponseList getUserSuggestions(java.lang.String) -> getUserSuggestions
    twitter4j.ResponseList getMemberSuggestions(java.lang.String) -> getMemberSuggestions
    twitter4j.ProfileImage getProfileImage(java.lang.String,twitter4j.ProfileImage$ImageSize) -> getProfileImage
    twitter4j.PagableResponseList getFriendsStatuses() -> getFriendsStatuses
    twitter4j.PagableResponseList getFriendsStatuses(long) -> getFriendsStatuses
    twitter4j.PagableResponseList getFriendsStatuses(java.lang.String) -> getFriendsStatuses
    twitter4j.PagableResponseList getFriendsStatuses(int) -> getFriendsStatuses
    twitter4j.PagableResponseList getFriendsStatuses(java.lang.String,long) -> getFriendsStatuses
    twitter4j.PagableResponseList getFriendsStatuses(int,long) -> getFriendsStatuses
    twitter4j.PagableResponseList getFollowersStatuses() -> getFollowersStatuses
    twitter4j.PagableResponseList getFollowersStatuses(long) -> getFollowersStatuses
    twitter4j.PagableResponseList getFollowersStatuses(java.lang.String) -> getFollowersStatuses
    twitter4j.PagableResponseList getFollowersStatuses(int) -> getFollowersStatuses
    twitter4j.PagableResponseList getFollowersStatuses(java.lang.String,long) -> getFollowersStatuses
    twitter4j.PagableResponseList getFollowersStatuses(int,long) -> getFollowersStatuses
    twitter4j.UserList createUserList(java.lang.String,boolean,java.lang.String) -> createUserList
    twitter4j.UserList updateUserList(int,java.lang.String,boolean,java.lang.String) -> updateUserList
    twitter4j.PagableResponseList getUserLists(java.lang.String,long) -> getUserLists
    twitter4j.UserList showUserList(java.lang.String,int) -> showUserList
    twitter4j.UserList destroyUserList(int) -> destroyUserList
    twitter4j.ResponseList getUserListStatuses(java.lang.String,int,twitter4j.Paging) -> getUserListStatuses
    twitter4j.PagableResponseList getUserListMemberships(java.lang.String,long) -> getUserListMemberships
    twitter4j.PagableResponseList getUserListSubscriptions(java.lang.String,long) -> getUserListSubscriptions
    twitter4j.ResponseList getAllUserLists(java.lang.String) -> getAllUserLists
    twitter4j.ResponseList getAllUserLists(int) -> getAllUserLists
    twitter4j.PagableResponseList getUserListMembers(java.lang.String,int,long) -> getUserListMembers
    twitter4j.UserList addUserListMember(int,int) -> addUserListMember
    twitter4j.UserList addUserListMembers(int,int[]) -> addUserListMembers
    twitter4j.UserList addUserListMembers(int,java.lang.String[]) -> addUserListMembers
    twitter4j.UserList deleteUserListMember(int,int) -> deleteUserListMember
    twitter4j.User checkUserListMembership(java.lang.String,int,int) -> checkUserListMembership
    twitter4j.PagableResponseList getUserListSubscribers(java.lang.String,int,long) -> getUserListSubscribers
    twitter4j.UserList subscribeUserList(java.lang.String,int) -> subscribeUserList
    twitter4j.UserList unsubscribeUserList(java.lang.String,int) -> unsubscribeUserList
    twitter4j.User checkUserListSubscription(java.lang.String,int,int) -> checkUserListSubscription
    twitter4j.ResponseList getDirectMessages() -> getDirectMessages
    twitter4j.ResponseList getDirectMessages(twitter4j.Paging) -> getDirectMessages
    twitter4j.ResponseList getSentDirectMessages() -> getSentDirectMessages
    twitter4j.ResponseList getSentDirectMessages(twitter4j.Paging) -> getSentDirectMessages
    twitter4j.DirectMessage sendDirectMessage(java.lang.String,java.lang.String) -> sendDirectMessage
    twitter4j.DirectMessage sendDirectMessage(int,java.lang.String) -> sendDirectMessage
    twitter4j.DirectMessage destroyDirectMessage(long) -> destroyDirectMessage
    twitter4j.DirectMessage showDirectMessage(long) -> showDirectMessage
    twitter4j.User createFriendship(java.lang.String) -> createFriendship
    twitter4j.User createFriendship(int) -> createFriendship
    twitter4j.User createFriendship(java.lang.String,boolean) -> createFriendship
    twitter4j.User createFriendship(int,boolean) -> createFriendship
    twitter4j.User destroyFriendship(java.lang.String) -> destroyFriendship
    twitter4j.User destroyFriendship(int) -> destroyFriendship
    boolean existsFriendship(java.lang.String,java.lang.String) -> existsFriendship
    twitter4j.Relationship showFriendship(java.lang.String,java.lang.String) -> showFriendship
    twitter4j.Relationship showFriendship(int,int) -> showFriendship
    twitter4j.IDs getIncomingFriendships(long) -> getIncomingFriendships
    twitter4j.IDs getOutgoingFriendships(long) -> getOutgoingFriendships
    twitter4j.ResponseList lookupFriendships(java.lang.String[]) -> lookupFriendships
    twitter4j.ResponseList lookupFriendships(int[]) -> lookupFriendships
    twitter4j.Relationship updateFriendship(java.lang.String,boolean,boolean) -> updateFriendship
    twitter4j.Relationship updateFriendship(int,boolean,boolean) -> updateFriendship
    twitter4j.IDs getFriendsIDs() -> getFriendsIDs
    twitter4j.IDs getFriendsIDs(long) -> getFriendsIDs
    twitter4j.IDs getFriendsIDs(int) -> getFriendsIDs
    twitter4j.IDs getFriendsIDs(int,long) -> getFriendsIDs
    twitter4j.IDs getFriendsIDs(java.lang.String) -> getFriendsIDs
    twitter4j.IDs getFriendsIDs(java.lang.String,long) -> getFriendsIDs
    twitter4j.IDs getFollowersIDs() -> getFollowersIDs
    twitter4j.IDs getFollowersIDs(long) -> getFollowersIDs
    twitter4j.IDs getFollowersIDs(int) -> getFollowersIDs
    twitter4j.IDs getFollowersIDs(int,long) -> getFollowersIDs
    twitter4j.IDs getFollowersIDs(java.lang.String) -> getFollowersIDs
    twitter4j.IDs getFollowersIDs(java.lang.String,long) -> getFollowersIDs
    twitter4j.User verifyCredentials() -> verifyCredentials
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
    twitter4j.User updateProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateProfile
    twitter4j.User updateProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateProfile
    twitter4j.AccountTotals getAccountTotals() -> getAccountTotals
    twitter4j.AccountSettings getAccountSettings() -> getAccountSettings
    twitter4j.User updateProfileColors(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateProfileColors
    void addParameterToList(java.util.List,java.lang.String,java.lang.String) -> addParameterToList
    twitter4j.User updateProfileImage(java.io.File) -> updateProfileImage
    twitter4j.User updateProfileBackgroundImage(java.io.File,boolean) -> updateProfileBackgroundImage
    void checkFileValidity(java.io.File) -> checkFileValidity
    twitter4j.ResponseList getFavorites() -> getFavorites
    twitter4j.ResponseList getFavorites(int) -> getFavorites
    twitter4j.ResponseList getFavorites(java.lang.String) -> getFavorites
    twitter4j.ResponseList getFavorites(java.lang.String,int) -> getFavorites
    twitter4j.Status createFavorite(long) -> createFavorite
    twitter4j.Status destroyFavorite(long) -> destroyFavorite
    twitter4j.User enableNotification(java.lang.String) -> enableNotification
    twitter4j.User enableNotification(int) -> enableNotification
    twitter4j.User disableNotification(java.lang.String) -> disableNotification
    twitter4j.User disableNotification(int) -> disableNotification
    twitter4j.User createBlock(java.lang.String) -> createBlock
    twitter4j.User createBlock(int) -> createBlock
    twitter4j.User destroyBlock(java.lang.String) -> destroyBlock
    twitter4j.User destroyBlock(int) -> destroyBlock
    boolean existsBlock(java.lang.String) -> existsBlock
    boolean existsBlock(int) -> existsBlock
    twitter4j.ResponseList getBlockingUsers() -> getBlockingUsers
    twitter4j.ResponseList getBlockingUsers(int) -> getBlockingUsers
    twitter4j.IDs getBlockingUsersIDs() -> getBlockingUsersIDs
    twitter4j.User reportSpam(int) -> reportSpam
    twitter4j.User reportSpam(java.lang.String) -> reportSpam
    java.util.List getSavedSearches() -> getSavedSearches
    twitter4j.SavedSearch showSavedSearch(int) -> showSavedSearch
    twitter4j.SavedSearch createSavedSearch(java.lang.String) -> createSavedSearch
    twitter4j.SavedSearch destroySavedSearch(int) -> destroySavedSearch
    twitter4j.ResponseList getAvailableTrends() -> getAvailableTrends
    twitter4j.ResponseList getAvailableTrends(twitter4j.GeoLocation) -> getAvailableTrends
    twitter4j.Trends getLocationTrends(int) -> getLocationTrends
    twitter4j.ResponseList searchPlaces(twitter4j.GeoQuery) -> searchPlaces
    twitter4j.SimilarPlaces getSimilarPlaces(twitter4j.GeoLocation,java.lang.String,java.lang.String,java.lang.String) -> getSimilarPlaces
    twitter4j.ResponseList getNearbyPlaces(twitter4j.GeoQuery) -> getNearbyPlaces
    twitter4j.ResponseList reverseGeoCode(twitter4j.GeoQuery) -> reverseGeoCode
    twitter4j.Place getGeoDetails(java.lang.String) -> getGeoDetails
    twitter4j.Place createPlace(java.lang.String,java.lang.String,java.lang.String,twitter4j.GeoLocation,java.lang.String) -> createPlace
    java.lang.String getTermsOfService() -> getTermsOfService
    java.lang.String getPrivacyPolicy() -> getPrivacyPolicy
    twitter4j.RelatedResults getRelatedResults(long) -> getRelatedResults
    boolean test() -> test
    java.lang.String toCommaSeparatedString(java.lang.String[]) -> toCommaSeparatedString
    java.lang.String toCommaSeparatedString(int[]) -> toCommaSeparatedString
    java.lang.String toString() -> toString
    void setOAuthConsumer(java.lang.String,java.lang.String) -> setOAuthConsumer
    boolean isOAuthEnabled() -> isOAuthEnabled
    void setOAuthAccessToken(java.lang.String,java.lang.String) -> setOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String,java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> getOAuthAccessToken
    void setOAuthAccessToken(twitter4j.http.AccessToken) -> setOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(twitter4j.http.RequestToken,java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(twitter4j.http.RequestToken) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken() -> getOAuthAccessToken
    twitter4j.http.RequestToken getOAuthRequestToken(java.lang.String) -> getOAuthRequestToken
    twitter4j.http.RequestToken getOAuthRequestToken() -> getOAuthRequestToken
    void httpResponseReceived(twitter4j.internal.http.HttpResponseEvent) -> httpResponseReceived
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void setRateLimitStatusListener(twitter4j.RateLimitStatusListener) -> setRateLimitStatusListener
    void shutdown() -> shutdown
    twitter4j.conf.Configuration getConfiguration() -> getConfiguration
twitter4j.TwitterAdapter -> twitter4j.TwitterAdapter:
    void searched(twitter4j.QueryResult) -> searched
    void gotTrends(twitter4j.Trends) -> gotTrends
    void gotCurrentTrends(twitter4j.Trends) -> gotCurrentTrends
    void gotDailyTrends(java.util.List) -> gotDailyTrends
    void gotWeeklyTrends(java.util.List) -> gotWeeklyTrends
    void gotPublicTimeline(twitter4j.ResponseList) -> gotPublicTimeline
    void gotHomeTimeline(twitter4j.ResponseList) -> gotHomeTimeline
    void gotFriendsTimeline(twitter4j.ResponseList) -> gotFriendsTimeline
    void gotUserTimeline(twitter4j.ResponseList) -> gotUserTimeline
    void gotMentions(twitter4j.ResponseList) -> gotMentions
    void gotRetweetedByMe(twitter4j.ResponseList) -> gotRetweetedByMe
    void gotRetweetedToMe(twitter4j.ResponseList) -> gotRetweetedToMe
    void gotRetweetsOfMe(twitter4j.ResponseList) -> gotRetweetsOfMe
    void gotRetweetedByUser(twitter4j.ResponseList) -> gotRetweetedByUser
    void gotRetweetedToUser(twitter4j.ResponseList) -> gotRetweetedToUser
    void gotShowStatus(twitter4j.Status) -> gotShowStatus
    void updatedStatus(twitter4j.Status) -> updatedStatus
    void destroyedStatus(twitter4j.Status) -> destroyedStatus
    void retweetedStatus(twitter4j.Status) -> retweetedStatus
    void gotRetweets(twitter4j.ResponseList) -> gotRetweets
    void gotRetweetedBy(twitter4j.ResponseList) -> gotRetweetedBy
    void gotRetweetedByIDs(twitter4j.IDs) -> gotRetweetedByIDs
    void gotUserDetail(twitter4j.User) -> gotUserDetail
    void lookedupUsers(twitter4j.ResponseList) -> lookedupUsers
    void searchedUser(twitter4j.ResponseList) -> searchedUser
    void gotSuggestedUserCategories(twitter4j.ResponseList) -> gotSuggestedUserCategories
    void gotUserSuggestions(twitter4j.ResponseList) -> gotUserSuggestions
    void gotMemberSuggestions(twitter4j.ResponseList) -> gotMemberSuggestions
    void gotProfileImage(twitter4j.ProfileImage) -> gotProfileImage
    void gotFriendsStatuses(twitter4j.PagableResponseList) -> gotFriendsStatuses
    void gotFollowersStatuses(twitter4j.PagableResponseList) -> gotFollowersStatuses
    void createdUserList(twitter4j.UserList) -> createdUserList
    void updatedUserList(twitter4j.UserList) -> updatedUserList
    void gotUserLists(twitter4j.PagableResponseList) -> gotUserLists
    void gotShowUserList(twitter4j.UserList) -> gotShowUserList
    void destroyedUserList(twitter4j.UserList) -> destroyedUserList
    void gotUserListStatuses(twitter4j.ResponseList) -> gotUserListStatuses
    void gotUserListMemberships(twitter4j.PagableResponseList) -> gotUserListMemberships
    void gotUserListSubscriptions(twitter4j.PagableResponseList) -> gotUserListSubscriptions
    void gotAllUserLists(twitter4j.ResponseList) -> gotAllUserLists
    void gotUserListMembers(twitter4j.PagableResponseList) -> gotUserListMembers
    void addedUserListMember(twitter4j.UserList) -> addedUserListMember
    void addedUserListMembers(twitter4j.UserList) -> addedUserListMembers
    void deletedUserListMember(twitter4j.UserList) -> deletedUserListMember
    void checkedUserListMembership(twitter4j.User) -> checkedUserListMembership
    void gotUserListSubscribers(twitter4j.PagableResponseList) -> gotUserListSubscribers
    void subscribedUserList(twitter4j.UserList) -> subscribedUserList
    void unsubscribedUserList(twitter4j.UserList) -> unsubscribedUserList
    void checkedUserListSubscription(twitter4j.User) -> checkedUserListSubscription
    void gotDirectMessages(twitter4j.ResponseList) -> gotDirectMessages
    void gotSentDirectMessages(twitter4j.ResponseList) -> gotSentDirectMessages
    void sentDirectMessage(twitter4j.DirectMessage) -> sentDirectMessage
    void destroyedDirectMessage(twitter4j.DirectMessage) -> destroyedDirectMessage
    void gotDirectMessage(twitter4j.DirectMessage) -> gotDirectMessage
    void createdFriendship(twitter4j.User) -> createdFriendship
    void destroyedFriendship(twitter4j.User) -> destroyedFriendship
    void gotExistsFriendship(boolean) -> gotExistsFriendship
    void gotShowFriendship(twitter4j.Relationship) -> gotShowFriendship
    void gotIncomingFriendships(twitter4j.IDs) -> gotIncomingFriendships
    void gotOutgoingFriendships(twitter4j.IDs) -> gotOutgoingFriendships
    void lookedUpFriendships(twitter4j.ResponseList) -> lookedUpFriendships
    void updatedFriendship(twitter4j.Relationship) -> updatedFriendship
    void gotFriendsIDs(twitter4j.IDs) -> gotFriendsIDs
    void gotFollowersIDs(twitter4j.IDs) -> gotFollowersIDs
    void verifiedCredentials(twitter4j.User) -> verifiedCredentials
    void gotRateLimitStatus(twitter4j.RateLimitStatus) -> gotRateLimitStatus
    void updatedProfileColors(twitter4j.User) -> updatedProfileColors
    void gotAccountTotals(twitter4j.AccountTotals) -> gotAccountTotals
    void gotAccountSettings(twitter4j.AccountSettings) -> gotAccountSettings
    void updatedProfileImage(twitter4j.User) -> updatedProfileImage
    void updatedProfileBackgroundImage(twitter4j.User) -> updatedProfileBackgroundImage
    void updatedProfile(twitter4j.User) -> updatedProfile
    void gotFavorites(twitter4j.ResponseList) -> gotFavorites
    void createdFavorite(twitter4j.Status) -> createdFavorite
    void destroyedFavorite(twitter4j.Status) -> destroyedFavorite
    void enabledNotification(twitter4j.User) -> enabledNotification
    void disabledNotification(twitter4j.User) -> disabledNotification
    void createdBlock(twitter4j.User) -> createdBlock
    void destroyedBlock(twitter4j.User) -> destroyedBlock
    void gotExistsBlock(boolean) -> gotExistsBlock
    void gotBlockingUsers(twitter4j.ResponseList) -> gotBlockingUsers
    void gotBlockingUsersIDs(twitter4j.IDs) -> gotBlockingUsersIDs
    void reportedSpam(twitter4j.User) -> reportedSpam
    void gotAvailableTrends(twitter4j.ResponseList) -> gotAvailableTrends
    void gotLocationTrends(twitter4j.Trends) -> gotLocationTrends
    void searchedPlaces(twitter4j.ResponseList) -> searchedPlaces
    void gotSimilarPlaces(twitter4j.SimilarPlaces) -> gotSimilarPlaces
    void gotNearByPlaces(twitter4j.ResponseList) -> gotNearByPlaces
    void gotReverseGeoCode(twitter4j.ResponseList) -> gotReverseGeoCode
    void gotGeoDetails(twitter4j.Place) -> gotGeoDetails
    void createdPlace(twitter4j.Place) -> createdPlace
    void gotTermsOfService(java.lang.String) -> gotTermsOfService
    void gotPrivacyPolicy(java.lang.String) -> gotPrivacyPolicy
    void gotRelatedResults(twitter4j.RelatedResults) -> gotRelatedResults
    void tested(boolean) -> tested
    void onException(twitter4j.TwitterException,twitter4j.TwitterMethod) -> onException
twitter4j.TwitterBase -> twitter4j.TwitterBase:
    twitter4j.conf.Configuration conf -> conf
    twitter4j.http.Authorization auth -> auth
    long serialVersionUID -> serialVersionUID
    void initBasicAuthorization(java.lang.String,java.lang.String) -> initBasicAuthorization
    boolean isBasicAuthEnabled() -> isBasicAuthEnabled
    void ensureAuthorizationEnabled() -> ensureAuthorizationEnabled
    void ensureOAuthEnabled() -> ensureOAuthEnabled
    twitter4j.http.Authorization getAuthorization() -> getAuthorization
    boolean equals(java.lang.Object) -> equals
    twitter4j.conf.Configuration getConfiguration() -> getConfiguration
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.TwitterException -> twitter4j.TwitterException:
    int statusCode -> statusCode
    int retryAfter -> retryAfter
    twitter4j.RateLimitStatus rateLimitStatus -> rateLimitStatus
    twitter4j.RateLimitStatus featureSpecificRateLimitStatus -> featureSpecificRateLimitStatus
    long serialVersionUID -> serialVersionUID
    java.util.Map responseHeaderFields -> responseHeaderFields
    java.lang.String[] FILTER -> FILTER
    boolean nested -> nested
    java.lang.String decode(java.lang.String) -> decode
    int getStatusCode() -> getStatusCode
    java.lang.String getResponseHeader(java.lang.String) -> getResponseHeader
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
    twitter4j.RateLimitStatus getFeatureSpecificRateLimitStatus() -> getFeatureSpecificRateLimitStatus
    int getRetryAfter() -> getRetryAfter
    boolean isCausedByNetworkIssue() -> isCausedByNetworkIssue
    boolean exceededRateLimitation() -> exceededRateLimitation
    boolean resourceNotFound() -> resourceNotFound
    java.lang.String getExceptionCode() -> getExceptionCode
    void setNested() -> setNested
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String getCause(twitter4j.internal.http.HttpResponse) -> getCause
twitter4j.TwitterFactory -> twitter4j.TwitterFactory:
    long serialVersionUID -> serialVersionUID
    twitter4j.conf.Configuration conf -> conf
    twitter4j.Twitter getInstance() -> getInstance
    twitter4j.Twitter getInstance(twitter4j.http.AccessToken) -> getInstance
    twitter4j.Twitter getInstance(java.lang.String,java.lang.String) -> getInstance
    twitter4j.Twitter getInstance(twitter4j.http.Authorization) -> getInstance
    twitter4j.Twitter getOAuthAuthorizedInstance(java.lang.String,java.lang.String) -> getOAuthAuthorizedInstance
    twitter4j.Twitter getOAuthAuthorizedInstance(java.lang.String,java.lang.String,twitter4j.http.AccessToken) -> getOAuthAuthorizedInstance
    twitter4j.Twitter getOAuthAuthorizedInstance(twitter4j.http.AccessToken) -> getOAuthAuthorizedInstance
    twitter4j.Twitter getInstance(twitter4j.conf.Configuration,twitter4j.http.Authorization) -> getInstance
twitter4j.TwitterListener -> twitter4j.TwitterListener:
    twitter4j.TwitterMethod SEARCH -> SEARCH
    twitter4j.TwitterMethod TRENDS -> TRENDS
    twitter4j.TwitterMethod CURRENT_TRENDS -> CURRENT_TRENDS
    twitter4j.TwitterMethod DAILY_TRENDS -> DAILY_TRENDS
    twitter4j.TwitterMethod WEEKLY_TRENDS -> WEEKLY_TRENDS
    twitter4j.TwitterMethod PUBLIC_TIMELINE -> PUBLIC_TIMELINE
    twitter4j.TwitterMethod HOME_TIMELINE -> HOME_TIMELINE
    twitter4j.TwitterMethod FRIENDS_TIMELINE -> FRIENDS_TIMELINE
    twitter4j.TwitterMethod USER_TIMELINE -> USER_TIMELINE
    twitter4j.TwitterMethod MENTIONS -> MENTIONS
    twitter4j.TwitterMethod RETWEETED_BY_ME -> RETWEETED_BY_ME
    twitter4j.TwitterMethod RETWEETED_TO_ME -> RETWEETED_TO_ME
    twitter4j.TwitterMethod RETWEETS_OF_ME -> RETWEETS_OF_ME
    twitter4j.TwitterMethod RETWEETED_BY_USER -> RETWEETED_BY_USER
    twitter4j.TwitterMethod RETWEETED_TO_USER -> RETWEETED_TO_USER
    twitter4j.TwitterMethod SHOW_STATUS -> SHOW_STATUS
    twitter4j.TwitterMethod UPDATE_STATUS -> UPDATE_STATUS
    twitter4j.TwitterMethod DESTROY_STATUS -> DESTROY_STATUS
    twitter4j.TwitterMethod RETWEET_STATUS -> RETWEET_STATUS
    twitter4j.TwitterMethod RETWEETS -> RETWEETS
    twitter4j.TwitterMethod RETWEETED_BY -> RETWEETED_BY
    twitter4j.TwitterMethod RETWEETED_BY_IDS -> RETWEETED_BY_IDS
    twitter4j.TwitterMethod SHOW_USER -> SHOW_USER
    twitter4j.TwitterMethod LOOKUP_USERS -> LOOKUP_USERS
    twitter4j.TwitterMethod SEARCH_USERS -> SEARCH_USERS
    twitter4j.TwitterMethod SUGGESTED_USER_CATEGORIES -> SUGGESTED_USER_CATEGORIES
    twitter4j.TwitterMethod USER_SUGGESTIONS -> USER_SUGGESTIONS
    twitter4j.TwitterMethod MEMBER_SUGGESTIONS -> MEMBER_SUGGESTIONS
    twitter4j.TwitterMethod PROFILE_IMAGE -> PROFILE_IMAGE
    twitter4j.TwitterMethod FRIENDS_STATUSES -> FRIENDS_STATUSES
    twitter4j.TwitterMethod FOLLOWERS_STATUSES -> FOLLOWERS_STATUSES
    twitter4j.TwitterMethod CREATE_USER_LIST -> CREATE_USER_LIST
    twitter4j.TwitterMethod UPDATE_USER_LIST -> UPDATE_USER_LIST
    twitter4j.TwitterMethod USER_LISTS -> USER_LISTS
    twitter4j.TwitterMethod SHOW_USER_LIST -> SHOW_USER_LIST
    twitter4j.TwitterMethod DSTROY_USER_LIST -> DSTROY_USER_LIST
    twitter4j.TwitterMethod USER_LIST_STATUSES -> USER_LIST_STATUSES
    twitter4j.TwitterMethod USER_LIST_MEMBERSHIPS -> USER_LIST_MEMBERSHIPS
    twitter4j.TwitterMethod USER_LIST_SUBSCRIPTIONS -> USER_LIST_SUBSCRIPTIONS
    twitter4j.TwitterMethod ALL_USER_LISTS -> ALL_USER_LISTS
    twitter4j.TwitterMethod LIST_MEMBERS -> LIST_MEMBERS
    twitter4j.TwitterMethod ADD_LIST_MEMBER -> ADD_LIST_MEMBER
    twitter4j.TwitterMethod ADD_LIST_MEMBERS -> ADD_LIST_MEMBERS
    twitter4j.TwitterMethod DELETE_LIST_MEMBER -> DELETE_LIST_MEMBER
    twitter4j.TwitterMethod CHECK_LIST_MEMBERSHIP -> CHECK_LIST_MEMBERSHIP
    twitter4j.TwitterMethod LIST_SUBSCRIBERS -> LIST_SUBSCRIBERS
    twitter4j.TwitterMethod SUBSCRIBE_LIST -> SUBSCRIBE_LIST
    twitter4j.TwitterMethod UNSUBSCRIBE_LIST -> UNSUBSCRIBE_LIST
    twitter4j.TwitterMethod CHECK_LIST_SUBSCRIPTION -> CHECK_LIST_SUBSCRIPTION
    twitter4j.TwitterMethod DIRECT_MESSAGES -> DIRECT_MESSAGES
    twitter4j.TwitterMethod SENT_DIRECT_MESSAGES -> SENT_DIRECT_MESSAGES
    twitter4j.TwitterMethod SEND_DIRECT_MESSAGE -> SEND_DIRECT_MESSAGE
    twitter4j.TwitterMethod DESTROY_DIRECT_MESSAGE -> DESTROY_DIRECT_MESSAGE
    twitter4j.TwitterMethod CREATE_FRIENDSHIP -> CREATE_FRIENDSHIP
    twitter4j.TwitterMethod DESTROY_FRIENDSHIP -> DESTROY_FRIENDSHIP
    twitter4j.TwitterMethod EXISTS_FRIENDSHIP -> EXISTS_FRIENDSHIP
    twitter4j.TwitterMethod SHOW_FRIENDSHIP -> SHOW_FRIENDSHIP
    twitter4j.TwitterMethod INCOMING_FRIENDSHIP -> INCOMING_FRIENDSHIP
    twitter4j.TwitterMethod OUTGOING_FRIENDSHIPS -> OUTGOING_FRIENDSHIPS
    twitter4j.TwitterMethod LOOKUP_FRIENDSHIPS -> LOOKUP_FRIENDSHIPS
    twitter4j.TwitterMethod UPDATE_FRIENDSHIP -> UPDATE_FRIENDSHIP
    twitter4j.TwitterMethod FRIENDS_IDS -> FRIENDS_IDS
    twitter4j.TwitterMethod FOLLOWERS_IDS -> FOLLOWERS_IDS
    twitter4j.TwitterMethod VERIFY_CREDENTIALS -> VERIFY_CREDENTIALS
    twitter4j.TwitterMethod RATE_LIMIT_STATUS -> RATE_LIMIT_STATUS
    twitter4j.TwitterMethod UPDATE_PROFILE_COLORS -> UPDATE_PROFILE_COLORS
    twitter4j.TwitterMethod UPDATE_PROFILE_IMAGE -> UPDATE_PROFILE_IMAGE
    twitter4j.TwitterMethod UPDATE_PROFILE_BACKGROUND_IMAGE -> UPDATE_PROFILE_BACKGROUND_IMAGE
    twitter4j.TwitterMethod UPDATE_PROFILE -> UPDATE_PROFILE
    twitter4j.TwitterMethod ACCOUNT_TOTALS -> ACCOUNT_TOTALS
    twitter4j.TwitterMethod ACCOUNT_SETTINGS -> ACCOUNT_SETTINGS
    twitter4j.TwitterMethod FAVORITES -> FAVORITES
    twitter4j.TwitterMethod CREATE_FAVORITE -> CREATE_FAVORITE
    twitter4j.TwitterMethod DESTROY_FAVORITE -> DESTROY_FAVORITE
    twitter4j.TwitterMethod ENABLE_NOTIFICATION -> ENABLE_NOTIFICATION
    twitter4j.TwitterMethod DISABLE_NOTIFICATION -> DISABLE_NOTIFICATION
    twitter4j.TwitterMethod CREATE_BLOCK -> CREATE_BLOCK
    twitter4j.TwitterMethod DESTROY_BLOCK -> DESTROY_BLOCK
    twitter4j.TwitterMethod EXISTS_BLOCK -> EXISTS_BLOCK
    twitter4j.TwitterMethod BLOCKING_USERS -> BLOCKING_USERS
    twitter4j.TwitterMethod BLOCKING_USERS_IDS -> BLOCKING_USERS_IDS
    twitter4j.TwitterMethod REPORT_SPAM -> REPORT_SPAM
    twitter4j.TwitterMethod AVAILABLE_TRENDS -> AVAILABLE_TRENDS
    twitter4j.TwitterMethod LOCATION_TRENDS -> LOCATION_TRENDS
    twitter4j.TwitterMethod SEARCH_PLACES -> SEARCH_PLACES
    twitter4j.TwitterMethod SIMILAR_PLACES -> SIMILAR_PLACES
    twitter4j.TwitterMethod NEAR_BY_PLACES -> NEAR_BY_PLACES
    twitter4j.TwitterMethod REVERSE_GEO_CODE -> REVERSE_GEO_CODE
    twitter4j.TwitterMethod GEO_DETAILS -> GEO_DETAILS
    twitter4j.TwitterMethod CREATE_PLACE -> CREATE_PLACE
    twitter4j.TwitterMethod TERMS_OF_SERVICE -> TERMS_OF_SERVICE
    twitter4j.TwitterMethod PRIVACY_POLICY -> PRIVACY_POLICY
    twitter4j.TwitterMethod RELATED_RESULT -> RELATED_RESULT
    twitter4j.TwitterMethod TEST -> TEST
    void searched(twitter4j.QueryResult) -> searched
    void gotTrends(twitter4j.Trends) -> gotTrends
    void gotCurrentTrends(twitter4j.Trends) -> gotCurrentTrends
    void gotDailyTrends(java.util.List) -> gotDailyTrends
    void gotWeeklyTrends(java.util.List) -> gotWeeklyTrends
    void gotPublicTimeline(twitter4j.ResponseList) -> gotPublicTimeline
    void gotHomeTimeline(twitter4j.ResponseList) -> gotHomeTimeline
    void gotFriendsTimeline(twitter4j.ResponseList) -> gotFriendsTimeline
    void gotUserTimeline(twitter4j.ResponseList) -> gotUserTimeline
    void gotMentions(twitter4j.ResponseList) -> gotMentions
    void gotRetweetedByMe(twitter4j.ResponseList) -> gotRetweetedByMe
    void gotRetweetedToMe(twitter4j.ResponseList) -> gotRetweetedToMe
    void gotRetweetsOfMe(twitter4j.ResponseList) -> gotRetweetsOfMe
    void gotRetweetedByUser(twitter4j.ResponseList) -> gotRetweetedByUser
    void gotRetweetedToUser(twitter4j.ResponseList) -> gotRetweetedToUser
    void gotShowStatus(twitter4j.Status) -> gotShowStatus
    void updatedStatus(twitter4j.Status) -> updatedStatus
    void destroyedStatus(twitter4j.Status) -> destroyedStatus
    void retweetedStatus(twitter4j.Status) -> retweetedStatus
    void gotRetweets(twitter4j.ResponseList) -> gotRetweets
    void gotRetweetedBy(twitter4j.ResponseList) -> gotRetweetedBy
    void gotRetweetedByIDs(twitter4j.IDs) -> gotRetweetedByIDs
    void gotUserDetail(twitter4j.User) -> gotUserDetail
    void lookedupUsers(twitter4j.ResponseList) -> lookedupUsers
    void searchedUser(twitter4j.ResponseList) -> searchedUser
    void gotSuggestedUserCategories(twitter4j.ResponseList) -> gotSuggestedUserCategories
    void gotUserSuggestions(twitter4j.ResponseList) -> gotUserSuggestions
    void gotMemberSuggestions(twitter4j.ResponseList) -> gotMemberSuggestions
    void gotProfileImage(twitter4j.ProfileImage) -> gotProfileImage
    void gotFriendsStatuses(twitter4j.PagableResponseList) -> gotFriendsStatuses
    void gotFollowersStatuses(twitter4j.PagableResponseList) -> gotFollowersStatuses
    void createdUserList(twitter4j.UserList) -> createdUserList
    void updatedUserList(twitter4j.UserList) -> updatedUserList
    void gotUserLists(twitter4j.PagableResponseList) -> gotUserLists
    void gotShowUserList(twitter4j.UserList) -> gotShowUserList
    void destroyedUserList(twitter4j.UserList) -> destroyedUserList
    void gotUserListStatuses(twitter4j.ResponseList) -> gotUserListStatuses
    void gotUserListMemberships(twitter4j.PagableResponseList) -> gotUserListMemberships
    void gotUserListSubscriptions(twitter4j.PagableResponseList) -> gotUserListSubscriptions
    void gotAllUserLists(twitter4j.ResponseList) -> gotAllUserLists
    void gotUserListMembers(twitter4j.PagableResponseList) -> gotUserListMembers
    void addedUserListMember(twitter4j.UserList) -> addedUserListMember
    void addedUserListMembers(twitter4j.UserList) -> addedUserListMembers
    void deletedUserListMember(twitter4j.UserList) -> deletedUserListMember
    void checkedUserListMembership(twitter4j.User) -> checkedUserListMembership
    void gotUserListSubscribers(twitter4j.PagableResponseList) -> gotUserListSubscribers
    void subscribedUserList(twitter4j.UserList) -> subscribedUserList
    void unsubscribedUserList(twitter4j.UserList) -> unsubscribedUserList
    void checkedUserListSubscription(twitter4j.User) -> checkedUserListSubscription
    void gotDirectMessages(twitter4j.ResponseList) -> gotDirectMessages
    void gotSentDirectMessages(twitter4j.ResponseList) -> gotSentDirectMessages
    void sentDirectMessage(twitter4j.DirectMessage) -> sentDirectMessage
    void gotDirectMessage(twitter4j.DirectMessage) -> gotDirectMessage
    void destroyedDirectMessage(twitter4j.DirectMessage) -> destroyedDirectMessage
    void createdFriendship(twitter4j.User) -> createdFriendship
    void destroyedFriendship(twitter4j.User) -> destroyedFriendship
    void gotExistsFriendship(boolean) -> gotExistsFriendship
    void gotShowFriendship(twitter4j.Relationship) -> gotShowFriendship
    void gotIncomingFriendships(twitter4j.IDs) -> gotIncomingFriendships
    void gotOutgoingFriendships(twitter4j.IDs) -> gotOutgoingFriendships
    void gotFriendsIDs(twitter4j.IDs) -> gotFriendsIDs
    void gotFollowersIDs(twitter4j.IDs) -> gotFollowersIDs
    void lookedUpFriendships(twitter4j.ResponseList) -> lookedUpFriendships
    void updatedFriendship(twitter4j.Relationship) -> updatedFriendship
    void verifiedCredentials(twitter4j.User) -> verifiedCredentials
    void gotRateLimitStatus(twitter4j.RateLimitStatus) -> gotRateLimitStatus
    void updatedProfileColors(twitter4j.User) -> updatedProfileColors
    void gotAccountTotals(twitter4j.AccountTotals) -> gotAccountTotals
    void gotAccountSettings(twitter4j.AccountSettings) -> gotAccountSettings
    void updatedProfileImage(twitter4j.User) -> updatedProfileImage
    void updatedProfileBackgroundImage(twitter4j.User) -> updatedProfileBackgroundImage
    void updatedProfile(twitter4j.User) -> updatedProfile
    void gotFavorites(twitter4j.ResponseList) -> gotFavorites
    void createdFavorite(twitter4j.Status) -> createdFavorite
    void destroyedFavorite(twitter4j.Status) -> destroyedFavorite
    void enabledNotification(twitter4j.User) -> enabledNotification
    void disabledNotification(twitter4j.User) -> disabledNotification
    void createdBlock(twitter4j.User) -> createdBlock
    void destroyedBlock(twitter4j.User) -> destroyedBlock
    void gotExistsBlock(boolean) -> gotExistsBlock
    void gotBlockingUsers(twitter4j.ResponseList) -> gotBlockingUsers
    void gotBlockingUsersIDs(twitter4j.IDs) -> gotBlockingUsersIDs
    void reportedSpam(twitter4j.User) -> reportedSpam
    void gotAvailableTrends(twitter4j.ResponseList) -> gotAvailableTrends
    void gotLocationTrends(twitter4j.Trends) -> gotLocationTrends
    void searchedPlaces(twitter4j.ResponseList) -> searchedPlaces
    void gotSimilarPlaces(twitter4j.SimilarPlaces) -> gotSimilarPlaces
    void gotNearByPlaces(twitter4j.ResponseList) -> gotNearByPlaces
    void gotReverseGeoCode(twitter4j.ResponseList) -> gotReverseGeoCode
    void gotGeoDetails(twitter4j.Place) -> gotGeoDetails
    void createdPlace(twitter4j.Place) -> createdPlace
    void gotTermsOfService(java.lang.String) -> gotTermsOfService
    void gotPrivacyPolicy(java.lang.String) -> gotPrivacyPolicy
    void gotRelatedResults(twitter4j.RelatedResults) -> gotRelatedResults
    void tested(boolean) -> tested
    void onException(twitter4j.TwitterException,twitter4j.TwitterMethod) -> onException
twitter4j.TwitterMethod -> twitter4j.TwitterMethod:
    java.lang.String name -> name
    long serialVersionUID -> serialVersionUID
    java.util.Map instances -> instances
    twitter4j.TwitterMethod SEARCH -> SEARCH
    twitter4j.TwitterMethod TRENDS -> TRENDS
    twitter4j.TwitterMethod CURRENT_TRENDS -> CURRENT_TRENDS
    twitter4j.TwitterMethod DAILY_TRENDS -> DAILY_TRENDS
    twitter4j.TwitterMethod WEEKLY_TRENDS -> WEEKLY_TRENDS
    twitter4j.TwitterMethod PUBLIC_TIMELINE -> PUBLIC_TIMELINE
    twitter4j.TwitterMethod HOME_TIMELINE -> HOME_TIMELINE
    twitter4j.TwitterMethod FRIENDS_TIMELINE -> FRIENDS_TIMELINE
    twitter4j.TwitterMethod USER_TIMELINE -> USER_TIMELINE
    twitter4j.TwitterMethod MENTIONS -> MENTIONS
    twitter4j.TwitterMethod RETWEETED_BY_ME -> RETWEETED_BY_ME
    twitter4j.TwitterMethod RETWEETED_TO_ME -> RETWEETED_TO_ME
    twitter4j.TwitterMethod RETWEETS_OF_ME -> RETWEETS_OF_ME
    twitter4j.TwitterMethod RETWEETED_BY_USER -> RETWEETED_BY_USER
    twitter4j.TwitterMethod RETWEETED_TO_USER -> RETWEETED_TO_USER
    twitter4j.TwitterMethod SHOW_STATUS -> SHOW_STATUS
    twitter4j.TwitterMethod UPDATE_STATUS -> UPDATE_STATUS
    twitter4j.TwitterMethod DESTROY_STATUS -> DESTROY_STATUS
    twitter4j.TwitterMethod RETWEET_STATUS -> RETWEET_STATUS
    twitter4j.TwitterMethod RETWEETS -> RETWEETS
    twitter4j.TwitterMethod RETWEETED_BY -> RETWEETED_BY
    twitter4j.TwitterMethod RETWEETED_BY_IDS -> RETWEETED_BY_IDS
    twitter4j.TwitterMethod SHOW_USER -> SHOW_USER
    twitter4j.TwitterMethod LOOKUP_USERS -> LOOKUP_USERS
    twitter4j.TwitterMethod SEARCH_USERS -> SEARCH_USERS
    twitter4j.TwitterMethod SUGGESTED_USER_CATEGORIES -> SUGGESTED_USER_CATEGORIES
    twitter4j.TwitterMethod PROFILE_IMAGE -> PROFILE_IMAGE
    twitter4j.TwitterMethod USER_SUGGESTIONS -> USER_SUGGESTIONS
    twitter4j.TwitterMethod MEMBER_SUGGESTIONS -> MEMBER_SUGGESTIONS
    twitter4j.TwitterMethod FRIENDS_STATUSES -> FRIENDS_STATUSES
    twitter4j.TwitterMethod FOLLOWERS_STATUSES -> FOLLOWERS_STATUSES
    twitter4j.TwitterMethod CREATE_USER_LIST -> CREATE_USER_LIST
    twitter4j.TwitterMethod UPDATE_USER_LIST -> UPDATE_USER_LIST
    twitter4j.TwitterMethod USER_LISTS -> USER_LISTS
    twitter4j.TwitterMethod SHOW_USER_LIST -> SHOW_USER_LIST
    twitter4j.TwitterMethod DESTROY_USER_LIST -> DESTROY_USER_LIST
    twitter4j.TwitterMethod USER_LIST_STATUSES -> USER_LIST_STATUSES
    twitter4j.TwitterMethod USER_LIST_MEMBERSHIPS -> USER_LIST_MEMBERSHIPS
    twitter4j.TwitterMethod USER_LIST_SUBSCRIPTIONS -> USER_LIST_SUBSCRIPTIONS
    twitter4j.TwitterMethod ALL_USER_LISTS -> ALL_USER_LISTS
    twitter4j.TwitterMethod LIST_MEMBERS -> LIST_MEMBERS
    twitter4j.TwitterMethod ADD_LIST_MEMBER -> ADD_LIST_MEMBER
    twitter4j.TwitterMethod ADD_LIST_MEMBERS -> ADD_LIST_MEMBERS
    twitter4j.TwitterMethod DELETE_LIST_MEMBER -> DELETE_LIST_MEMBER
    twitter4j.TwitterMethod CHECK_LIST_MEMBERSHIP -> CHECK_LIST_MEMBERSHIP
    twitter4j.TwitterMethod LIST_SUBSCRIBERS -> LIST_SUBSCRIBERS
    twitter4j.TwitterMethod SUBSCRIBE_LIST -> SUBSCRIBE_LIST
    twitter4j.TwitterMethod UNSUBSCRIBE_LIST -> UNSUBSCRIBE_LIST
    twitter4j.TwitterMethod CHECK_LIST_SUBSCRIPTION -> CHECK_LIST_SUBSCRIPTION
    twitter4j.TwitterMethod DIRECT_MESSAGES -> DIRECT_MESSAGES
    twitter4j.TwitterMethod SENT_DIRECT_MESSAGES -> SENT_DIRECT_MESSAGES
    twitter4j.TwitterMethod SEND_DIRECT_MESSAGE -> SEND_DIRECT_MESSAGE
    twitter4j.TwitterMethod DESTROY_DIRECT_MESSAGE -> DESTROY_DIRECT_MESSAGE
    twitter4j.TwitterMethod DIRECT_MESSAGE -> DIRECT_MESSAGE
    twitter4j.TwitterMethod CREATE_FRIENDSHIP -> CREATE_FRIENDSHIP
    twitter4j.TwitterMethod DESTROY_FRIENDSHIP -> DESTROY_FRIENDSHIP
    twitter4j.TwitterMethod EXISTS_FRIENDSHIP -> EXISTS_FRIENDSHIP
    twitter4j.TwitterMethod SHOW_FRIENDSHIP -> SHOW_FRIENDSHIP
    twitter4j.TwitterMethod INCOMING_FRIENDSHIPS -> INCOMING_FRIENDSHIPS
    twitter4j.TwitterMethod OUTGOING_FRIENDSHIPS -> OUTGOING_FRIENDSHIPS
    twitter4j.TwitterMethod LOOKUP_FRIENDSHIPS -> LOOKUP_FRIENDSHIPS
    twitter4j.TwitterMethod UPDATE_FRIENDSHIP -> UPDATE_FRIENDSHIP
    twitter4j.TwitterMethod FRIENDS_IDS -> FRIENDS_IDS
    twitter4j.TwitterMethod FOLLOWERS_IDS -> FOLLOWERS_IDS
    twitter4j.TwitterMethod VERIFY_CREDENTIALS -> VERIFY_CREDENTIALS
    twitter4j.TwitterMethod RATE_LIMIT_STATUS -> RATE_LIMIT_STATUS
    twitter4j.TwitterMethod UPDATE_PROFILE_COLORS -> UPDATE_PROFILE_COLORS
    twitter4j.TwitterMethod UPDATE_PROFILE_IMAGE -> UPDATE_PROFILE_IMAGE
    twitter4j.TwitterMethod UPDATE_PROFILE_BACKGROUND_IMAGE -> UPDATE_PROFILE_BACKGROUND_IMAGE
    twitter4j.TwitterMethod UPDATE_PROFILE -> UPDATE_PROFILE
    twitter4j.TwitterMethod ACCOUNT_TOTALS -> ACCOUNT_TOTALS
    twitter4j.TwitterMethod ACCOUNT_SETTINGS -> ACCOUNT_SETTINGS
    twitter4j.TwitterMethod FAVORITES -> FAVORITES
    twitter4j.TwitterMethod CREATE_FAVORITE -> CREATE_FAVORITE
    twitter4j.TwitterMethod DESTROY_FAVORITE -> DESTROY_FAVORITE
    twitter4j.TwitterMethod ENABLE_NOTIFICATION -> ENABLE_NOTIFICATION
    twitter4j.TwitterMethod DISABLE_NOTIFICATION -> DISABLE_NOTIFICATION
    twitter4j.TwitterMethod CREATE_BLOCK -> CREATE_BLOCK
    twitter4j.TwitterMethod DESTROY_BLOCK -> DESTROY_BLOCK
    twitter4j.TwitterMethod EXISTS_BLOCK -> EXISTS_BLOCK
    twitter4j.TwitterMethod BLOCKING_USERS -> BLOCKING_USERS
    twitter4j.TwitterMethod BLOCKING_USERS_IDS -> BLOCKING_USERS_IDS
    twitter4j.TwitterMethod REPORT_SPAM -> REPORT_SPAM
    twitter4j.TwitterMethod AVAILABLE_TRENDS -> AVAILABLE_TRENDS
    twitter4j.TwitterMethod LOCATION_TRENDS -> LOCATION_TRENDS
    twitter4j.TwitterMethod SEARCH_PLACES -> SEARCH_PLACES
    twitter4j.TwitterMethod SIMILAR_PLACES -> SIMILAR_PLACES
    twitter4j.TwitterMethod NEAR_BY_PLACES -> NEAR_BY_PLACES
    twitter4j.TwitterMethod REVERSE_GEO_CODE -> REVERSE_GEO_CODE
    twitter4j.TwitterMethod GEO_DETAILS -> GEO_DETAILS
    twitter4j.TwitterMethod CREATE_PLACE -> CREATE_PLACE
    twitter4j.TwitterMethod TERMS_OF_SERVICE -> TERMS_OF_SERVICE
    twitter4j.TwitterMethod PRIVACY_POLICY -> PRIVACY_POLICY
    twitter4j.TwitterMethod RELATED_RESULTS -> RELATED_RESULTS
    twitter4j.TwitterMethod TEST -> TEST
    java.lang.String name() -> name
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    twitter4j.TwitterMethod getInstance(java.lang.String) -> getInstance
    java.lang.Object readResolve() -> readResolve
twitter4j.TwitterOAuthSupportBase -> twitter4j.TwitterOAuthSupportBase:
    twitter4j.internal.http.HttpClientWrapper http -> http
    twitter4j.RateLimitStatusListener rateLimitStatusListener -> rateLimitStatusListener
    long serialVersionUID -> serialVersionUID
    void init() -> init
    void shutdown() -> shutdown
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
    void setOAuthConsumer(java.lang.String,java.lang.String) -> setOAuthConsumer
    twitter4j.http.RequestToken getOAuthRequestToken() -> getOAuthRequestToken
    twitter4j.http.RequestToken getOAuthRequestToken(java.lang.String) -> getOAuthRequestToken
    twitter4j.http.AccessToken getOAuthAccessToken() -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(twitter4j.http.RequestToken) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(twitter4j.http.RequestToken,java.lang.String) -> getOAuthAccessToken
    void setOAuthAccessToken(twitter4j.http.AccessToken) -> setOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String,java.lang.String) -> getOAuthAccessToken
    void setOAuthAccessToken(java.lang.String,java.lang.String) -> setOAuthAccessToken
    boolean isOAuthEnabled() -> isOAuthEnabled
    void setRateLimitStatusListener(twitter4j.RateLimitStatusListener) -> setRateLimitStatusListener
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void httpResponseReceived(twitter4j.internal.http.HttpResponseEvent) -> httpResponseReceived
twitter4j.TwitterOAuthSupportBaseImpl -> twitter4j.TwitterOAuthSupportBaseImpl:
    long serialVersionUID -> serialVersionUID
    java.lang.String screenName -> screenName
    int id -> id
    twitter4j.http.RequestToken getOAuthRequestToken() -> getOAuthRequestToken
    twitter4j.http.RequestToken getOAuthRequestToken(java.lang.String) -> getOAuthRequestToken
    twitter4j.http.AccessToken getOAuthAccessToken() -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(twitter4j.http.RequestToken) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(twitter4j.http.RequestToken,java.lang.String) -> getOAuthAccessToken
    void setOAuthAccessToken(twitter4j.http.AccessToken) -> setOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String,java.lang.String) -> getOAuthAccessToken
    void setOAuthAccessToken(java.lang.String,java.lang.String) -> setOAuthAccessToken
    boolean isOAuthEnabled() -> isOAuthEnabled
    twitter4j.http.OAuthSupport getOAuth() -> getOAuth
    void setOAuthConsumer(java.lang.String,java.lang.String) -> setOAuthConsumer
twitter4j.TwitterResponse -> twitter4j.TwitterResponse:
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
twitter4j.TwitterResponseImpl -> twitter4j.TwitterResponseImpl:
    twitter4j.RateLimitStatus rateLimitStatus -> rateLimitStatus
    long serialVersionUID -> serialVersionUID
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
twitter4j.TwitterStream -> twitter4j.TwitterStream:
    long serialVersionUID -> serialVersionUID
    twitter4j.internal.http.HttpClientWrapper http -> http
    twitter4j.internal.logging.Logger logger -> logger
    twitter4j.StreamListener[] streamListeners -> streamListeners
    java.util.List lifeCycleListeners -> lifeCycleListeners
    twitter4j.TwitterStream$TwitterStreamConsumer handler -> handler
    twitter4j.internal.async.Dispatcher dispatcher -> dispatcher
    boolean shutdown -> shutdown
    int TCP_ERROR_INITIAL_WAIT -> TCP_ERROR_INITIAL_WAIT
    int TCP_ERROR_WAIT_CAP -> TCP_ERROR_WAIT_CAP
    int HTTP_ERROR_INITIAL_WAIT -> HTTP_ERROR_INITIAL_WAIT
    int HTTP_ERROR_WAIT_CAP -> HTTP_ERROR_WAIT_CAP
    int NO_WAIT -> NO_WAIT
    int count -> count
    java.lang.Class class$twitter4j$TwitterStream -> class$twitter4j$TwitterStream
    void firehose(int) -> firehose
    twitter4j.StatusStream getFirehoseStream(int) -> getFirehoseStream
    void links(int) -> links
    twitter4j.StatusStream getLinksStream(int) -> getLinksStream
    void stream(java.lang.String,int,boolean) -> stream
    twitter4j.StatusStream getCountStream(java.lang.String,int) -> getCountStream
    void retweet() -> retweet
    twitter4j.StatusStream getRetweetStream() -> getRetweetStream
    void sample() -> sample
    twitter4j.StatusStream getSampleStream() -> getSampleStream
    void user() -> user
    void user(java.lang.String[]) -> user
    twitter4j.UserStream getUserStream() -> getUserStream
    twitter4j.UserStream getUserStream(java.lang.String[]) -> getUserStream
    void site(boolean,int[]) -> site
    twitter4j.internal.async.Dispatcher getDispatcher() -> getDispatcher
    void shutdown() -> shutdown
    java.io.InputStream getSiteStream(boolean,int[]) -> getSiteStream
    void filter(twitter4j.FilterQuery) -> filter
    twitter4j.StatusStream getFilterStream(twitter4j.FilterQuery) -> getFilterStream
    void filter(int,int[],java.lang.String[]) -> filter
    twitter4j.StatusStream getFilterStream(int,int[],java.lang.String[]) -> getFilterStream
    void ensureListenerIsSet() -> ensureListenerIsSet
    void ensureStatusStreamListenerIsSet() -> ensureStatusStreamListenerIsSet
    void startHandler(twitter4j.TwitterStream$TwitterStreamConsumer) -> startHandler
    void cleanUp() -> cleanUp
    void cleanup() -> cleanup
    void addConnectionLifeCycleListener(twitter4j.ConnectionLifeCycleListener) -> addConnectionLifeCycleListener
    void setStatusListener(twitter4j.StatusListener) -> setStatusListener
    void addStatusListener(twitter4j.StatusListener) -> addStatusListener
    void setUserStreamListener(twitter4j.UserStreamListener) -> setUserStreamListener
    void addUserStreamListener(twitter4j.UserStreamListener) -> addUserStreamListener
    void addListener(twitter4j.UserStreamListener) -> addListener
    void addListener(twitter4j.StatusListener) -> addListener
    void addListener(twitter4j.SiteStreamsListener) -> addListener
    void addListener(twitter4j.StreamListener) -> addListener
    void setOAuthConsumer(java.lang.String,java.lang.String) -> setOAuthConsumer
    boolean isOAuthEnabled() -> isOAuthEnabled
    void setOAuthAccessToken(java.lang.String,java.lang.String) -> setOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String,java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> getOAuthAccessToken
    void setOAuthAccessToken(twitter4j.http.AccessToken) -> setOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(twitter4j.http.RequestToken,java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(twitter4j.http.RequestToken) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken() -> getOAuthAccessToken
    twitter4j.http.RequestToken getOAuthRequestToken(java.lang.String) -> getOAuthRequestToken
    twitter4j.http.RequestToken getOAuthRequestToken() -> getOAuthRequestToken
    void httpResponseReceived(twitter4j.internal.http.HttpResponseEvent) -> httpResponseReceived
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void setRateLimitStatusListener(twitter4j.RateLimitStatusListener) -> setRateLimitStatusListener
    java.lang.String toString() -> toString
    twitter4j.conf.Configuration getConfiguration() -> getConfiguration
    java.lang.Class class$(java.lang.String) -> class$
    twitter4j.StatusStream access$000(twitter4j.TwitterStream,java.lang.String,int) -> access$000
    twitter4j.internal.async.Dispatcher access$100(twitter4j.TwitterStream) -> access$100
    java.util.List access$200(twitter4j.TwitterStream) -> access$200
    twitter4j.internal.logging.Logger access$300() -> access$300
    twitter4j.StreamListener[] access$400(twitter4j.TwitterStream) -> access$400
twitter4j.TwitterStream$1 -> twitter4j.TwitterStream$1:
    int val$count -> val$count
    twitter4j.TwitterStream this$0 -> this$0
    twitter4j.StatusStream getStream() -> getStream
    twitter4j.StreamImplementation getStream() -> getStream
twitter4j.TwitterStream$2 -> twitter4j.TwitterStream$2:
    int val$count -> val$count
    twitter4j.TwitterStream this$0 -> this$0
    twitter4j.StatusStream getStream() -> getStream
    twitter4j.StreamImplementation getStream() -> getStream
twitter4j.TwitterStream$3 -> twitter4j.TwitterStream$3:
    java.lang.String val$relativeUrl -> val$relativeUrl
    int val$count -> val$count
    twitter4j.TwitterStream this$0 -> this$0
    twitter4j.StatusStream getStream() -> getStream
    twitter4j.StreamImplementation getStream() -> getStream
twitter4j.TwitterStream$4 -> twitter4j.TwitterStream$4:
    twitter4j.TwitterStream this$0 -> this$0
    twitter4j.StatusStream getStream() -> getStream
    twitter4j.StreamImplementation getStream() -> getStream
twitter4j.TwitterStream$5 -> twitter4j.TwitterStream$5:
    twitter4j.TwitterStream this$0 -> this$0
    twitter4j.StatusStream getStream() -> getStream
    twitter4j.StreamImplementation getStream() -> getStream
twitter4j.TwitterStream$6 -> twitter4j.TwitterStream$6:
    java.lang.String[] val$track -> val$track
    twitter4j.TwitterStream this$0 -> this$0
    twitter4j.UserStream getStream() -> getStream
    twitter4j.StreamImplementation getStream() -> getStream
twitter4j.TwitterStream$7 -> twitter4j.TwitterStream$7:
    boolean val$withFollowings -> val$withFollowings
    int[] val$follow -> val$follow
    twitter4j.TwitterStream this$0 -> this$0
    twitter4j.StreamImplementation getStream() -> getStream
twitter4j.TwitterStream$8 -> twitter4j.TwitterStream$8:
    twitter4j.FilterQuery val$query -> val$query
    twitter4j.TwitterStream this$0 -> this$0
    twitter4j.StatusStream getStream() -> getStream
    twitter4j.StreamImplementation getStream() -> getStream
twitter4j.TwitterStream$9 -> twitter4j.TwitterStream$9:
    int val$count -> val$count
    int[] val$follow -> val$follow
    java.lang.String[] val$track -> val$track
    twitter4j.TwitterStream this$0 -> this$0
    twitter4j.StatusStream getStream() -> getStream
    twitter4j.StreamImplementation getStream() -> getStream
twitter4j.TwitterStream$TwitterStreamConsumer -> twitter4j.TwitterStream$TwitterStreamConsumer:
    twitter4j.StreamImplementation stream -> stream
    java.lang.String NAME -> NAME
    boolean closed -> closed
    twitter4j.TwitterStream this$0 -> this$0
    void run() -> run
    void close() -> close
    void setStatus(java.lang.String) -> setStatus
    twitter4j.StreamImplementation getStream() -> getStream
twitter4j.TwitterStreamFactory -> twitter4j.TwitterStreamFactory:
    long serialVersionUID -> serialVersionUID
    twitter4j.StreamListener listener -> listener
    twitter4j.conf.Configuration conf -> conf
    twitter4j.TwitterStream getInstance() -> getInstance
    twitter4j.TwitterStream getInstance(java.lang.String,java.lang.String) -> getInstance
    twitter4j.TwitterStream getInstance(twitter4j.http.AccessToken) -> getInstance
    twitter4j.TwitterStream getOAuthAuthorizedInstance(java.lang.String,java.lang.String) -> getOAuthAuthorizedInstance
    twitter4j.TwitterStream getOAuthAuthorizedInstance(twitter4j.http.AccessToken) -> getOAuthAuthorizedInstance
    twitter4j.TwitterStream getInstance(twitter4j.http.Authorization) -> getInstance
    twitter4j.TwitterStream getInstance(twitter4j.conf.Configuration,twitter4j.http.Authorization) -> getInstance
    twitter4j.TwitterStream getInstance(twitter4j.conf.Configuration) -> getInstance
twitter4j.URLEntity -> twitter4j.URLEntity:
    java.net.URL getURL() -> getURL
    java.net.URL getExpandedURL() -> getExpandedURL
    java.lang.String getDisplayURL() -> getDisplayURL
    int getStart() -> getStart
    int getEnd() -> getEnd
twitter4j.URLEntityJSONImpl -> twitter4j.URLEntityJSONImpl:
    int start -> start
    int end -> end
    java.net.URL url -> url
    java.net.URL expandedURL -> expandedURL
    java.lang.String displayURL -> displayURL
    long serialVersionUID -> serialVersionUID
    void init(twitter4j.internal.org.json.JSONObject) -> init
    java.net.URL getURL() -> getURL
    java.net.URL getExpandedURL() -> getExpandedURL
    java.lang.String getDisplayURL() -> getDisplayURL
    int getStart() -> getStart
    int getEnd() -> getEnd
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.User -> twitter4j.User:
    int getId() -> getId
    java.lang.String getName() -> getName
    java.lang.String getScreenName() -> getScreenName
    java.lang.String getLocation() -> getLocation
    java.lang.String getDescription() -> getDescription
    boolean isContributorsEnabled() -> isContributorsEnabled
    java.net.URL getProfileImageURL() -> getProfileImageURL
    java.net.URL getURL() -> getURL
    boolean isProtected() -> isProtected
    int getFollowersCount() -> getFollowersCount
    twitter4j.Status getStatus() -> getStatus
    java.util.Date getStatusCreatedAt() -> getStatusCreatedAt
    long getStatusId() -> getStatusId
    java.lang.String getStatusText() -> getStatusText
    java.lang.String getStatusSource() -> getStatusSource
    boolean isStatusTruncated() -> isStatusTruncated
    long getStatusInReplyToStatusId() -> getStatusInReplyToStatusId
    int getStatusInReplyToUserId() -> getStatusInReplyToUserId
    boolean isStatusFavorited() -> isStatusFavorited
    java.lang.String getStatusInReplyToScreenName() -> getStatusInReplyToScreenName
    java.lang.String getProfileBackgroundColor() -> getProfileBackgroundColor
    java.lang.String getProfileTextColor() -> getProfileTextColor
    java.lang.String getProfileLinkColor() -> getProfileLinkColor
    java.lang.String getProfileSidebarFillColor() -> getProfileSidebarFillColor
    java.lang.String getProfileSidebarBorderColor() -> getProfileSidebarBorderColor
    boolean isProfileUseBackgroundImage() -> isProfileUseBackgroundImage
    boolean isShowAllInlineMedia() -> isShowAllInlineMedia
    int getFriendsCount() -> getFriendsCount
    java.util.Date getCreatedAt() -> getCreatedAt
    int getFavouritesCount() -> getFavouritesCount
    int getUtcOffset() -> getUtcOffset
    java.lang.String getTimeZone() -> getTimeZone
    java.lang.String getProfileBackgroundImageUrl() -> getProfileBackgroundImageUrl
    boolean isProfileBackgroundTiled() -> isProfileBackgroundTiled
    java.lang.String getLang() -> getLang
    int getStatusesCount() -> getStatusesCount
    boolean isGeoEnabled() -> isGeoEnabled
    boolean isVerified() -> isVerified
    boolean isTranslator() -> isTranslator
    int getListedCount() -> getListedCount
    boolean isFollowRequestSent() -> isFollowRequestSent
twitter4j.UserJSONImpl -> twitter4j.UserJSONImpl:
    int id -> id
    java.lang.String name -> name
    java.lang.String screenName -> screenName
    java.lang.String location -> location
    java.lang.String description -> description
    boolean isContributorsEnabled -> isContributorsEnabled
    java.lang.String profileImageUrl -> profileImageUrl
    java.lang.String url -> url
    boolean isProtected -> isProtected
    int followersCount -> followersCount
    twitter4j.Status status -> status
    java.lang.String profileBackgroundColor -> profileBackgroundColor
    java.lang.String profileTextColor -> profileTextColor
    java.lang.String profileLinkColor -> profileLinkColor
    java.lang.String profileSidebarFillColor -> profileSidebarFillColor
    java.lang.String profileSidebarBorderColor -> profileSidebarBorderColor
    boolean profileUseBackgroundImage -> profileUseBackgroundImage
    boolean showAllInlineMedia -> showAllInlineMedia
    int friendsCount -> friendsCount
    java.util.Date createdAt -> createdAt
    int favouritesCount -> favouritesCount
    int utcOffset -> utcOffset
    java.lang.String timeZone -> timeZone
    java.lang.String profileBackgroundImageUrl -> profileBackgroundImageUrl
    boolean profileBackgroundTiled -> profileBackgroundTiled
    java.lang.String lang -> lang
    int statusesCount -> statusesCount
    boolean isGeoEnabled -> isGeoEnabled
    boolean isVerified -> isVerified
    boolean translator -> translator
    int listedCount -> listedCount
    boolean isFollowRequestSent -> isFollowRequestSent
    long serialVersionUID -> serialVersionUID
    void init(twitter4j.internal.org.json.JSONObject) -> init
    int compareTo(twitter4j.User) -> compareTo
    int getId() -> getId
    java.lang.String getName() -> getName
    java.lang.String getScreenName() -> getScreenName
    java.lang.String getLocation() -> getLocation
    java.lang.String getDescription() -> getDescription
    boolean isContributorsEnabled() -> isContributorsEnabled
    java.net.URL getProfileImageURL() -> getProfileImageURL
    java.net.URL getURL() -> getURL
    boolean isProtected() -> isProtected
    int getFollowersCount() -> getFollowersCount
    java.util.Date getStatusCreatedAt() -> getStatusCreatedAt
    long getStatusId() -> getStatusId
    java.lang.String getStatusText() -> getStatusText
    java.lang.String getStatusSource() -> getStatusSource
    boolean isStatusTruncated() -> isStatusTruncated
    long getStatusInReplyToStatusId() -> getStatusInReplyToStatusId
    int getStatusInReplyToUserId() -> getStatusInReplyToUserId
    boolean isStatusFavorited() -> isStatusFavorited
    java.lang.String getStatusInReplyToScreenName() -> getStatusInReplyToScreenName
    java.lang.String getProfileBackgroundColor() -> getProfileBackgroundColor
    java.lang.String getProfileTextColor() -> getProfileTextColor
    java.lang.String getProfileLinkColor() -> getProfileLinkColor
    java.lang.String getProfileSidebarFillColor() -> getProfileSidebarFillColor
    java.lang.String getProfileSidebarBorderColor() -> getProfileSidebarBorderColor
    boolean isProfileUseBackgroundImage() -> isProfileUseBackgroundImage
    boolean isShowAllInlineMedia() -> isShowAllInlineMedia
    int getFriendsCount() -> getFriendsCount
    twitter4j.Status getStatus() -> getStatus
    java.util.Date getCreatedAt() -> getCreatedAt
    int getFavouritesCount() -> getFavouritesCount
    int getUtcOffset() -> getUtcOffset
    java.lang.String getTimeZone() -> getTimeZone
    java.lang.String getProfileBackgroundImageUrl() -> getProfileBackgroundImageUrl
    boolean isProfileBackgroundTiled() -> isProfileBackgroundTiled
    java.lang.String getLang() -> getLang
    int getStatusesCount() -> getStatusesCount
    boolean isGeoEnabled() -> isGeoEnabled
    boolean isVerified() -> isVerified
    boolean isTranslator() -> isTranslator
    int getListedCount() -> getListedCount
    boolean isFollowRequestSent() -> isFollowRequestSent
    twitter4j.PagableResponseList createPagableUserList(twitter4j.internal.http.HttpResponse) -> createPagableUserList
    twitter4j.ResponseList createUserList(twitter4j.internal.http.HttpResponse) -> createUserList
    twitter4j.ResponseList createUserList(twitter4j.internal.org.json.JSONArray,twitter4j.internal.http.HttpResponse) -> createUserList
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.UserList -> twitter4j.UserList:
    int getId() -> getId
    java.lang.String getName() -> getName
    java.lang.String getFullName() -> getFullName
    java.lang.String getSlug() -> getSlug
    java.lang.String getDescription() -> getDescription
    int getSubscriberCount() -> getSubscriberCount
    int getMemberCount() -> getMemberCount
    java.net.URI getURI() -> getURI
    boolean isPublic() -> isPublic
    twitter4j.User getUser() -> getUser
    boolean isFollowing() -> isFollowing
twitter4j.UserListJSONImpl -> twitter4j.UserListJSONImpl:
    int id -> id
    java.lang.String name -> name
    java.lang.String fullName -> fullName
    java.lang.String slug -> slug
    java.lang.String description -> description
    int subscriberCount -> subscriberCount
    int memberCount -> memberCount
    java.lang.String uri -> uri
    boolean mode -> mode
    twitter4j.User user -> user
    boolean following -> following
    long serialVersionUID -> serialVersionUID
    void init(twitter4j.internal.org.json.JSONObject) -> init
    int compareTo(twitter4j.UserList) -> compareTo
    int getId() -> getId
    java.lang.String getName() -> getName
    java.lang.String getFullName() -> getFullName
    java.lang.String getSlug() -> getSlug
    java.lang.String getDescription() -> getDescription
    int getSubscriberCount() -> getSubscriberCount
    int getMemberCount() -> getMemberCount
    java.net.URI getURI() -> getURI
    boolean isPublic() -> isPublic
    boolean isFollowing() -> isFollowing
    twitter4j.User getUser() -> getUser
    twitter4j.PagableResponseList createPagableUserListList(twitter4j.internal.http.HttpResponse) -> createPagableUserListList
    twitter4j.ResponseList createUserListList(twitter4j.internal.http.HttpResponse) -> createUserListList
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
twitter4j.UserMentionEntity -> twitter4j.UserMentionEntity:
    java.lang.String getName() -> getName
    java.lang.String getScreenName() -> getScreenName
    int getId() -> getId
    int getStart() -> getStart
    int getEnd() -> getEnd
twitter4j.UserMentionEntityJSONImpl -> twitter4j.UserMentionEntityJSONImpl:
    long serialVersionUID -> serialVersionUID
    int start -> start
    int end -> end
    java.lang.String name -> name
    java.lang.String screenName -> screenName
    int id -> id
    void init(twitter4j.internal.org.json.JSONObject) -> init
    java.lang.String getName() -> getName
    java.lang.String getScreenName() -> getScreenName
    int getId() -> getId
    int getStart() -> getStart
    int getEnd() -> getEnd
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.UserStream -> twitter4j.UserStream:
    void next(twitter4j.UserStreamListener) -> next
    void close() -> close
twitter4j.UserStreamAdapter -> twitter4j.UserStreamAdapter:
    void onDeletionNotice(long,int) -> onDeletionNotice
    void onFriendList(int[]) -> onFriendList
    void onFavorite(twitter4j.User,twitter4j.User,twitter4j.Status) -> onFavorite
    void onFollow(twitter4j.User,twitter4j.User) -> onFollow
    void onUnfavorite(twitter4j.User,twitter4j.User,twitter4j.Status) -> onUnfavorite
    void onRetweet(twitter4j.User,twitter4j.User,twitter4j.Status) -> onRetweet
    void onDirectMessage(twitter4j.DirectMessage) -> onDirectMessage
    void onUserListSubscription(twitter4j.User,twitter4j.User,twitter4j.UserList) -> onUserListSubscription
    void onUserListCreation(twitter4j.User,twitter4j.UserList) -> onUserListCreation
    void onUserListUpdate(twitter4j.User,twitter4j.UserList) -> onUserListUpdate
    void onUserListDeletion(twitter4j.User,twitter4j.UserList) -> onUserListDeletion
    void onUserProfileUpdate(twitter4j.User) -> onUserProfileUpdate
    void onBlock(twitter4j.User,twitter4j.User) -> onBlock
    void onUnblock(twitter4j.User,twitter4j.User) -> onUnblock
    void onException(java.lang.Exception) -> onException
twitter4j.UserStreamImpl -> twitter4j.UserStreamImpl:
    void next(twitter4j.UserStreamListener) -> next
    void next(twitter4j.StreamListener[]) -> next
    java.lang.String parseLine(java.lang.String) -> parseLine
    void onSender(twitter4j.internal.org.json.JSONObject) -> onSender
    void onDirectMessage(twitter4j.internal.org.json.JSONObject) -> onDirectMessage
    void onScrubGeo(twitter4j.internal.org.json.JSONObject) -> onScrubGeo
    void onFriends(twitter4j.internal.org.json.JSONObject) -> onFriends
    void onFavorite(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onFavorite
    void onUnfavorite(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUnfavorite
    void onRetweet(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onRetweet
    void onFollow(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onFollow
    void onUserListSubscribed(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserListSubscribed
    void onUserListCreated(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserListCreated
    void onUserListUpdated(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserListUpdated
    void onUserListDestroyed(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserListDestroyed
    void onUserUpdate(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUserUpdate
    void onBlock(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onBlock
    void onUnblock(twitter4j.internal.org.json.JSONObject,twitter4j.internal.org.json.JSONObject) -> onUnblock
    void onException(java.lang.Exception) -> onException
twitter4j.UserStreamListener -> twitter4j.UserStreamListener:
    void onDeletionNotice(long,int) -> onDeletionNotice
    void onFriendList(int[]) -> onFriendList
    void onFavorite(twitter4j.User,twitter4j.User,twitter4j.Status) -> onFavorite
    void onUnfavorite(twitter4j.User,twitter4j.User,twitter4j.Status) -> onUnfavorite
    void onFollow(twitter4j.User,twitter4j.User) -> onFollow
    void onRetweet(twitter4j.User,twitter4j.User,twitter4j.Status) -> onRetweet
    void onDirectMessage(twitter4j.DirectMessage) -> onDirectMessage
    void onUserListSubscription(twitter4j.User,twitter4j.User,twitter4j.UserList) -> onUserListSubscription
    void onUserListCreation(twitter4j.User,twitter4j.UserList) -> onUserListCreation
    void onUserListUpdate(twitter4j.User,twitter4j.UserList) -> onUserListUpdate
    void onUserListDeletion(twitter4j.User,twitter4j.UserList) -> onUserListDeletion
    void onUserProfileUpdate(twitter4j.User) -> onUserProfileUpdate
    void onBlock(twitter4j.User,twitter4j.User) -> onBlock
    void onUnblock(twitter4j.User,twitter4j.User) -> onUnblock
twitter4j.Version -> twitter4j.Version:
    java.lang.String VERSION -> VERSION
    java.lang.String TITLE -> TITLE
    java.lang.String getVersion() -> getVersion
    void main(java.lang.String[]) -> main
twitter4j.api.AccountMethods -> twitter4j.api.AccountMethods:
    twitter4j.User verifyCredentials() -> verifyCredentials
    twitter4j.RateLimitStatus getRateLimitStatus() -> getRateLimitStatus
    twitter4j.User updateProfileColors(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateProfileColors
    twitter4j.User updateProfileImage(java.io.File) -> updateProfileImage
    twitter4j.User updateProfileBackgroundImage(java.io.File,boolean) -> updateProfileBackgroundImage
    twitter4j.User updateProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateProfile
    twitter4j.User updateProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateProfile
    twitter4j.AccountTotals getAccountTotals() -> getAccountTotals
    twitter4j.AccountSettings getAccountSettings() -> getAccountSettings
twitter4j.api.AccountMethodsAsync -> twitter4j.api.AccountMethodsAsync:
    void verifyCredentials() -> verifyCredentials
    void getRateLimitStatus() -> getRateLimitStatus
    void updateProfileColors(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateProfileColors
    void updateProfileImage(java.io.File) -> updateProfileImage
    void updateProfileBackgroundImage(java.io.File,boolean) -> updateProfileBackgroundImage
    void updateProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateProfile
    void updateProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> updateProfile
    void getAccountTotals() -> getAccountTotals
    void getAccountSettings() -> getAccountSettings
twitter4j.api.BlockMethods -> twitter4j.api.BlockMethods:
    twitter4j.User createBlock(java.lang.String) -> createBlock
    twitter4j.User createBlock(int) -> createBlock
    twitter4j.User destroyBlock(java.lang.String) -> destroyBlock
    twitter4j.User destroyBlock(int) -> destroyBlock
    boolean existsBlock(java.lang.String) -> existsBlock
    boolean existsBlock(int) -> existsBlock
    twitter4j.ResponseList getBlockingUsers() -> getBlockingUsers
    twitter4j.ResponseList getBlockingUsers(int) -> getBlockingUsers
    twitter4j.IDs getBlockingUsersIDs() -> getBlockingUsersIDs
twitter4j.api.BlockMethodsAsync -> twitter4j.api.BlockMethodsAsync:
    void createBlock(java.lang.String) -> createBlock
    void createBlock(int) -> createBlock
    void destroyBlock(java.lang.String) -> destroyBlock
    void destroyBlock(int) -> destroyBlock
    void existsBlock(java.lang.String) -> existsBlock
    void existsBlock(int) -> existsBlock
    void getBlockingUsers() -> getBlockingUsers
    void getBlockingUsers(int) -> getBlockingUsers
    void getBlockingUsersIDs() -> getBlockingUsersIDs
twitter4j.api.DirectMessageMethods -> twitter4j.api.DirectMessageMethods:
    twitter4j.ResponseList getDirectMessages() -> getDirectMessages
    twitter4j.ResponseList getDirectMessages(twitter4j.Paging) -> getDirectMessages
    twitter4j.ResponseList getSentDirectMessages() -> getSentDirectMessages
    twitter4j.ResponseList getSentDirectMessages(twitter4j.Paging) -> getSentDirectMessages
    twitter4j.DirectMessage sendDirectMessage(java.lang.String,java.lang.String) -> sendDirectMessage
    twitter4j.DirectMessage sendDirectMessage(int,java.lang.String) -> sendDirectMessage
    twitter4j.DirectMessage destroyDirectMessage(long) -> destroyDirectMessage
    twitter4j.DirectMessage showDirectMessage(long) -> showDirectMessage
twitter4j.api.DirectMessageMethodsAsync -> twitter4j.api.DirectMessageMethodsAsync:
    void getDirectMessages() -> getDirectMessages
    void getDirectMessages(twitter4j.Paging) -> getDirectMessages
    void getSentDirectMessages() -> getSentDirectMessages
    void getSentDirectMessages(twitter4j.Paging) -> getSentDirectMessages
    void sendDirectMessage(java.lang.String,java.lang.String) -> sendDirectMessage
    void sendDirectMessage(int,java.lang.String) -> sendDirectMessage
    void destroyDirectMessage(long) -> destroyDirectMessage
    void showDirectMessage(long) -> showDirectMessage
twitter4j.api.FavoriteMethods -> twitter4j.api.FavoriteMethods:
    twitter4j.ResponseList getFavorites() -> getFavorites
    twitter4j.ResponseList getFavorites(int) -> getFavorites
    twitter4j.ResponseList getFavorites(java.lang.String) -> getFavorites
    twitter4j.ResponseList getFavorites(java.lang.String,int) -> getFavorites
    twitter4j.Status createFavorite(long) -> createFavorite
    twitter4j.Status destroyFavorite(long) -> destroyFavorite
twitter4j.api.FavoriteMethodsAsync -> twitter4j.api.FavoriteMethodsAsync:
    void getFavorites() -> getFavorites
    void getFavorites(int) -> getFavorites
    void getFavorites(java.lang.String) -> getFavorites
    void getFavorites(java.lang.String,int) -> getFavorites
    void createFavorite(long) -> createFavorite
    void destroyFavorite(long) -> destroyFavorite
twitter4j.api.FriendsFollowersMethods -> twitter4j.api.FriendsFollowersMethods:
    twitter4j.IDs getFriendsIDs() -> getFriendsIDs
    twitter4j.IDs getFriendsIDs(long) -> getFriendsIDs
    twitter4j.IDs getFriendsIDs(int) -> getFriendsIDs
    twitter4j.IDs getFriendsIDs(int,long) -> getFriendsIDs
    twitter4j.IDs getFriendsIDs(java.lang.String) -> getFriendsIDs
    twitter4j.IDs getFriendsIDs(java.lang.String,long) -> getFriendsIDs
    twitter4j.IDs getFollowersIDs() -> getFollowersIDs
    twitter4j.IDs getFollowersIDs(long) -> getFollowersIDs
    twitter4j.IDs getFollowersIDs(int) -> getFollowersIDs
    twitter4j.IDs getFollowersIDs(int,long) -> getFollowersIDs
    twitter4j.IDs getFollowersIDs(java.lang.String) -> getFollowersIDs
    twitter4j.IDs getFollowersIDs(java.lang.String,long) -> getFollowersIDs
twitter4j.api.FriendsFollowersMethodsAsync -> twitter4j.api.FriendsFollowersMethodsAsync:
    void getFriendsIDs() -> getFriendsIDs
    void getFriendsIDs(long) -> getFriendsIDs
    void getFriendsIDs(int) -> getFriendsIDs
    void getFriendsIDs(int,long) -> getFriendsIDs
    void getFriendsIDs(java.lang.String) -> getFriendsIDs
    void getFriendsIDs(java.lang.String,long) -> getFriendsIDs
    void getFollowersIDs() -> getFollowersIDs
    void getFollowersIDs(long) -> getFollowersIDs
    void getFollowersIDs(int) -> getFollowersIDs
    void getFollowersIDs(int,long) -> getFollowersIDs
    void getFollowersIDs(java.lang.String) -> getFollowersIDs
    void getFollowersIDs(java.lang.String,long) -> getFollowersIDs
twitter4j.api.FriendshipMethods -> twitter4j.api.FriendshipMethods:
    twitter4j.User createFriendship(java.lang.String) -> createFriendship
    twitter4j.User createFriendship(int) -> createFriendship
    twitter4j.User createFriendship(java.lang.String,boolean) -> createFriendship
    twitter4j.User createFriendship(int,boolean) -> createFriendship
    twitter4j.User destroyFriendship(java.lang.String) -> destroyFriendship
    twitter4j.User destroyFriendship(int) -> destroyFriendship
    boolean existsFriendship(java.lang.String,java.lang.String) -> existsFriendship
    twitter4j.Relationship showFriendship(java.lang.String,java.lang.String) -> showFriendship
    twitter4j.Relationship showFriendship(int,int) -> showFriendship
    twitter4j.IDs getIncomingFriendships(long) -> getIncomingFriendships
    twitter4j.IDs getOutgoingFriendships(long) -> getOutgoingFriendships
    twitter4j.ResponseList lookupFriendships(java.lang.String[]) -> lookupFriendships
    twitter4j.ResponseList lookupFriendships(int[]) -> lookupFriendships
    twitter4j.Relationship updateFriendship(java.lang.String,boolean,boolean) -> updateFriendship
    twitter4j.Relationship updateFriendship(int,boolean,boolean) -> updateFriendship
twitter4j.api.FriendshipMethodsAsync -> twitter4j.api.FriendshipMethodsAsync:
    void createFriendship(java.lang.String) -> createFriendship
    void createFriendship(int) -> createFriendship
    void createFriendship(java.lang.String,boolean) -> createFriendship
    void createFriendship(int,boolean) -> createFriendship
    void destroyFriendship(java.lang.String) -> destroyFriendship
    void destroyFriendship(int) -> destroyFriendship
    void existsFriendship(java.lang.String,java.lang.String) -> existsFriendship
    void showFriendship(java.lang.String,java.lang.String) -> showFriendship
    void showFriendship(int,int) -> showFriendship
    void getIncomingFriendships(long) -> getIncomingFriendships
    void getOutgoingFriendships(long) -> getOutgoingFriendships
    void lookupFriendships(java.lang.String[]) -> lookupFriendships
    void lookupFriendships(int[]) -> lookupFriendships
    void updateFriendship(java.lang.String,boolean,boolean) -> updateFriendship
    void updateFriendship(int,boolean,boolean) -> updateFriendship
twitter4j.api.GeoMethods -> twitter4j.api.GeoMethods:
    twitter4j.ResponseList searchPlaces(twitter4j.GeoQuery) -> searchPlaces
    twitter4j.SimilarPlaces getSimilarPlaces(twitter4j.GeoLocation,java.lang.String,java.lang.String,java.lang.String) -> getSimilarPlaces
    twitter4j.ResponseList getNearbyPlaces(twitter4j.GeoQuery) -> getNearbyPlaces
    twitter4j.ResponseList reverseGeoCode(twitter4j.GeoQuery) -> reverseGeoCode
    twitter4j.Place getGeoDetails(java.lang.String) -> getGeoDetails
    twitter4j.Place createPlace(java.lang.String,java.lang.String,java.lang.String,twitter4j.GeoLocation,java.lang.String) -> createPlace
twitter4j.api.GeoMethodsAsync -> twitter4j.api.GeoMethodsAsync:
    void searchPlaces(twitter4j.GeoQuery) -> searchPlaces
    void getSimilarPlaces(twitter4j.GeoLocation,java.lang.String,java.lang.String,java.lang.String) -> getSimilarPlaces
    void getNearbyPlaces(twitter4j.GeoQuery) -> getNearbyPlaces
    void reverseGeoCode(twitter4j.GeoQuery) -> reverseGeoCode
    void getGeoDetails(java.lang.String) -> getGeoDetails
    void createPlace(java.lang.String,java.lang.String,java.lang.String,twitter4j.GeoLocation,java.lang.String) -> createPlace
twitter4j.api.HelpMethods -> twitter4j.api.HelpMethods:
    boolean test() -> test
twitter4j.api.HelpMethodsAsync -> twitter4j.api.HelpMethodsAsync:
    void test() -> test
twitter4j.api.LegalResources -> twitter4j.api.LegalResources:
    java.lang.String getTermsOfService() -> getTermsOfService
    java.lang.String getPrivacyPolicy() -> getPrivacyPolicy
twitter4j.api.LegalResourcesAsync -> twitter4j.api.LegalResourcesAsync:
    void getTermsOfService() -> getTermsOfService
    void getPrivacyPolicy() -> getPrivacyPolicy
twitter4j.api.ListMembersMethods -> twitter4j.api.ListMembersMethods:
    twitter4j.PagableResponseList getUserListMembers(java.lang.String,int,long) -> getUserListMembers
    twitter4j.UserList addUserListMember(int,int) -> addUserListMember
    twitter4j.UserList addUserListMembers(int,int[]) -> addUserListMembers
    twitter4j.UserList addUserListMembers(int,java.lang.String[]) -> addUserListMembers
    twitter4j.UserList deleteUserListMember(int,int) -> deleteUserListMember
    twitter4j.User checkUserListMembership(java.lang.String,int,int) -> checkUserListMembership
twitter4j.api.ListMembersMethodsAsync -> twitter4j.api.ListMembersMethodsAsync:
    void getUserListMembers(java.lang.String,int,long) -> getUserListMembers
    void addUserListMember(int,int) -> addUserListMember
    void addUserListMembers(int,int[]) -> addUserListMembers
    void addUserListMembers(int,java.lang.String[]) -> addUserListMembers
    void deleteUserListMember(int,int) -> deleteUserListMember
    void checkUserListMembership(java.lang.String,int,int) -> checkUserListMembership
twitter4j.api.ListMethods -> twitter4j.api.ListMethods:
    twitter4j.UserList createUserList(java.lang.String,boolean,java.lang.String) -> createUserList
    twitter4j.UserList updateUserList(int,java.lang.String,boolean,java.lang.String) -> updateUserList
    twitter4j.PagableResponseList getUserLists(java.lang.String,long) -> getUserLists
    twitter4j.UserList showUserList(java.lang.String,int) -> showUserList
    twitter4j.UserList destroyUserList(int) -> destroyUserList
    twitter4j.ResponseList getUserListStatuses(java.lang.String,int,twitter4j.Paging) -> getUserListStatuses
    twitter4j.PagableResponseList getUserListMemberships(java.lang.String,long) -> getUserListMemberships
    twitter4j.PagableResponseList getUserListSubscriptions(java.lang.String,long) -> getUserListSubscriptions
    twitter4j.ResponseList getAllUserLists(java.lang.String) -> getAllUserLists
    twitter4j.ResponseList getAllUserLists(int) -> getAllUserLists
twitter4j.api.ListMethodsAsync -> twitter4j.api.ListMethodsAsync:
    void createUserList(java.lang.String,boolean,java.lang.String) -> createUserList
    void updateUserList(int,java.lang.String,boolean,java.lang.String) -> updateUserList
    void getUserLists(java.lang.String,long) -> getUserLists
    void showUserList(java.lang.String,int) -> showUserList
    void destroyUserList(int) -> destroyUserList
    void getUserListStatuses(java.lang.String,int,twitter4j.Paging) -> getUserListStatuses
    void getUserListMemberships(java.lang.String,long) -> getUserListMemberships
    void getUserListSubscriptions(java.lang.String,long) -> getUserListSubscriptions
    void getAllSubscribingUserLists(java.lang.String) -> getAllSubscribingUserLists
    void getAllSubscribingUserLists(int) -> getAllSubscribingUserLists
twitter4j.api.ListSubscribersMethods -> twitter4j.api.ListSubscribersMethods:
    twitter4j.PagableResponseList getUserListSubscribers(java.lang.String,int,long) -> getUserListSubscribers
    twitter4j.UserList subscribeUserList(java.lang.String,int) -> subscribeUserList
    twitter4j.UserList unsubscribeUserList(java.lang.String,int) -> unsubscribeUserList
    twitter4j.User checkUserListSubscription(java.lang.String,int,int) -> checkUserListSubscription
twitter4j.api.ListSubscribersMethodsAsync -> twitter4j.api.ListSubscribersMethodsAsync:
    void getUserListSubscribers(java.lang.String,int,long) -> getUserListSubscribers
    void subscribeUserList(java.lang.String,int) -> subscribeUserList
    void unsubscribeUserList(java.lang.String,int) -> unsubscribeUserList
    void checkUserListSubscription(java.lang.String,int,int) -> checkUserListSubscription
twitter4j.api.LocalTrendsMethods -> twitter4j.api.LocalTrendsMethods:
    twitter4j.ResponseList getAvailableTrends() -> getAvailableTrends
    twitter4j.ResponseList getAvailableTrends(twitter4j.GeoLocation) -> getAvailableTrends
    twitter4j.Trends getLocationTrends(int) -> getLocationTrends
twitter4j.api.LocalTrendsMethodsAsync -> twitter4j.api.LocalTrendsMethodsAsync:
    void getAvailableTrends() -> getAvailableTrends
    void getAvailableTrends(twitter4j.GeoLocation) -> getAvailableTrends
    void getLocationTrends(int) -> getLocationTrends
twitter4j.api.NewTwitterMethods -> twitter4j.api.NewTwitterMethods:
    twitter4j.RelatedResults getRelatedResults(long) -> getRelatedResults
twitter4j.api.NewTwitterMethodsAsync -> twitter4j.api.NewTwitterMethodsAsync:
    void getRelatedResults(long) -> getRelatedResults
twitter4j.api.NotificationMethods -> twitter4j.api.NotificationMethods:
    twitter4j.User enableNotification(java.lang.String) -> enableNotification
    twitter4j.User enableNotification(int) -> enableNotification
    twitter4j.User disableNotification(java.lang.String) -> disableNotification
    twitter4j.User disableNotification(int) -> disableNotification
twitter4j.api.NotificationMethodsAsync -> twitter4j.api.NotificationMethodsAsync:
    void enableNotification(java.lang.String) -> enableNotification
    void enableNotification(int) -> enableNotification
    void disableNotification(java.lang.String) -> disableNotification
    void disableNotification(int) -> disableNotification
twitter4j.api.SavedSearchesMethods -> twitter4j.api.SavedSearchesMethods:
    java.util.List getSavedSearches() -> getSavedSearches
    twitter4j.SavedSearch showSavedSearch(int) -> showSavedSearch
    twitter4j.SavedSearch createSavedSearch(java.lang.String) -> createSavedSearch
    twitter4j.SavedSearch destroySavedSearch(int) -> destroySavedSearch
twitter4j.api.SavedSearchesMethodsAsync -> twitter4j.api.SavedSearchesMethodsAsync:
twitter4j.api.SearchMethods -> twitter4j.api.SearchMethods:
    twitter4j.QueryResult search(twitter4j.Query) -> search
twitter4j.api.SearchMethodsAsync -> twitter4j.api.SearchMethodsAsync:
    void search(twitter4j.Query) -> search
twitter4j.api.SpamReportingMethods -> twitter4j.api.SpamReportingMethods:
    twitter4j.User reportSpam(int) -> reportSpam
    twitter4j.User reportSpam(java.lang.String) -> reportSpam
twitter4j.api.SpamReportingMethodsAsync -> twitter4j.api.SpamReportingMethodsAsync:
    void reportSpam(int) -> reportSpam
    void reportSpam(java.lang.String) -> reportSpam
twitter4j.api.StatusMethods -> twitter4j.api.StatusMethods:
    twitter4j.Status showStatus(long) -> showStatus
    twitter4j.Status updateStatus(java.lang.String) -> updateStatus
    twitter4j.Status updateStatus(java.lang.String,twitter4j.GeoLocation) -> updateStatus
    twitter4j.Status updateStatus(java.lang.String,long) -> updateStatus
    twitter4j.Status updateStatus(java.lang.String,long,twitter4j.GeoLocation) -> updateStatus
    twitter4j.Status updateStatus(twitter4j.StatusUpdate) -> updateStatus
    twitter4j.Status destroyStatus(long) -> destroyStatus
    twitter4j.Status retweetStatus(long) -> retweetStatus
    twitter4j.ResponseList getRetweets(long) -> getRetweets
    twitter4j.ResponseList getRetweetedBy(long) -> getRetweetedBy
    twitter4j.ResponseList getRetweetedBy(long,twitter4j.Paging) -> getRetweetedBy
    twitter4j.IDs getRetweetedByIDs(long) -> getRetweetedByIDs
    twitter4j.IDs getRetweetedByIDs(long,twitter4j.Paging) -> getRetweetedByIDs
twitter4j.api.StatusMethodsAsync -> twitter4j.api.StatusMethodsAsync:
    void showStatus(long) -> showStatus
    void updateStatus(java.lang.String) -> updateStatus
    void updateStatus(java.lang.String,twitter4j.GeoLocation) -> updateStatus
    void updateStatus(java.lang.String,long) -> updateStatus
    void updateStatus(java.lang.String,long,twitter4j.GeoLocation) -> updateStatus
    void updateStatus(twitter4j.StatusUpdate) -> updateStatus
    void destroyStatus(long) -> destroyStatus
    void retweetStatus(long) -> retweetStatus
    void getRetweets(long) -> getRetweets
    void getRetweetedBy(long) -> getRetweetedBy
    void getRetweetedBy(long,twitter4j.Paging) -> getRetweetedBy
    void getRetweetedByIDs(long) -> getRetweetedByIDs
    void getRetweetedByIDs(long,twitter4j.Paging) -> getRetweetedByIDs
twitter4j.api.TimelineMethods -> twitter4j.api.TimelineMethods:
    twitter4j.ResponseList getPublicTimeline() -> getPublicTimeline
    twitter4j.ResponseList getHomeTimeline() -> getHomeTimeline
    twitter4j.ResponseList getHomeTimeline(twitter4j.Paging) -> getHomeTimeline
    twitter4j.ResponseList getFriendsTimeline() -> getFriendsTimeline
    twitter4j.ResponseList getFriendsTimeline(twitter4j.Paging) -> getFriendsTimeline
    twitter4j.ResponseList getUserTimeline(java.lang.String,twitter4j.Paging) -> getUserTimeline
    twitter4j.ResponseList getUserTimeline(int,twitter4j.Paging) -> getUserTimeline
    twitter4j.ResponseList getUserTimeline(java.lang.String) -> getUserTimeline
    twitter4j.ResponseList getUserTimeline(int) -> getUserTimeline
    twitter4j.ResponseList getUserTimeline() -> getUserTimeline
    twitter4j.ResponseList getUserTimeline(twitter4j.Paging) -> getUserTimeline
    twitter4j.ResponseList getMentions() -> getMentions
    twitter4j.ResponseList getMentions(twitter4j.Paging) -> getMentions
    twitter4j.ResponseList getRetweetedByMe() -> getRetweetedByMe
    twitter4j.ResponseList getRetweetedByMe(twitter4j.Paging) -> getRetweetedByMe
    twitter4j.ResponseList getRetweetedToMe() -> getRetweetedToMe
    twitter4j.ResponseList getRetweetedToMe(twitter4j.Paging) -> getRetweetedToMe
    twitter4j.ResponseList getRetweetsOfMe() -> getRetweetsOfMe
    twitter4j.ResponseList getRetweetsOfMe(twitter4j.Paging) -> getRetweetsOfMe
    twitter4j.ResponseList getRetweetedToUser(java.lang.String,twitter4j.Paging) -> getRetweetedToUser
    twitter4j.ResponseList getRetweetedToUser(int,twitter4j.Paging) -> getRetweetedToUser
    twitter4j.ResponseList getRetweetedByUser(java.lang.String,twitter4j.Paging) -> getRetweetedByUser
    twitter4j.ResponseList getRetweetedByUser(int,twitter4j.Paging) -> getRetweetedByUser
twitter4j.api.TimelineMethodsAsync -> twitter4j.api.TimelineMethodsAsync:
    void getPublicTimeline() -> getPublicTimeline
    void getHomeTimeline() -> getHomeTimeline
    void getHomeTimeline(twitter4j.Paging) -> getHomeTimeline
    void getFriendsTimeline() -> getFriendsTimeline
    void getFriendsTimeline(twitter4j.Paging) -> getFriendsTimeline
    void getUserTimeline(java.lang.String,twitter4j.Paging) -> getUserTimeline
    void getUserTimeline(int,twitter4j.Paging) -> getUserTimeline
    void getUserTimeline(twitter4j.Paging) -> getUserTimeline
    void getUserTimeline(java.lang.String) -> getUserTimeline
    void getUserTimeline(int) -> getUserTimeline
    void getUserTimeline() -> getUserTimeline
    void getMentions() -> getMentions
    void getMentions(twitter4j.Paging) -> getMentions
    void getRetweetedByMe() -> getRetweetedByMe
    void getRetweetedByMe(twitter4j.Paging) -> getRetweetedByMe
    void getRetweetedToMe() -> getRetweetedToMe
    void getRetweetedToMe(twitter4j.Paging) -> getRetweetedToMe
    void getRetweetsOfMe() -> getRetweetsOfMe
    void getRetweetsOfMe(twitter4j.Paging) -> getRetweetsOfMe
    void getRetweetedToUser(java.lang.String,twitter4j.Paging) -> getRetweetedToUser
    void getRetweetedToUser(int,twitter4j.Paging) -> getRetweetedToUser
    void getRetweetedByUser(java.lang.String,twitter4j.Paging) -> getRetweetedByUser
    void getRetweetedByUser(int,twitter4j.Paging) -> getRetweetedByUser
twitter4j.api.TrendsMethods -> twitter4j.api.TrendsMethods:
    twitter4j.Trends getTrends() -> getTrends
    twitter4j.Trends getCurrentTrends() -> getCurrentTrends
    twitter4j.Trends getCurrentTrends(boolean) -> getCurrentTrends
    java.util.List getDailyTrends() -> getDailyTrends
    java.util.List getDailyTrends(java.util.Date,boolean) -> getDailyTrends
    java.util.List getWeeklyTrends() -> getWeeklyTrends
    java.util.List getWeeklyTrends(java.util.Date,boolean) -> getWeeklyTrends
twitter4j.api.TrendsMethodsAsync -> twitter4j.api.TrendsMethodsAsync:
    void getTrends() -> getTrends
    void getCurrentTrends() -> getCurrentTrends
    void getCurrentTrends(boolean) -> getCurrentTrends
    void getDailyTrends() -> getDailyTrends
    void getDailyTrends(java.util.Date,boolean) -> getDailyTrends
    void getWeeklyTrends() -> getWeeklyTrends
    void getWeeklyTrends(java.util.Date,boolean) -> getWeeklyTrends
twitter4j.api.UserMethods -> twitter4j.api.UserMethods:
    twitter4j.User showUser(java.lang.String) -> showUser
    twitter4j.User showUser(int) -> showUser
    twitter4j.ResponseList lookupUsers(java.lang.String[]) -> lookupUsers
    twitter4j.ResponseList lookupUsers(int[]) -> lookupUsers
    twitter4j.ResponseList searchUsers(java.lang.String,int) -> searchUsers
    twitter4j.ResponseList getSuggestedUserCategories() -> getSuggestedUserCategories
    twitter4j.ResponseList getUserSuggestions(java.lang.String) -> getUserSuggestions
    twitter4j.ResponseList getMemberSuggestions(java.lang.String) -> getMemberSuggestions
    twitter4j.ProfileImage getProfileImage(java.lang.String,twitter4j.ProfileImage$ImageSize) -> getProfileImage
    twitter4j.PagableResponseList getFriendsStatuses() -> getFriendsStatuses
    twitter4j.PagableResponseList getFriendsStatuses(long) -> getFriendsStatuses
    twitter4j.PagableResponseList getFriendsStatuses(java.lang.String) -> getFriendsStatuses
    twitter4j.PagableResponseList getFriendsStatuses(int) -> getFriendsStatuses
    twitter4j.PagableResponseList getFriendsStatuses(java.lang.String,long) -> getFriendsStatuses
    twitter4j.PagableResponseList getFriendsStatuses(int,long) -> getFriendsStatuses
    twitter4j.PagableResponseList getFollowersStatuses() -> getFollowersStatuses
    twitter4j.PagableResponseList getFollowersStatuses(long) -> getFollowersStatuses
    twitter4j.PagableResponseList getFollowersStatuses(java.lang.String) -> getFollowersStatuses
    twitter4j.PagableResponseList getFollowersStatuses(int) -> getFollowersStatuses
    twitter4j.PagableResponseList getFollowersStatuses(java.lang.String,long) -> getFollowersStatuses
    twitter4j.PagableResponseList getFollowersStatuses(int,long) -> getFollowersStatuses
twitter4j.api.UserMethodsAsync -> twitter4j.api.UserMethodsAsync:
    void showUser(java.lang.String) -> showUser
    void showUser(int) -> showUser
    void lookupUsers(java.lang.String[]) -> lookupUsers
    void lookupUsers(int[]) -> lookupUsers
    void searchUsers(java.lang.String,int) -> searchUsers
    void getSuggestedUserCategories() -> getSuggestedUserCategories
    void getUserSuggestions(java.lang.String) -> getUserSuggestions
    void getMemberSuggestions(java.lang.String) -> getMemberSuggestions
    void getProfileImage(java.lang.String,twitter4j.ProfileImage$ImageSize) -> getProfileImage
    void getFriendsStatuses() -> getFriendsStatuses
    void getFriendsStatuses(long) -> getFriendsStatuses
    void getFriendsStatuses(java.lang.String) -> getFriendsStatuses
    void getFriendsStatuses(int) -> getFriendsStatuses
    void getFriendsStatuses(java.lang.String,long) -> getFriendsStatuses
    void getFriendsStatuses(int,long) -> getFriendsStatuses
    void getFollowersStatuses() -> getFollowersStatuses
    void getFollowersStatuses(long) -> getFollowersStatuses
    void getFollowersStatuses(java.lang.String) -> getFollowersStatuses
    void getFollowersStatuses(int) -> getFollowersStatuses
    void getFollowersStatuses(java.lang.String,long) -> getFollowersStatuses
    void getFollowersStatuses(int,long) -> getFollowersStatuses
twitter4j.conf.Configuration -> twitter4j.conf.Configuration:
    boolean isDalvik() -> isDalvik
    boolean isDebugEnabled() -> isDebugEnabled
    java.lang.String getUserAgent() -> getUserAgent
    java.lang.String getSource() -> getSource
    java.lang.String getUser() -> getUser
    java.lang.String getPassword() -> getPassword
    java.util.Map getRequestHeaders() -> getRequestHeaders
    java.lang.String getHttpProxyHost() -> getHttpProxyHost
    java.lang.String getHttpProxyUser() -> getHttpProxyUser
    java.lang.String getHttpProxyPassword() -> getHttpProxyPassword
    int getHttpProxyPort() -> getHttpProxyPort
    int getHttpConnectionTimeout() -> getHttpConnectionTimeout
    int getHttpReadTimeout() -> getHttpReadTimeout
    int getHttpStreamingReadTimeout() -> getHttpStreamingReadTimeout
    int getHttpRetryCount() -> getHttpRetryCount
    int getHttpRetryIntervalSeconds() -> getHttpRetryIntervalSeconds
    int getHttpMaxTotalConnections() -> getHttpMaxTotalConnections
    int getHttpDefaultMaxPerRoute() -> getHttpDefaultMaxPerRoute
    java.lang.String getOAuthConsumerKey() -> getOAuthConsumerKey
    java.lang.String getOAuthConsumerSecret() -> getOAuthConsumerSecret
    java.lang.String getOAuthAccessToken() -> getOAuthAccessToken
    java.lang.String getOAuthAccessTokenSecret() -> getOAuthAccessTokenSecret
    java.lang.String getClientVersion() -> getClientVersion
    java.lang.String getClientURL() -> getClientURL
    java.lang.String getRestBaseURL() -> getRestBaseURL
    java.lang.String getSearchBaseURL() -> getSearchBaseURL
    java.lang.String getStreamBaseURL() -> getStreamBaseURL
    java.lang.String getOAuthRequestTokenURL() -> getOAuthRequestTokenURL
    java.lang.String getOAuthAuthorizationURL() -> getOAuthAuthorizationURL
    java.lang.String getOAuthAccessTokenURL() -> getOAuthAccessTokenURL
    java.lang.String getOAuthAuthenticationURL() -> getOAuthAuthenticationURL
    java.lang.String getUserStreamBaseURL() -> getUserStreamBaseURL
    java.lang.String getSiteStreamBaseURL() -> getSiteStreamBaseURL
    boolean isIncludeRTsEnabled() -> isIncludeRTsEnabled
    boolean isIncludeEntitiesEnabled() -> isIncludeEntitiesEnabled
    boolean isUserStreamRepliesAllEnabled() -> isUserStreamRepliesAllEnabled
    java.lang.String getMediaProvider() -> getMediaProvider
    java.lang.String getMediaProviderAPIKey() -> getMediaProviderAPIKey
twitter4j.conf.ConfigurationBase -> twitter4j.conf.ConfigurationBase:
    boolean debug -> debug
    java.lang.String source -> source
    java.lang.String userAgent -> userAgent
    java.lang.String user -> user
    java.lang.String password -> password
    boolean useSSL -> useSSL
    java.lang.String httpProxyHost -> httpProxyHost
    java.lang.String httpProxyUser -> httpProxyUser
    java.lang.String httpProxyPassword -> httpProxyPassword
    int httpProxyPort -> httpProxyPort
    int httpConnectionTimeout -> httpConnectionTimeout
    int httpReadTimeout -> httpReadTimeout
    int httpStreamingReadTimeout -> httpStreamingReadTimeout
    int httpRetryCount -> httpRetryCount
    int httpRetryIntervalSeconds -> httpRetryIntervalSeconds
    int maxTotalConnections -> maxTotalConnections
    int defaultMaxPerRoute -> defaultMaxPerRoute
    java.lang.String oAuthConsumerKey -> oAuthConsumerKey
    java.lang.String oAuthConsumerSecret -> oAuthConsumerSecret
    java.lang.String oAuthAccessToken -> oAuthAccessToken
    java.lang.String oAuthAccessTokenSecret -> oAuthAccessTokenSecret
    java.lang.String oAuthRequestTokenURL -> oAuthRequestTokenURL
    java.lang.String oAuthAuthorizationURL -> oAuthAuthorizationURL
    java.lang.String oAuthAccessTokenURL -> oAuthAccessTokenURL
    java.lang.String oAuthAuthenticationURL -> oAuthAuthenticationURL
    java.lang.String restBaseURL -> restBaseURL
    java.lang.String searchBaseURL -> searchBaseURL
    java.lang.String streamBaseURL -> streamBaseURL
    java.lang.String userStreamBaseURL -> userStreamBaseURL
    java.lang.String siteStreamBaseURL -> siteStreamBaseURL
    java.lang.String dispatcherImpl -> dispatcherImpl
    int asyncNumThreads -> asyncNumThreads
    boolean includeRTsEnabled -> includeRTsEnabled
    boolean includeEntitiesEnabled -> includeEntitiesEnabled
    boolean userStreamRepliesAllEnabled -> userStreamRepliesAllEnabled
    java.lang.String mediaProvider -> mediaProvider
    java.lang.String mediaProviderAPIKey -> mediaProviderAPIKey
    java.lang.String clientVersion -> clientVersion
    java.lang.String clientURL -> clientURL
    java.lang.String DALVIK -> DALVIK
    java.lang.String DEFAULT_OAUTH_REQUEST_TOKEN_URL -> DEFAULT_OAUTH_REQUEST_TOKEN_URL
    java.lang.String DEFAULT_OAUTH_AUTHORIZATION_URL -> DEFAULT_OAUTH_AUTHORIZATION_URL
    java.lang.String DEFAULT_OAUTH_ACCESS_TOKEN_URL -> DEFAULT_OAUTH_ACCESS_TOKEN_URL
    java.lang.String DEFAULT_OAUTH_AUTHENTICATION_URL -> DEFAULT_OAUTH_AUTHENTICATION_URL
    java.lang.String DEFAULT_REST_BASE_URL -> DEFAULT_REST_BASE_URL
    java.lang.String DEFAULT_SEARCH_BASE_URL -> DEFAULT_SEARCH_BASE_URL
    java.lang.String DEFAULT_STREAM_BASE_URL -> DEFAULT_STREAM_BASE_URL
    java.lang.String DEFAULT_USER_STREAM_BASE_URL -> DEFAULT_USER_STREAM_BASE_URL
    java.lang.String DEFAULT_SITE_STREAM_BASE_URL -> DEFAULT_SITE_STREAM_BASE_URL
    boolean IS_DALVIK -> IS_DALVIK
    long serialVersionUID -> serialVersionUID
    java.lang.String dalvikDetected -> dalvikDetected
    java.util.Map requestHeaders -> requestHeaders
    boolean isDalvik() -> isDalvik
    boolean isDebugEnabled() -> isDebugEnabled
    void setDebug(boolean) -> setDebug
    java.lang.String getUserAgent() -> getUserAgent
    void setUserAgent(java.lang.String) -> setUserAgent
    java.lang.String getSource() -> getSource
    void setSource(java.lang.String) -> setSource
    java.lang.String getUser() -> getUser
    void setUser(java.lang.String) -> setUser
    java.lang.String getPassword() -> getPassword
    void setPassword(java.lang.String) -> setPassword
    void setUseSSL(boolean) -> setUseSSL
    void initRequestHeaders() -> initRequestHeaders
    java.util.Map getRequestHeaders() -> getRequestHeaders
    java.lang.String getHttpProxyHost() -> getHttpProxyHost
    void setHttpProxyHost(java.lang.String) -> setHttpProxyHost
    java.lang.String getHttpProxyUser() -> getHttpProxyUser
    void setHttpProxyUser(java.lang.String) -> setHttpProxyUser
    java.lang.String getHttpProxyPassword() -> getHttpProxyPassword
    void setHttpProxyPassword(java.lang.String) -> setHttpProxyPassword
    int getHttpProxyPort() -> getHttpProxyPort
    void setHttpProxyPort(int) -> setHttpProxyPort
    int getHttpConnectionTimeout() -> getHttpConnectionTimeout
    void setHttpConnectionTimeout(int) -> setHttpConnectionTimeout
    int getHttpReadTimeout() -> getHttpReadTimeout
    void setHttpReadTimeout(int) -> setHttpReadTimeout
    int getHttpStreamingReadTimeout() -> getHttpStreamingReadTimeout
    void setHttpStreamingReadTimeout(int) -> setHttpStreamingReadTimeout
    int getHttpRetryCount() -> getHttpRetryCount
    void setHttpRetryCount(int) -> setHttpRetryCount
    int getHttpRetryIntervalSeconds() -> getHttpRetryIntervalSeconds
    void setHttpRetryIntervalSeconds(int) -> setHttpRetryIntervalSeconds
    int getHttpMaxTotalConnections() -> getHttpMaxTotalConnections
    void setHttpMaxTotalConnections(int) -> setHttpMaxTotalConnections
    int getHttpDefaultMaxPerRoute() -> getHttpDefaultMaxPerRoute
    void setHttpDefaultMaxPerRoute(int) -> setHttpDefaultMaxPerRoute
    java.lang.String getOAuthConsumerKey() -> getOAuthConsumerKey
    void setOAuthConsumerKey(java.lang.String) -> setOAuthConsumerKey
    java.lang.String getOAuthConsumerSecret() -> getOAuthConsumerSecret
    void setOAuthConsumerSecret(java.lang.String) -> setOAuthConsumerSecret
    java.lang.String getOAuthAccessToken() -> getOAuthAccessToken
    void setOAuthAccessToken(java.lang.String) -> setOAuthAccessToken
    java.lang.String getOAuthAccessTokenSecret() -> getOAuthAccessTokenSecret
    void setOAuthAccessTokenSecret(java.lang.String) -> setOAuthAccessTokenSecret
    int getAsyncNumThreads() -> getAsyncNumThreads
    void setAsyncNumThreads(int) -> setAsyncNumThreads
    java.lang.String getClientVersion() -> getClientVersion
    void setClientVersion(java.lang.String) -> setClientVersion
    java.lang.String getClientURL() -> getClientURL
    void setClientURL(java.lang.String) -> setClientURL
    java.lang.String getRestBaseURL() -> getRestBaseURL
    void setRestBaseURL(java.lang.String) -> setRestBaseURL
    void fixRestBaseURL() -> fixRestBaseURL
    java.lang.String getSearchBaseURL() -> getSearchBaseURL
    void setSearchBaseURL(java.lang.String) -> setSearchBaseURL
    java.lang.String getStreamBaseURL() -> getStreamBaseURL
    void setStreamBaseURL(java.lang.String) -> setStreamBaseURL
    java.lang.String getUserStreamBaseURL() -> getUserStreamBaseURL
    void setUserStreamBaseURL(java.lang.String) -> setUserStreamBaseURL
    java.lang.String getSiteStreamBaseURL() -> getSiteStreamBaseURL
    void setSiteStreamBaseURL(java.lang.String) -> setSiteStreamBaseURL
    java.lang.String getOAuthRequestTokenURL() -> getOAuthRequestTokenURL
    void setOAuthRequestTokenURL(java.lang.String) -> setOAuthRequestTokenURL
    java.lang.String getOAuthAuthorizationURL() -> getOAuthAuthorizationURL
    void setOAuthAuthorizationURL(java.lang.String) -> setOAuthAuthorizationURL
    java.lang.String getOAuthAccessTokenURL() -> getOAuthAccessTokenURL
    void setOAuthAccessTokenURL(java.lang.String) -> setOAuthAccessTokenURL
    java.lang.String getOAuthAuthenticationURL() -> getOAuthAuthenticationURL
    void setOAuthAuthenticationURL(java.lang.String) -> setOAuthAuthenticationURL
    java.lang.String getDispatcherImpl() -> getDispatcherImpl
    void setDispatcherImpl(java.lang.String) -> setDispatcherImpl
    boolean isIncludeRTsEnabled() -> isIncludeRTsEnabled
    void setIncludeRTsEnbled(boolean) -> setIncludeRTsEnbled
    boolean isIncludeEntitiesEnabled() -> isIncludeEntitiesEnabled
    void setIncludeEntitiesEnbled(boolean) -> setIncludeEntitiesEnbled
    boolean isUserStreamRepliesAllEnabled() -> isUserStreamRepliesAllEnabled
    void setUserStreamRepliesAllEnabled(boolean) -> setUserStreamRepliesAllEnabled
    java.lang.String getMediaProvider() -> getMediaProvider
    void setMediaProvider(java.lang.String) -> setMediaProvider
    java.lang.String getMediaProviderAPIKey() -> getMediaProviderAPIKey
    void setMediaProviderAPIKey(java.lang.String) -> setMediaProviderAPIKey
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String fixURL(boolean,java.lang.String) -> fixURL
twitter4j.conf.ConfigurationBuilder -> twitter4j.conf.ConfigurationBuilder:
    twitter4j.conf.ConfigurationBase configurationBean -> configurationBean
    twitter4j.conf.ConfigurationBuilder setUseSSL(boolean) -> setUseSSL
    twitter4j.conf.ConfigurationBuilder setDebugEnabled(boolean) -> setDebugEnabled
    twitter4j.conf.ConfigurationBuilder setSource(java.lang.String) -> setSource
    twitter4j.conf.ConfigurationBuilder setUserAgent(java.lang.String) -> setUserAgent
    twitter4j.conf.ConfigurationBuilder setUser(java.lang.String) -> setUser
    twitter4j.conf.ConfigurationBuilder setPassword(java.lang.String) -> setPassword
    twitter4j.conf.ConfigurationBuilder setHttpProxyHost(java.lang.String) -> setHttpProxyHost
    twitter4j.conf.ConfigurationBuilder setHttpProxyUser(java.lang.String) -> setHttpProxyUser
    twitter4j.conf.ConfigurationBuilder setHttpProxyPassword(java.lang.String) -> setHttpProxyPassword
    twitter4j.conf.ConfigurationBuilder setHttpProxyPort(int) -> setHttpProxyPort
    twitter4j.conf.ConfigurationBuilder setHttpConnectionTimeout(int) -> setHttpConnectionTimeout
    twitter4j.conf.ConfigurationBuilder setHttpReadTimeout(int) -> setHttpReadTimeout
    twitter4j.conf.ConfigurationBuilder setHttpStreamingReadTimeout(int) -> setHttpStreamingReadTimeout
    twitter4j.conf.ConfigurationBuilder setHttpRetryCount(int) -> setHttpRetryCount
    twitter4j.conf.ConfigurationBuilder setHttpMaxTotalConnections(int) -> setHttpMaxTotalConnections
    twitter4j.conf.ConfigurationBuilder setHttpDefaultMaxPerRoute(int) -> setHttpDefaultMaxPerRoute
    twitter4j.conf.ConfigurationBuilder setHttpRetryIntervalSeconds(int) -> setHttpRetryIntervalSeconds
    twitter4j.conf.ConfigurationBuilder setOAuthConsumerKey(java.lang.String) -> setOAuthConsumerKey
    twitter4j.conf.ConfigurationBuilder setOAuthConsumerSecret(java.lang.String) -> setOAuthConsumerSecret
    twitter4j.conf.ConfigurationBuilder setOAuthAccessToken(java.lang.String) -> setOAuthAccessToken
    twitter4j.conf.ConfigurationBuilder setOAuthAccessTokenSecret(java.lang.String) -> setOAuthAccessTokenSecret
    twitter4j.conf.ConfigurationBuilder setOAuthRequestTokenURL(java.lang.String) -> setOAuthRequestTokenURL
    twitter4j.conf.ConfigurationBuilder setOAuthAuthorizationURL(java.lang.String) -> setOAuthAuthorizationURL
    twitter4j.conf.ConfigurationBuilder setOAuthAccessTokenURL(java.lang.String) -> setOAuthAccessTokenURL
    twitter4j.conf.ConfigurationBuilder setOAuthAuthenticationURL(java.lang.String) -> setOAuthAuthenticationURL
    twitter4j.conf.ConfigurationBuilder setRestBaseURL(java.lang.String) -> setRestBaseURL
    twitter4j.conf.ConfigurationBuilder setSearchBaseURL(java.lang.String) -> setSearchBaseURL
    twitter4j.conf.ConfigurationBuilder setStreamBaseURL(java.lang.String) -> setStreamBaseURL
    twitter4j.conf.ConfigurationBuilder setUserStreamBaseURL(java.lang.String) -> setUserStreamBaseURL
    twitter4j.conf.ConfigurationBuilder setSiteStreamBaseURL(java.lang.String) -> setSiteStreamBaseURL
    twitter4j.conf.ConfigurationBuilder setAsyncNumThreads(int) -> setAsyncNumThreads
    twitter4j.conf.ConfigurationBuilder setClientVersion(java.lang.String) -> setClientVersion
    twitter4j.conf.ConfigurationBuilder setClientURL(java.lang.String) -> setClientURL
    twitter4j.conf.ConfigurationBuilder setDispatcherImpl(java.lang.String) -> setDispatcherImpl
    twitter4j.conf.ConfigurationBuilder setIncludeRTsEnabled(boolean) -> setIncludeRTsEnabled
    twitter4j.conf.ConfigurationBuilder setIncludeEntitiesEnabled(boolean) -> setIncludeEntitiesEnabled
    twitter4j.conf.ConfigurationBuilder setUserStreamRepliesAllEnabled(boolean) -> setUserStreamRepliesAllEnabled
    twitter4j.conf.ConfigurationBuilder setMediaProvider(java.lang.String) -> setMediaProvider
    twitter4j.conf.ConfigurationBuilder setMediaProviderAPIKey(java.lang.String) -> setMediaProviderAPIKey
    twitter4j.conf.Configuration build() -> build
    void checkNotBuilt() -> checkNotBuilt
twitter4j.conf.ConfigurationContext -> twitter4j.conf.ConfigurationContext:
    java.lang.String DEFAULT_CONFIGURATION_FACTORY -> DEFAULT_CONFIGURATION_FACTORY
    java.lang.String CONFIGURATION_IMPL -> CONFIGURATION_IMPL
    twitter4j.conf.ConfigurationFactory factory -> factory
    twitter4j.conf.Configuration getInstance() -> getInstance
    twitter4j.conf.Configuration getInstance(java.lang.String) -> getInstance
twitter4j.conf.ConfigurationFactory -> twitter4j.conf.ConfigurationFactory:
    twitter4j.conf.Configuration getInstance() -> getInstance
    twitter4j.conf.Configuration getInstance(java.lang.String) -> getInstance
    void dispose() -> dispose
twitter4j.conf.PropertyConfiguration -> twitter4j.conf.PropertyConfiguration:
    java.lang.String DEBUG -> DEBUG
    java.lang.String SOURCE -> SOURCE
    java.lang.String HTTP_USER_AGENT -> HTTP_USER_AGENT
    java.lang.String USER -> USER
    java.lang.String PASSWORD -> PASSWORD
    java.lang.String HTTP_USE_SSL -> HTTP_USE_SSL
    java.lang.String HTTP_PROXY_HOST -> HTTP_PROXY_HOST
    java.lang.String HTTP_PROXY_HOST_FALLBACK -> HTTP_PROXY_HOST_FALLBACK
    java.lang.String HTTP_PROXY_USER -> HTTP_PROXY_USER
    java.lang.String HTTP_PROXY_PASSWORD -> HTTP_PROXY_PASSWORD
    java.lang.String HTTP_PROXY_PORT -> HTTP_PROXY_PORT
    java.lang.String HTTP_PROXY_PORT_FALLBACK -> HTTP_PROXY_PORT_FALLBACK
    java.lang.String HTTP_CONNECTION_TIMEOUT -> HTTP_CONNECTION_TIMEOUT
    java.lang.String HTTP_READ_TIMEOUT -> HTTP_READ_TIMEOUT
    java.lang.String HTTP_STREAMING_READ_TIMEOUT -> HTTP_STREAMING_READ_TIMEOUT
    java.lang.String HTTP_RETRY_COUNT -> HTTP_RETRY_COUNT
    java.lang.String HTTP_RETRY_INTERVAL_SECS -> HTTP_RETRY_INTERVAL_SECS
    java.lang.String HTTP_MAX_TOTAL_CONNECTIONS -> HTTP_MAX_TOTAL_CONNECTIONS
    java.lang.String HTTP_DEFAULT_MAX_PER_ROUTE -> HTTP_DEFAULT_MAX_PER_ROUTE
    java.lang.String OAUTH_CONSUMER_KEY -> OAUTH_CONSUMER_KEY
    java.lang.String OAUTH_CONSUMER_SECRET -> OAUTH_CONSUMER_SECRET
    java.lang.String OAUTH_ACCESS_TOKEN -> OAUTH_ACCESS_TOKEN
    java.lang.String OAUTH_ACCESS_TOKEN_SECRET -> OAUTH_ACCESS_TOKEN_SECRET
    java.lang.String OAUTH_REQUEST_TOKEN_URL -> OAUTH_REQUEST_TOKEN_URL
    java.lang.String OAUTH_AUTHORIZATION_URL -> OAUTH_AUTHORIZATION_URL
    java.lang.String OAUTH_ACCESS_TOKEN_URL -> OAUTH_ACCESS_TOKEN_URL
    java.lang.String OAUTH_AUTHENTICATION_URL -> OAUTH_AUTHENTICATION_URL
    java.lang.String REST_BASE_URL -> REST_BASE_URL
    java.lang.String SEARCH_BASE_URL -> SEARCH_BASE_URL
    java.lang.String STREAM_BASE_URL -> STREAM_BASE_URL
    java.lang.String USER_STREAM_BASE_URL -> USER_STREAM_BASE_URL
    java.lang.String SITE_STREAM_BASE_URL -> SITE_STREAM_BASE_URL
    java.lang.String ASYNC_NUM_THREADS -> ASYNC_NUM_THREADS
    java.lang.String ASYNC_DISPATCHER_IMPL -> ASYNC_DISPATCHER_IMPL
    java.lang.String INCLUDE_RTS -> INCLUDE_RTS
    java.lang.String INCLUDE_ENTITIES -> INCLUDE_ENTITIES
    java.lang.String STREAM_USER_REPLIES_ALL -> STREAM_USER_REPLIES_ALL
    java.lang.String MEDIA_PROVIDER -> MEDIA_PROVIDER
    java.lang.String MEDIA_PROVIDER_API_KEY -> MEDIA_PROVIDER_API_KEY
    java.lang.String CLIENT_VERSION -> CLIENT_VERSION
    java.lang.String CLIENT_URL -> CLIENT_URL
    long serialVersionUID -> serialVersionUID
    java.lang.Class class$twitter4j$conf$Configuration -> class$twitter4j$conf$Configuration
    boolean notNull(java.util.Properties,java.lang.String,java.lang.String) -> notNull
    boolean loadProperties(java.util.Properties,java.lang.String) -> loadProperties
    boolean loadProperties(java.util.Properties,java.io.InputStream) -> loadProperties
    void normalize(java.util.Properties) -> normalize
    void setFieldsWithTreePath(java.util.Properties,java.lang.String) -> setFieldsWithTreePath
    void setFieldsWithPrefix(java.util.Properties,java.lang.String) -> setFieldsWithPrefix
    boolean getBoolean(java.util.Properties,java.lang.String,java.lang.String) -> getBoolean
    int getIntProperty(java.util.Properties,java.lang.String,java.lang.String) -> getIntProperty
    java.lang.String getString(java.util.Properties,java.lang.String,java.lang.String) -> getString
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    java.lang.String getMediaProviderAPIKey() -> getMediaProviderAPIKey
    java.lang.String getMediaProvider() -> getMediaProvider
    boolean isUserStreamRepliesAllEnabled() -> isUserStreamRepliesAllEnabled
    boolean isIncludeEntitiesEnabled() -> isIncludeEntitiesEnabled
    boolean isIncludeRTsEnabled() -> isIncludeRTsEnabled
    java.lang.String getDispatcherImpl() -> getDispatcherImpl
    java.lang.String getOAuthAuthenticationURL() -> getOAuthAuthenticationURL
    java.lang.String getOAuthAccessTokenURL() -> getOAuthAccessTokenURL
    java.lang.String getOAuthAuthorizationURL() -> getOAuthAuthorizationURL
    java.lang.String getOAuthRequestTokenURL() -> getOAuthRequestTokenURL
    java.lang.String getSiteStreamBaseURL() -> getSiteStreamBaseURL
    java.lang.String getUserStreamBaseURL() -> getUserStreamBaseURL
    java.lang.String getStreamBaseURL() -> getStreamBaseURL
    java.lang.String getSearchBaseURL() -> getSearchBaseURL
    java.lang.String getRestBaseURL() -> getRestBaseURL
    java.lang.String getOAuthAccessTokenSecret() -> getOAuthAccessTokenSecret
    java.lang.String getOAuthAccessToken() -> getOAuthAccessToken
    int getHttpStreamingReadTimeout() -> getHttpStreamingReadTimeout
    java.util.Map getRequestHeaders() -> getRequestHeaders
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.conf.PropertyConfigurationFactory -> twitter4j.conf.PropertyConfigurationFactory:
    twitter4j.conf.PropertyConfiguration ROOT_CONFIGURATION -> ROOT_CONFIGURATION
    twitter4j.conf.Configuration getInstance() -> getInstance
    twitter4j.conf.Configuration getInstance(java.lang.String) -> getInstance
    void dispose() -> dispose
twitter4j.http.AccessToken -> twitter4j.http.AccessToken:
    long serialVersionUID -> serialVersionUID
    java.lang.String screenName -> screenName
    int userId -> userId
    java.lang.String getScreenName() -> getScreenName
    int getUserId() -> getUserId
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getTokenSecret() -> getTokenSecret
    java.lang.String getToken() -> getToken
twitter4j.http.Authorization -> twitter4j.http.Authorization:
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> getAuthorizationHeader
    boolean isEnabled() -> isEnabled
twitter4j.http.AuthorizationConfiguration -> twitter4j.http.AuthorizationConfiguration:
    java.lang.String getUser() -> getUser
    java.lang.String getPassword() -> getPassword
    java.lang.String getOAuthConsumerKey() -> getOAuthConsumerKey
    java.lang.String getOAuthConsumerSecret() -> getOAuthConsumerSecret
    java.lang.String getOAuthAccessToken() -> getOAuthAccessToken
    java.lang.String getOAuthAccessTokenSecret() -> getOAuthAccessTokenSecret
twitter4j.http.AuthorizationFactory -> twitter4j.http.AuthorizationFactory:
    twitter4j.http.Authorization getInstance(twitter4j.conf.Configuration,boolean) -> getInstance
    twitter4j.http.Authorization getBasicAuthorizationInstance(java.lang.String,java.lang.String) -> getBasicAuthorizationInstance
twitter4j.http.BasicAuthorization -> twitter4j.http.BasicAuthorization:
    java.lang.String userId -> userId
    java.lang.String password -> password
    java.lang.String basic -> basic
    long serialVersionUID -> serialVersionUID
    java.lang.String getUserId() -> getUserId
    java.lang.String getPassword() -> getPassword
    java.lang.String encodeBasicAuthenticationString() -> encodeBasicAuthenticationString
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> getAuthorizationHeader
    boolean isEnabled() -> isEnabled
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.http.NullAuthorization -> twitter4j.http.NullAuthorization:
    twitter4j.http.NullAuthorization SINGLETON -> SINGLETON
    long serialVersionUID -> serialVersionUID
    twitter4j.http.NullAuthorization getInstance() -> getInstance
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> getAuthorizationHeader
    boolean isEnabled() -> isEnabled
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.Object readResolve() -> readResolve
twitter4j.http.OAuthAuthorization -> twitter4j.http.OAuthAuthorization:
    twitter4j.conf.Configuration conf -> conf
    twitter4j.internal.http.HttpClientWrapper http -> http
    java.lang.String HMAC_SHA1 -> HMAC_SHA1
    twitter4j.internal.http.HttpParameter OAUTH_SIGNATURE_METHOD -> OAUTH_SIGNATURE_METHOD
    twitter4j.internal.logging.Logger logger -> logger
    long serialVersionUID -> serialVersionUID
    java.lang.String consumerKey -> consumerKey
    java.lang.String consumerSecret -> consumerSecret
    java.lang.String realm -> realm
    twitter4j.http.OAuthToken oauthToken -> oauthToken
    java.util.Random RAND -> RAND
    java.lang.Class class$twitter4j$http$OAuthAuthorization -> class$twitter4j$http$OAuthAuthorization
    void init(java.lang.String,java.lang.String) -> init
    void init(java.lang.String,java.lang.String,twitter4j.http.AccessToken) -> init
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> getAuthorizationHeader
    void ensureTokenIsAvailable() -> ensureTokenIsAvailable
    boolean isEnabled() -> isEnabled
    twitter4j.http.RequestToken getOAuthRequestToken() -> getOAuthRequestToken
    twitter4j.http.RequestToken getOAuthRequestToken(java.lang.String) -> getOAuthRequestToken
    twitter4j.http.AccessToken getOAuthAccessToken() -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(twitter4j.http.RequestToken) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(twitter4j.http.RequestToken,java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> getOAuthAccessToken
    void setOAuthAccessToken(twitter4j.http.AccessToken) -> setOAuthAccessToken
    void setOAuthRealm(java.lang.String) -> setOAuthRealm
    java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.http.OAuthToken) -> generateAuthorizationHeader
    void parseGetParameters(java.lang.String,java.util.List) -> parseGetParameters
    java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.http.OAuthToken) -> generateAuthorizationHeader
    java.util.List generateOAuthSignatureHttpParams(java.lang.String,java.lang.String) -> generateOAuthSignatureHttpParams
    java.lang.String generateSignature(java.lang.String,twitter4j.http.OAuthToken) -> generateSignature
    java.lang.String generateSignature(java.lang.String) -> generateSignature
    java.lang.String normalizeRequestParameters(twitter4j.internal.http.HttpParameter[]) -> normalizeRequestParameters
    java.lang.String normalizeRequestParameters(java.util.List) -> normalizeRequestParameters
    java.lang.String normalizeAuthorizationHeaders(java.util.List) -> normalizeAuthorizationHeaders
    java.util.List toParamList(twitter4j.internal.http.HttpParameter[]) -> toParamList
    java.lang.String encodeParameters(java.util.List) -> encodeParameters
    java.lang.String encodeParameters(java.util.List,java.lang.String,boolean) -> encodeParameters
    java.lang.String constructRequestURL(java.lang.String) -> constructRequestURL
    void setConsumerKey(java.lang.String) -> setConsumerKey
    void setConsumerSecret(java.lang.String) -> setConsumerSecret
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.http.OAuthSupport -> twitter4j.http.OAuthSupport:
    twitter4j.http.RequestToken getOAuthRequestToken() -> getOAuthRequestToken
    twitter4j.http.RequestToken getOAuthRequestToken(java.lang.String) -> getOAuthRequestToken
    twitter4j.http.AccessToken getOAuthAccessToken() -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(twitter4j.http.RequestToken) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(twitter4j.http.RequestToken,java.lang.String) -> getOAuthAccessToken
    twitter4j.http.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> getOAuthAccessToken
    void setOAuthAccessToken(twitter4j.http.AccessToken) -> setOAuthAccessToken
twitter4j.http.OAuthToken -> twitter4j.http.OAuthToken:
    java.lang.String token -> token
    java.lang.String tokenSecret -> tokenSecret
    javax.crypto.spec.SecretKeySpec secretKeySpec -> secretKeySpec
    java.lang.String[] responseStr -> responseStr
    java.lang.String getToken() -> getToken
    java.lang.String getTokenSecret() -> getTokenSecret
    void setSecretKeySpec(javax.crypto.spec.SecretKeySpec) -> setSecretKeySpec
    javax.crypto.spec.SecretKeySpec getSecretKeySpec() -> getSecretKeySpec
    java.lang.String getParameter(java.lang.String) -> getParameter
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.http.RequestToken -> twitter4j.http.RequestToken:
    twitter4j.conf.Configuration conf -> conf
    twitter4j.http.OAuthSupport oauth -> oauth
    long serialVersionUID -> serialVersionUID
    twitter4j.http.AccessToken getAccessToken() -> getAccessToken
    twitter4j.http.AccessToken getAccessToken(java.lang.String) -> getAccessToken
    java.lang.String getAuthorizationURL() -> getAuthorizationURL
    java.lang.String getAuthenticationURL() -> getAuthenticationURL
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getTokenSecret() -> getTokenSecret
    java.lang.String getToken() -> getToken
twitter4j.internal.async.Dispatcher -> twitter4j.internal.async.Dispatcher:
    void invokeLater(java.lang.Runnable) -> invokeLater
    void shutdown() -> shutdown
twitter4j.internal.async.DispatcherConfiguration -> twitter4j.internal.async.DispatcherConfiguration:
    int getAsyncNumThreads() -> getAsyncNumThreads
    java.lang.String getDispatcherImpl() -> getDispatcherImpl
twitter4j.internal.async.DispatcherFactory -> twitter4j.internal.async.DispatcherFactory:
    java.lang.String dispatcherImpl -> dispatcherImpl
    twitter4j.internal.async.DispatcherConfiguration conf -> conf
    java.lang.Class class$twitter4j$internal$async$DispatcherConfiguration -> class$twitter4j$internal$async$DispatcherConfiguration
    twitter4j.internal.async.Dispatcher getInstance() -> getInstance
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.internal.async.DispatcherImpl -> twitter4j.internal.async.DispatcherImpl:
    twitter4j.internal.async.ExecuteThread[] threads -> threads
    java.util.List q -> q
    java.lang.Object ticket -> ticket
    boolean active -> active
    void invokeLater(java.lang.Runnable) -> invokeLater
    java.lang.Runnable poll() -> poll
    void shutdown() -> shutdown
    boolean access$000(twitter4j.internal.async.DispatcherImpl) -> access$000
twitter4j.internal.async.DispatcherImpl$1 -> twitter4j.internal.async.DispatcherImpl$1:
    twitter4j.internal.async.DispatcherImpl this$0 -> this$0
    void run() -> run
twitter4j.internal.async.ExecuteThread -> twitter4j.internal.async.ExecuteThread:
    twitter4j.internal.async.DispatcherImpl q -> q
    boolean alive -> alive
    void shutdown() -> shutdown
    void run() -> run
twitter4j.internal.http.BASE64Encoder -> twitter4j.internal.http.BASE64Encoder:
    char last2byte -> last2byte
    char last4byte -> last4byte
    char last6byte -> last6byte
    char lead6byte -> lead6byte
    char lead4byte -> lead4byte
    char lead2byte -> lead2byte
    char[] encodeTable -> encodeTable
    java.lang.String encode(byte[]) -> encode
twitter4j.internal.http.HTMLEntity -> twitter4j.internal.http.HTMLEntity:
    java.util.Map entityEscapeMap -> entityEscapeMap
    java.util.Map escapeEntityMap -> escapeEntityMap
    java.lang.String escape(java.lang.String) -> escape
    void escape(java.lang.StringBuffer) -> escape
    java.lang.String unescape(java.lang.String) -> unescape
    void unescape(java.lang.StringBuffer) -> unescape
twitter4j.internal.http.HttpClient -> twitter4j.internal.http.HttpClient:
    twitter4j.internal.http.HttpResponse request(twitter4j.internal.http.HttpRequest) -> request
    void shutdown() -> shutdown
twitter4j.internal.http.HttpClientConfiguration -> twitter4j.internal.http.HttpClientConfiguration:
    java.lang.String getHttpProxyHost() -> getHttpProxyHost
    int getHttpProxyPort() -> getHttpProxyPort
    java.lang.String getHttpProxyUser() -> getHttpProxyUser
    java.lang.String getHttpProxyPassword() -> getHttpProxyPassword
    int getHttpConnectionTimeout() -> getHttpConnectionTimeout
    int getHttpReadTimeout() -> getHttpReadTimeout
    int getHttpRetryCount() -> getHttpRetryCount
    int getHttpRetryIntervalSeconds() -> getHttpRetryIntervalSeconds
    int getHttpMaxTotalConnections() -> getHttpMaxTotalConnections
    int getHttpDefaultMaxPerRoute() -> getHttpDefaultMaxPerRoute
twitter4j.internal.http.HttpClientFactory -> twitter4j.internal.http.HttpClientFactory:
    java.lang.reflect.Constructor HTTP_CLIENT_CONSTRUCTOR -> HTTP_CLIENT_CONSTRUCTOR
    twitter4j.internal.logging.Logger logger -> logger
    java.lang.Class class$twitter4j$internal$http$HttpClientFactory -> class$twitter4j$internal$http$HttpClientFactory
    java.lang.Class class$twitter4j$internal$http$HttpClientConfiguration -> class$twitter4j$internal$http$HttpClientConfiguration
    twitter4j.internal.http.HttpClient getInstance(twitter4j.internal.http.HttpClientConfiguration) -> getInstance
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.internal.http.HttpClientImpl -> twitter4j.internal.http.HttpClientImpl:
    twitter4j.internal.logging.Logger logger -> logger
    java.lang.String proxyHost -> proxyHost
    int proxyPort -> proxyPort
    java.lang.String proxyAuthUser -> proxyAuthUser
    java.lang.String proxyAuthPassword -> proxyAuthPassword
    int connectionTimeout -> connectionTimeout
    int readTimeout -> readTimeout
    int retryCount -> retryCount
    int retryIntervalSeconds -> retryIntervalSeconds
    boolean isJDK14orEarlier -> isJDK14orEarlier
    long serialVersionUID -> serialVersionUID
    java.util.Map instanceMap -> instanceMap
    java.lang.Class class$twitter4j$internal$http$HttpClientImpl -> class$twitter4j$internal$http$HttpClientImpl
    void shutdown() -> shutdown
    twitter4j.internal.http.HttpClient getInstance(twitter4j.internal.http.HttpClientConfiguration) -> getInstance
    java.lang.String getProxyHost() -> getProxyHost
    void setProxyHost(java.lang.String) -> setProxyHost
    int getProxyPort() -> getProxyPort
    void setProxyPort(int) -> setProxyPort
    java.lang.String getProxyAuthUser() -> getProxyAuthUser
    void setProxyAuthUser(java.lang.String) -> setProxyAuthUser
    java.lang.String getProxyAuthPassword() -> getProxyAuthPassword
    void setProxyAuthPassword(java.lang.String) -> setProxyAuthPassword
    int getConnectionTimeout() -> getConnectionTimeout
    void setConnectionTimeout(int) -> setConnectionTimeout
    int getReadTimeout() -> getReadTimeout
    void setReadTimeout(int) -> setReadTimeout
    void setRetryCount(int) -> setRetryCount
    void setRetryIntervalSeconds(int) -> setRetryIntervalSeconds
    twitter4j.internal.http.HttpResponse get(java.lang.String) -> get
    twitter4j.internal.http.HttpResponse post(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> post
    twitter4j.internal.http.HttpResponse request(twitter4j.internal.http.HttpRequest) -> request
    void write(java.io.DataOutputStream,java.lang.String) -> write
    java.lang.String encode(java.lang.String) -> encode
    void setHeaders(twitter4j.internal.http.HttpRequest,java.net.HttpURLConnection) -> setHeaders
    java.net.HttpURLConnection getConnection(java.lang.String) -> getConnection
    boolean isProxyConfigured() -> isProxyConfigured
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Class class$(java.lang.String) -> class$
    java.lang.String access$000(twitter4j.internal.http.HttpClientImpl) -> access$000
    java.lang.String access$100(twitter4j.internal.http.HttpClientImpl) -> access$100
twitter4j.internal.http.HttpClientImpl$1 -> twitter4j.internal.http.HttpClientImpl$1:
    twitter4j.internal.http.HttpClientImpl this$0 -> this$0
    java.net.PasswordAuthentication getPasswordAuthentication() -> getPasswordAuthentication
twitter4j.internal.http.HttpClientWrapper -> twitter4j.internal.http.HttpClientWrapper:
    twitter4j.internal.http.HttpClientWrapperConfiguration wrapperConf -> wrapperConf
    twitter4j.internal.http.HttpClient http -> http
    java.util.Map requestHeaders -> requestHeaders
    long serialVersionUID -> serialVersionUID
    twitter4j.internal.http.HttpResponseListener httpResponseListener -> httpResponseListener
    void shutdown() -> shutdown
    twitter4j.internal.http.HttpResponse request(twitter4j.internal.http.HttpRequest) -> request
    void setHttpResponseListener(twitter4j.internal.http.HttpResponseListener) -> setHttpResponseListener
    twitter4j.internal.http.HttpResponse get(java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.http.Authorization) -> get
    twitter4j.internal.http.HttpResponse get(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> get
    twitter4j.internal.http.HttpResponse get(java.lang.String,twitter4j.http.Authorization) -> get
    twitter4j.internal.http.HttpResponse get(java.lang.String) -> get
    twitter4j.internal.http.HttpResponse post(java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.http.Authorization) -> post
    twitter4j.internal.http.HttpResponse post(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> post
    twitter4j.internal.http.HttpResponse post(java.lang.String,twitter4j.internal.http.HttpParameter[],java.util.Map) -> post
    twitter4j.internal.http.HttpResponse post(java.lang.String,twitter4j.http.Authorization) -> post
    twitter4j.internal.http.HttpResponse post(java.lang.String) -> post
    twitter4j.internal.http.HttpResponse delete(java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.http.Authorization) -> delete
    twitter4j.internal.http.HttpResponse delete(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> delete
    twitter4j.internal.http.HttpResponse delete(java.lang.String,twitter4j.http.Authorization) -> delete
    twitter4j.internal.http.HttpResponse delete(java.lang.String) -> delete
    twitter4j.internal.http.HttpResponse head(java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.http.Authorization) -> head
    twitter4j.internal.http.HttpResponse head(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> head
    twitter4j.internal.http.HttpResponse head(java.lang.String,twitter4j.http.Authorization) -> head
    twitter4j.internal.http.HttpResponse head(java.lang.String) -> head
    twitter4j.internal.http.HttpResponse put(java.lang.String,twitter4j.internal.http.HttpParameter[],twitter4j.http.Authorization) -> put
    twitter4j.internal.http.HttpResponse put(java.lang.String,twitter4j.internal.http.HttpParameter[]) -> put
    twitter4j.internal.http.HttpResponse put(java.lang.String,twitter4j.http.Authorization) -> put
    twitter4j.internal.http.HttpResponse put(java.lang.String) -> put
twitter4j.internal.http.HttpClientWrapperConfiguration -> twitter4j.internal.http.HttpClientWrapperConfiguration:
    java.util.Map getRequestHeaders() -> getRequestHeaders
twitter4j.internal.http.HttpParameter -> twitter4j.internal.http.HttpParameter:
    java.lang.String name -> name
    java.lang.String value -> value
    java.io.File file -> file
    java.io.InputStream fileBody -> fileBody
    long serialVersionUID -> serialVersionUID
    java.lang.String JPEG -> JPEG
    java.lang.String GIF -> GIF
    java.lang.String PNG -> PNG
    java.lang.String OCTET -> OCTET
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    java.io.File getFile() -> getFile
    java.io.InputStream getFileBody() -> getFileBody
    boolean isFile() -> isFile
    boolean hasFileBody() -> hasFileBody
    java.lang.String getContentType() -> getContentType
    boolean equals(java.lang.Object) -> equals
    boolean containsFile(twitter4j.internal.http.HttpParameter[]) -> containsFile
    boolean containsFile(java.util.List) -> containsFile
    twitter4j.internal.http.HttpParameter[] getParameterArray(java.lang.String,java.lang.String) -> getParameterArray
    twitter4j.internal.http.HttpParameter[] getParameterArray(java.lang.String,int) -> getParameterArray
    twitter4j.internal.http.HttpParameter[] getParameterArray(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> getParameterArray
    twitter4j.internal.http.HttpParameter[] getParameterArray(java.lang.String,int,java.lang.String,int) -> getParameterArray
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
    java.lang.String encodeParameters(twitter4j.internal.http.HttpParameter[]) -> encodeParameters
    java.lang.String encode(java.lang.String) -> encode
twitter4j.internal.http.HttpRequest -> twitter4j.internal.http.HttpRequest:
    twitter4j.internal.http.RequestMethod method -> method
    java.lang.String url -> url
    twitter4j.internal.http.HttpParameter[] parameters -> parameters
    twitter4j.http.Authorization authorization -> authorization
    java.util.Map requestHeaders -> requestHeaders
    long serialVersionUID -> serialVersionUID
    twitter4j.internal.http.HttpParameter[] NULL_PARAMETERS -> NULL_PARAMETERS
    twitter4j.internal.http.RequestMethod getMethod() -> getMethod
    twitter4j.internal.http.HttpParameter[] getParameters() -> getParameters
    java.lang.String getURL() -> getURL
    twitter4j.http.Authorization getAuthorization() -> getAuthorization
    java.util.Map getRequestHeaders() -> getRequestHeaders
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.http.HttpResponse -> twitter4j.internal.http.HttpResponse:
    twitter4j.internal.logging.Logger logger -> logger
    java.lang.ThreadLocal builders -> builders
    int statusCode -> statusCode
    org.w3c.dom.Document responseAsDocument -> responseAsDocument
    java.lang.String responseAsString -> responseAsString
    java.io.InputStream is -> is
    boolean streamConsumed -> streamConsumed
    twitter4j.internal.org.json.JSONObject json -> json
    java.lang.Class class$twitter4j$internal$http$HttpResponseImpl -> class$twitter4j$internal$http$HttpResponseImpl
    int getStatusCode() -> getStatusCode
    java.lang.String getResponseHeader(java.lang.String) -> getResponseHeader
    java.util.Map getResponseHeaderFields() -> getResponseHeaderFields
    java.io.InputStream asStream() -> asStream
    java.lang.String asString() -> asString
    org.w3c.dom.Document asDocument() -> asDocument
    twitter4j.internal.org.json.JSONObject asJSONObject() -> asJSONObject
    twitter4j.internal.org.json.JSONArray asJSONArray() -> asJSONArray
    java.io.InputStreamReader asReader() -> asReader
    void disconnectForcibly() -> disconnectForcibly
    void disconnect() -> disconnect
    java.lang.String toString() -> toString
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.internal.http.HttpResponse$1 -> twitter4j.internal.http.HttpResponse$1:
    javax.xml.parsers.DocumentBuilder initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
twitter4j.internal.http.HttpResponseCode -> twitter4j.internal.http.HttpResponseCode:
    int OK -> OK
    int MULTIPLE_CHOICES -> MULTIPLE_CHOICES
    int FOUND -> FOUND
    int NOT_MODIFIED -> NOT_MODIFIED
    int BAD_REQUEST -> BAD_REQUEST
    int UNAUTHORIZED -> UNAUTHORIZED
    int FORBIDDEN -> FORBIDDEN
    int NOT_FOUND -> NOT_FOUND
    int NOT_ACCEPTABLE -> NOT_ACCEPTABLE
    int ENHANCE_YOUR_CLAIM -> ENHANCE_YOUR_CLAIM
    int INTERNAL_SERVER_ERROR -> INTERNAL_SERVER_ERROR
    int BAD_GATEWAY -> BAD_GATEWAY
    int SERVICE_UNAVAILABLE -> SERVICE_UNAVAILABLE
twitter4j.internal.http.HttpResponseEvent -> twitter4j.internal.http.HttpResponseEvent:
    twitter4j.internal.http.HttpRequest request -> request
    twitter4j.internal.http.HttpResponse response -> response
    twitter4j.internal.http.HttpRequest getRequest() -> getRequest
    twitter4j.internal.http.HttpResponse getResponse() -> getResponse
    boolean isAuthenticated() -> isAuthenticated
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.http.HttpResponseImpl -> twitter4j.internal.http.HttpResponseImpl:
    java.net.HttpURLConnection con -> con
    java.lang.String getResponseHeader(java.lang.String) -> getResponseHeader
    java.util.Map getResponseHeaderFields() -> getResponseHeaderFields
    void disconnect() -> disconnect
twitter4j.internal.http.HttpResponseListener -> twitter4j.internal.http.HttpResponseListener:
    void httpResponseReceived(twitter4j.internal.http.HttpResponseEvent) -> httpResponseReceived
twitter4j.internal.http.RequestMethod -> twitter4j.internal.http.RequestMethod:
    java.lang.String name -> name
    java.util.Map instances -> instances
    twitter4j.internal.http.RequestMethod GET -> GET
    twitter4j.internal.http.RequestMethod POST -> POST
    twitter4j.internal.http.RequestMethod DELETE -> DELETE
    twitter4j.internal.http.RequestMethod HEAD -> HEAD
    twitter4j.internal.http.RequestMethod PUT -> PUT
    long serialVersionUID -> serialVersionUID
    java.lang.String name() -> name
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    twitter4j.internal.http.RequestMethod getInstance(java.lang.String) -> getInstance
    java.lang.Object readResolve() -> readResolve
twitter4j.internal.http.XAuthAuthorization -> twitter4j.internal.http.XAuthAuthorization:
    twitter4j.http.BasicAuthorization basic -> basic
    java.lang.String consumerKey -> consumerKey
    java.lang.String consumerSecret -> consumerSecret
    long serialVersionUID -> serialVersionUID
    java.lang.String getAuthorizationHeader(twitter4j.internal.http.HttpRequest) -> getAuthorizationHeader
    java.lang.String getUserId() -> getUserId
    java.lang.String getPassword() -> getPassword
    java.lang.String getConsumerKey() -> getConsumerKey
    java.lang.String getConsumerSecret() -> getConsumerSecret
    void setOAuthConsumer(java.lang.String,java.lang.String) -> setOAuthConsumer
    boolean isEnabled() -> isEnabled
twitter4j.internal.json.DataObjectFactoryUtil -> twitter4j.internal.json.DataObjectFactoryUtil:
    java.lang.reflect.Method CLEAR_THREAD_LOCAL_MAP -> CLEAR_THREAD_LOCAL_MAP
    java.lang.reflect.Method REGISTER_JSON_OBJECT -> REGISTER_JSON_OBJECT
    java.lang.Class class$twitter4j$json$DataObjectFactory -> class$twitter4j$json$DataObjectFactory
    void clearThreadLocalMap() -> clearThreadLocalMap
    java.lang.Object registerJSONObject(java.lang.Object,java.lang.Object) -> registerJSONObject
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.internal.logging.CommonsLoggingLogger -> twitter4j.internal.logging.CommonsLoggingLogger:
    org.apache.commons.logging.Log LOGGER -> LOGGER
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.String) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.String) -> warn
twitter4j.internal.logging.CommonsLoggingLoggerFactory -> twitter4j.internal.logging.CommonsLoggingLoggerFactory:
    twitter4j.internal.logging.Logger getLogger(java.lang.Class) -> getLogger
twitter4j.internal.logging.Log4JLogger -> twitter4j.internal.logging.Log4JLogger:
    org.apache.log4j.Logger LOGGER -> LOGGER
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.String) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.String) -> warn
twitter4j.internal.logging.Log4JLoggerFactory -> twitter4j.internal.logging.Log4JLoggerFactory:
    twitter4j.internal.logging.Logger getLogger(java.lang.Class) -> getLogger
twitter4j.internal.logging.Logger -> twitter4j.internal.logging.Logger:
    twitter4j.internal.logging.LoggerFactory LOGGER_FACTORY -> LOGGER_FACTORY
    java.lang.String LOGGER_FACTORY_IMPLEMENTATION -> LOGGER_FACTORY_IMPLEMENTATION
    java.lang.Class class$twitter4j$internal$logging$Logger -> class$twitter4j$internal$logging$Logger
    twitter4j.internal.logging.LoggerFactory getLoggerFactory(java.lang.String,java.lang.String) -> getLoggerFactory
    twitter4j.internal.logging.Logger getLogger(java.lang.Class) -> getLogger
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.String) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.String) -> warn
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.internal.logging.LoggerFactory -> twitter4j.internal.logging.LoggerFactory:
    twitter4j.internal.logging.Logger getLogger(java.lang.Class) -> getLogger
twitter4j.internal.logging.NullLogger -> twitter4j.internal.logging.NullLogger:
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.String) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.String) -> warn
twitter4j.internal.logging.NullLoggerFactory -> twitter4j.internal.logging.NullLoggerFactory:
    twitter4j.internal.logging.Logger SINGLETON -> SINGLETON
    twitter4j.internal.logging.Logger getLogger(java.lang.Class) -> getLogger
twitter4j.internal.logging.SLF4JLogger -> twitter4j.internal.logging.SLF4JLogger:
    org.slf4j.Logger LOGGER -> LOGGER
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.String) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.String) -> warn
twitter4j.internal.logging.SLF4JLoggerFactory -> twitter4j.internal.logging.SLF4JLoggerFactory:
    twitter4j.internal.logging.Logger getLogger(java.lang.Class) -> getLogger
twitter4j.internal.logging.StdOutLogger -> twitter4j.internal.logging.StdOutLogger:
    boolean DEBUG -> DEBUG
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.String) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.String) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.String) -> warn
twitter4j.internal.logging.StdOutLoggerFactory -> twitter4j.internal.logging.StdOutLoggerFactory:
    twitter4j.internal.logging.Logger SINGLETON -> SINGLETON
    twitter4j.internal.logging.Logger getLogger(java.lang.Class) -> getLogger
twitter4j.internal.org.json.CDL -> twitter4j.internal.org.json.CDL:
    java.lang.String getValue(twitter4j.internal.org.json.JSONTokener) -> getValue
    twitter4j.internal.org.json.JSONArray rowToJSONArray(twitter4j.internal.org.json.JSONTokener) -> rowToJSONArray
    twitter4j.internal.org.json.JSONObject rowToJSONObject(twitter4j.internal.org.json.JSONArray,twitter4j.internal.org.json.JSONTokener) -> rowToJSONObject
    java.lang.String rowToString(twitter4j.internal.org.json.JSONArray) -> rowToString
    twitter4j.internal.org.json.JSONArray toJSONArray(java.lang.String) -> toJSONArray
    twitter4j.internal.org.json.JSONArray toJSONArray(twitter4j.internal.org.json.JSONTokener) -> toJSONArray
    twitter4j.internal.org.json.JSONArray toJSONArray(twitter4j.internal.org.json.JSONArray,java.lang.String) -> toJSONArray
    twitter4j.internal.org.json.JSONArray toJSONArray(twitter4j.internal.org.json.JSONArray,twitter4j.internal.org.json.JSONTokener) -> toJSONArray
    java.lang.String toString(twitter4j.internal.org.json.JSONArray) -> toString
    java.lang.String toString(twitter4j.internal.org.json.JSONArray,twitter4j.internal.org.json.JSONArray) -> toString
twitter4j.internal.org.json.Cookie -> twitter4j.internal.org.json.Cookie:
    java.lang.String escape(java.lang.String) -> escape
    twitter4j.internal.org.json.JSONObject toJSONObject(java.lang.String) -> toJSONObject
    java.lang.String toString(twitter4j.internal.org.json.JSONObject) -> toString
    java.lang.String unescape(java.lang.String) -> unescape
twitter4j.internal.org.json.CookieList -> twitter4j.internal.org.json.CookieList:
    twitter4j.internal.org.json.JSONObject toJSONObject(java.lang.String) -> toJSONObject
    java.lang.String toString(twitter4j.internal.org.json.JSONObject) -> toString
twitter4j.internal.org.json.HTTP -> twitter4j.internal.org.json.HTTP:
    java.lang.String CRLF -> CRLF
    twitter4j.internal.org.json.JSONObject toJSONObject(java.lang.String) -> toJSONObject
    java.lang.String toString(twitter4j.internal.org.json.JSONObject) -> toString
twitter4j.internal.org.json.HTTPTokener -> twitter4j.internal.org.json.HTTPTokener:
    java.lang.String nextToken() -> nextToken
twitter4j.internal.org.json.JSONArray -> twitter4j.internal.org.json.JSONArray:
    java.util.ArrayList myArrayList -> myArrayList
    java.lang.Object get(int) -> get
    boolean getBoolean(int) -> getBoolean
    double getDouble(int) -> getDouble
    int getInt(int) -> getInt
    twitter4j.internal.org.json.JSONArray getJSONArray(int) -> getJSONArray
    twitter4j.internal.org.json.JSONObject getJSONObject(int) -> getJSONObject
    long getLong(int) -> getLong
    java.lang.String getString(int) -> getString
    boolean isNull(int) -> isNull
    java.lang.String join(java.lang.String) -> join
    int length() -> length
    java.lang.Object opt(int) -> opt
    boolean optBoolean(int) -> optBoolean
    boolean optBoolean(int,boolean) -> optBoolean
    double optDouble(int) -> optDouble
    double optDouble(int,double) -> optDouble
    int optInt(int) -> optInt
    int optInt(int,int) -> optInt
    twitter4j.internal.org.json.JSONArray optJSONArray(int) -> optJSONArray
    twitter4j.internal.org.json.JSONObject optJSONObject(int) -> optJSONObject
    long optLong(int) -> optLong
    long optLong(int,long) -> optLong
    java.lang.String optString(int) -> optString
    java.lang.String optString(int,java.lang.String) -> optString
    twitter4j.internal.org.json.JSONArray put(boolean) -> put
    twitter4j.internal.org.json.JSONArray put(java.util.Collection) -> put
    twitter4j.internal.org.json.JSONArray put(double) -> put
    twitter4j.internal.org.json.JSONArray put(int) -> put
    twitter4j.internal.org.json.JSONArray put(long) -> put
    twitter4j.internal.org.json.JSONArray put(java.util.Map) -> put
    twitter4j.internal.org.json.JSONArray put(java.lang.Object) -> put
    twitter4j.internal.org.json.JSONArray put(int,boolean) -> put
    twitter4j.internal.org.json.JSONArray put(int,java.util.Collection) -> put
    twitter4j.internal.org.json.JSONArray put(int,double) -> put
    twitter4j.internal.org.json.JSONArray put(int,int) -> put
    twitter4j.internal.org.json.JSONArray put(int,long) -> put
    twitter4j.internal.org.json.JSONArray put(int,java.util.Map) -> put
    twitter4j.internal.org.json.JSONArray put(int,java.lang.Object) -> put
    java.lang.Object remove(int) -> remove
    twitter4j.internal.org.json.JSONObject toJSONObject(twitter4j.internal.org.json.JSONArray) -> toJSONObject
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    java.lang.String toString(int,int) -> toString
    java.io.Writer write(java.io.Writer) -> write
twitter4j.internal.org.json.JSONException -> twitter4j.internal.org.json.JSONException:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> cause
    java.lang.Throwable getCause() -> getCause
twitter4j.internal.org.json.JSONML -> twitter4j.internal.org.json.JSONML:
    java.lang.Object parse(twitter4j.internal.org.json.XMLTokener,boolean,twitter4j.internal.org.json.JSONArray) -> parse
    twitter4j.internal.org.json.JSONArray toJSONArray(java.lang.String) -> toJSONArray
    twitter4j.internal.org.json.JSONArray toJSONArray(twitter4j.internal.org.json.XMLTokener) -> toJSONArray
    twitter4j.internal.org.json.JSONObject toJSONObject(twitter4j.internal.org.json.XMLTokener) -> toJSONObject
    twitter4j.internal.org.json.JSONObject toJSONObject(java.lang.String) -> toJSONObject
    java.lang.String toString(twitter4j.internal.org.json.JSONArray) -> toString
    java.lang.String toString(twitter4j.internal.org.json.JSONObject) -> toString
twitter4j.internal.org.json.JSONObject -> twitter4j.internal.org.json.JSONObject:
    java.util.Map map -> map
    java.lang.Object NULL -> NULL
    twitter4j.internal.org.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> accumulate
    twitter4j.internal.org.json.JSONObject append(java.lang.String,java.lang.Object) -> append
    java.lang.String doubleToString(double) -> doubleToString
    java.lang.Object get(java.lang.String) -> get
    boolean getBoolean(java.lang.String) -> getBoolean
    double getDouble(java.lang.String) -> getDouble
    int getInt(java.lang.String) -> getInt
    twitter4j.internal.org.json.JSONArray getJSONArray(java.lang.String) -> getJSONArray
    twitter4j.internal.org.json.JSONObject getJSONObject(java.lang.String) -> getJSONObject
    long getLong(java.lang.String) -> getLong
    java.lang.String[] getNames(twitter4j.internal.org.json.JSONObject) -> getNames
    java.lang.String[] getNames(java.lang.Object) -> getNames
    java.lang.String getString(java.lang.String) -> getString
    boolean has(java.lang.String) -> has
    twitter4j.internal.org.json.JSONObject increment(java.lang.String) -> increment
    boolean isNull(java.lang.String) -> isNull
    java.util.Iterator keys() -> keys
    int length() -> length
    twitter4j.internal.org.json.JSONArray names() -> names
    java.lang.String numberToString(java.lang.Number) -> numberToString
    java.lang.Object opt(java.lang.String) -> opt
    boolean optBoolean(java.lang.String) -> optBoolean
    boolean optBoolean(java.lang.String,boolean) -> optBoolean
    double optDouble(java.lang.String) -> optDouble
    double optDouble(java.lang.String,double) -> optDouble
    int optInt(java.lang.String) -> optInt
    int optInt(java.lang.String,int) -> optInt
    twitter4j.internal.org.json.JSONArray optJSONArray(java.lang.String) -> optJSONArray
    twitter4j.internal.org.json.JSONObject optJSONObject(java.lang.String) -> optJSONObject
    long optLong(java.lang.String) -> optLong
    long optLong(java.lang.String,long) -> optLong
    java.lang.String optString(java.lang.String) -> optString
    java.lang.String optString(java.lang.String,java.lang.String) -> optString
    void populateMap(java.lang.Object) -> populateMap
    twitter4j.internal.org.json.JSONObject put(java.lang.String,boolean) -> put
    twitter4j.internal.org.json.JSONObject put(java.lang.String,java.util.Collection) -> put
    twitter4j.internal.org.json.JSONObject put(java.lang.String,double) -> put
    twitter4j.internal.org.json.JSONObject put(java.lang.String,int) -> put
    twitter4j.internal.org.json.JSONObject put(java.lang.String,long) -> put
    twitter4j.internal.org.json.JSONObject put(java.lang.String,java.util.Map) -> put
    twitter4j.internal.org.json.JSONObject put(java.lang.String,java.lang.Object) -> put
    twitter4j.internal.org.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> putOnce
    twitter4j.internal.org.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> putOpt
    java.lang.String quote(java.lang.String) -> quote
    java.lang.Object remove(java.lang.String) -> remove
    java.util.Iterator sortedKeys() -> sortedKeys
    java.lang.Object stringToValue(java.lang.String) -> stringToValue
    void testValidity(java.lang.Object) -> testValidity
    twitter4j.internal.org.json.JSONArray toJSONArray(twitter4j.internal.org.json.JSONArray) -> toJSONArray
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> toString
    java.lang.String toString(int,int) -> toString
    java.lang.String valueToString(java.lang.Object) -> valueToString
    java.lang.String valueToString(java.lang.Object,int,int) -> valueToString
    java.lang.Object wrap(java.lang.Object) -> wrap
    java.io.Writer write(java.io.Writer) -> write
twitter4j.internal.org.json.JSONObject$1 -> twitter4j.internal.org.json.JSONObject$1:
twitter4j.internal.org.json.JSONObject$Null -> twitter4j.internal.org.json.JSONObject$Null:
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
twitter4j.internal.org.json.JSONString -> twitter4j.internal.org.json.JSONString:
    java.lang.String toJSONString() -> toJSONString
twitter4j.internal.org.json.JSONStringer -> twitter4j.internal.org.json.JSONStringer:
    java.lang.String toString() -> toString
twitter4j.internal.org.json.JSONTokener -> twitter4j.internal.org.json.JSONTokener:
    int character -> character
    boolean eof -> eof
    int index -> index
    int line -> line
    char previous -> previous
    java.io.Reader reader -> reader
    boolean usePrevious -> usePrevious
    void back() -> back
    int dehexchar(char) -> dehexchar
    boolean end() -> end
    boolean more() -> more
    char next() -> next
    char next(char) -> next
    java.lang.String next(int) -> next
    char nextClean() -> nextClean
    java.lang.String nextString(char) -> nextString
    java.lang.String nextTo(char) -> nextTo
    java.lang.String nextTo(java.lang.String) -> nextTo
    java.lang.Object nextValue() -> nextValue
    char skipTo(char) -> skipTo
    twitter4j.internal.org.json.JSONException syntaxError(java.lang.String) -> syntaxError
    java.lang.String toString() -> toString
twitter4j.internal.org.json.JSONWriter -> twitter4j.internal.org.json.JSONWriter:
    int maxdepth -> maxdepth
    boolean comma -> comma
    char mode -> mode
    twitter4j.internal.org.json.JSONObject[] stack -> stack
    int top -> top
    java.io.Writer writer -> writer
    twitter4j.internal.org.json.JSONWriter append(java.lang.String) -> append
    twitter4j.internal.org.json.JSONWriter array() -> array
    twitter4j.internal.org.json.JSONWriter end(char,char) -> end
    twitter4j.internal.org.json.JSONWriter endArray() -> endArray
    twitter4j.internal.org.json.JSONWriter endObject() -> endObject
    twitter4j.internal.org.json.JSONWriter key(java.lang.String) -> key
    twitter4j.internal.org.json.JSONWriter object() -> object
    void pop(char) -> pop
    void push(twitter4j.internal.org.json.JSONObject) -> push
    twitter4j.internal.org.json.JSONWriter value(boolean) -> value
    twitter4j.internal.org.json.JSONWriter value(double) -> value
    twitter4j.internal.org.json.JSONWriter value(long) -> value
    twitter4j.internal.org.json.JSONWriter value(java.lang.Object) -> value
twitter4j.internal.org.json.XML -> twitter4j.internal.org.json.XML:
    java.lang.Character AMP -> AMP
    java.lang.Character APOS -> APOS
    java.lang.Character BANG -> BANG
    java.lang.Character EQ -> EQ
    java.lang.Character GT -> GT
    java.lang.Character LT -> LT
    java.lang.Character QUEST -> QUEST
    java.lang.Character QUOT -> QUOT
    java.lang.Character SLASH -> SLASH
    java.lang.String escape(java.lang.String) -> escape
    void noSpace(java.lang.String) -> noSpace
    boolean parse(twitter4j.internal.org.json.XMLTokener,twitter4j.internal.org.json.JSONObject,java.lang.String) -> parse
    java.lang.Object stringToValue(java.lang.String) -> stringToValue
    twitter4j.internal.org.json.JSONObject toJSONObject(java.lang.String) -> toJSONObject
    java.lang.String toString(java.lang.Object) -> toString
    java.lang.String toString(java.lang.Object,java.lang.String) -> toString
twitter4j.internal.org.json.XMLTokener -> twitter4j.internal.org.json.XMLTokener:
    java.util.HashMap entity -> entity
    java.lang.String nextCDATA() -> nextCDATA
    java.lang.Object nextContent() -> nextContent
    java.lang.Object nextEntity(char) -> nextEntity
    java.lang.Object nextMeta() -> nextMeta
    java.lang.Object nextToken() -> nextToken
    boolean skipPast(java.lang.String) -> skipPast
twitter4j.internal.util.ParseUtil -> twitter4j.internal.util.ParseUtil:
    java.lang.ThreadLocal formatMap -> formatMap
    java.lang.String getUnescapedString(java.lang.String,twitter4j.internal.org.json.JSONObject) -> getUnescapedString
    java.lang.String getRawString(java.lang.String,twitter4j.internal.org.json.JSONObject) -> getRawString
    java.lang.String getURLDecodedString(java.lang.String,twitter4j.internal.org.json.JSONObject) -> getURLDecodedString
    java.util.Date getDate(java.lang.String,twitter4j.internal.org.json.JSONObject) -> getDate
    java.util.Date getDate(java.lang.String,twitter4j.internal.org.json.JSONObject,java.lang.String) -> getDate
    java.util.Date getDate(java.lang.String,java.lang.String) -> getDate
    int getInt(java.lang.String,twitter4j.internal.org.json.JSONObject) -> getInt
    int getInt(java.lang.String) -> getInt
    long getLong(java.lang.String,twitter4j.internal.org.json.JSONObject) -> getLong
    long getLong(java.lang.String) -> getLong
    double getDouble(java.lang.String,twitter4j.internal.org.json.JSONObject) -> getDouble
    boolean getBoolean(java.lang.String,twitter4j.internal.org.json.JSONObject) -> getBoolean
twitter4j.internal.util.ParseUtil$1 -> twitter4j.internal.util.ParseUtil$1:
    java.util.Map initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
twitter4j.internal.util.StringUtil -> twitter4j.internal.util.StringUtil:
    java.lang.String maskString(java.lang.String) -> maskString
    java.lang.String[] split(java.lang.String,java.lang.String) -> split
    java.lang.String join(int[]) -> join
    java.lang.String join(java.lang.String[]) -> join
twitter4j.json.DataObjectFactory -> twitter4j.json.DataObjectFactory:
    java.lang.reflect.Constructor statusConstructor -> statusConstructor
    java.lang.reflect.Constructor userConstructor -> userConstructor
    java.lang.reflect.Constructor tweetConstructor -> tweetConstructor
    java.lang.reflect.Constructor relationshipConstructor -> relationshipConstructor
    java.lang.reflect.Constructor placeConstructor -> placeConstructor
    java.lang.reflect.Constructor savedSearchConstructor -> savedSearchConstructor
    java.lang.reflect.Constructor trendConstructor -> trendConstructor
    java.lang.reflect.Constructor trendsConstructor -> trendsConstructor
    java.lang.reflect.Constructor IDsConstructor -> IDsConstructor
    java.lang.reflect.Constructor rateLimitStatusConstructor -> rateLimitStatusConstructor
    java.lang.reflect.Constructor categoryConstructor -> categoryConstructor
    java.lang.reflect.Constructor directMessageConstructor -> directMessageConstructor
    java.lang.reflect.Constructor locationConstructor -> locationConstructor
    java.lang.reflect.Constructor userListConstructor -> userListConstructor
    java.lang.reflect.Constructor relatedResultsConstructor -> relatedResultsConstructor
    java.lang.reflect.Constructor statusDeletionNoticeConstructor -> statusDeletionNoticeConstructor
    java.lang.reflect.Constructor accountTotalsConstructor -> accountTotalsConstructor
    java.lang.ThreadLocal rawJsonMap -> rawJsonMap
    java.lang.Class class$twitter4j$internal$org$json$JSONObject -> class$twitter4j$internal$org$json$JSONObject
    java.lang.Class class$java$lang$String -> class$java$lang$String
    java.lang.Class class$twitter4j$internal$org$json$JSONArray -> class$twitter4j$internal$org$json$JSONArray
    java.lang.String getRawJSON(java.lang.Object) -> getRawJSON
    twitter4j.Status createStatus(java.lang.String) -> createStatus
    twitter4j.User createUser(java.lang.String) -> createUser
    twitter4j.AccountTotals createAccountTotals(java.lang.String) -> createAccountTotals
    twitter4j.Tweet createTweet(java.lang.String) -> createTweet
    twitter4j.Relationship createRelationship(java.lang.String) -> createRelationship
    twitter4j.Place createPlace(java.lang.String) -> createPlace
    twitter4j.SavedSearch createSavedSearch(java.lang.String) -> createSavedSearch
    twitter4j.Trend createTrend(java.lang.String) -> createTrend
    twitter4j.Trends createTrends(java.lang.String) -> createTrends
    twitter4j.IDs createIDs(java.lang.String) -> createIDs
    twitter4j.RateLimitStatus createRateLimitStatus(java.lang.String) -> createRateLimitStatus
    twitter4j.Category createCategory(java.lang.String) -> createCategory
    twitter4j.DirectMessage createDirectMessage(java.lang.String) -> createDirectMessage
    twitter4j.Location createLocation(java.lang.String) -> createLocation
    twitter4j.UserList createUserList(java.lang.String) -> createUserList
    twitter4j.RelatedResults createRelatedResults(java.lang.String) -> createRelatedResults
    java.lang.Object createObject(java.lang.String) -> createObject
    void clearThreadLocalMap() -> clearThreadLocalMap
    java.lang.Object registerJSONObject(java.lang.Object,java.lang.Object) -> registerJSONObject
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.json.DataObjectFactory$1 -> twitter4j.json.DataObjectFactory$1:
    java.util.Map initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
twitter4j.json.JSONObjectType -> twitter4j.json.JSONObjectType:
    twitter4j.internal.logging.Logger logger -> logger
    twitter4j.json.JSONObjectType SENDER -> SENDER
    twitter4j.json.JSONObjectType STATUS -> STATUS
    twitter4j.json.JSONObjectType DIRECT_MESSAGE -> DIRECT_MESSAGE
    twitter4j.json.JSONObjectType DELETE -> DELETE
    twitter4j.json.JSONObjectType LIMIT -> LIMIT
    twitter4j.json.JSONObjectType SCRUB_GEO -> SCRUB_GEO
    twitter4j.json.JSONObjectType FRIENDS -> FRIENDS
    twitter4j.json.JSONObjectType FAVORITE -> FAVORITE
    twitter4j.json.JSONObjectType UNFAVORITE -> UNFAVORITE
    twitter4j.json.JSONObjectType RETWEET -> RETWEET
    twitter4j.json.JSONObjectType FOLLOW -> FOLLOW
    twitter4j.json.JSONObjectType USER_LIST_SUBSCRIBED -> USER_LIST_SUBSCRIBED
    twitter4j.json.JSONObjectType USER_LIST_CREATED -> USER_LIST_CREATED
    twitter4j.json.JSONObjectType USER_LIST_UPDATED -> USER_LIST_UPDATED
    twitter4j.json.JSONObjectType USER_LIST_DESTROYED -> USER_LIST_DESTROYED
    twitter4j.json.JSONObjectType USER_UPDATE -> USER_UPDATE
    twitter4j.json.JSONObjectType BLOCK -> BLOCK
    twitter4j.json.JSONObjectType UNBLOCK -> UNBLOCK
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    java.lang.Class class$twitter4j$json$JSONObjectType -> class$twitter4j$json$JSONObjectType
    java.lang.String getName() -> getName
    twitter4j.json.JSONObjectType determine(twitter4j.internal.org.json.JSONObject) -> determine
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Class class$(java.lang.String) -> class$
twitter4j.util.CharacterUtil -> twitter4j.util.CharacterUtil:
    int count(java.lang.String) -> count
    boolean isExceedingLengthLimitation(java.lang.String) -> isExceedingLengthLimitation
twitter4j.util.ImageUpload -> twitter4j.util.ImageUpload:
    java.lang.String DEFAULT_TWITPIC_API_KEY -> DEFAULT_TWITPIC_API_KEY
    java.lang.String upload(java.io.File) -> upload
    java.lang.String upload(java.io.File,java.lang.String) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream,java.lang.String) -> upload
    twitter4j.util.ImageUpload getTwitpicUploader(twitter4j.Twitter) -> getTwitpicUploader
    twitter4j.util.ImageUpload getTwitpicUploader(twitter4j.http.BasicAuthorization) -> getTwitpicUploader
    twitter4j.util.ImageUpload getTwitpicUploader(java.lang.String,twitter4j.http.OAuthAuthorization) -> getTwitpicUploader
    twitter4j.util.ImageUpload getTweetPhotoUploader(java.lang.String,twitter4j.http.OAuthAuthorization) -> getTweetPhotoUploader
    twitter4j.util.ImageUpload getYFrogUploader(twitter4j.Twitter) -> getYFrogUploader
    twitter4j.util.ImageUpload getYFrogUploader(twitter4j.http.BasicAuthorization) -> getYFrogUploader
    twitter4j.util.ImageUpload getYFrogUploader(java.lang.String,twitter4j.http.OAuthAuthorization) -> getYFrogUploader
    twitter4j.util.ImageUpload getImgLyUploader(twitter4j.http.OAuthAuthorization) -> getImgLyUploader
    twitter4j.util.ImageUpload getTwitgooUploader(twitter4j.http.OAuthAuthorization) -> getTwitgooUploader
    twitter4j.util.ImageUpload getTwippleUploader(twitter4j.http.OAuthAuthorization) -> getTwippleUploader
    void ensureBasicEnabled(twitter4j.http.Authorization) -> ensureBasicEnabled
    twitter4j.internal.http.HttpParameter[] appendHttpParameters(twitter4j.internal.http.HttpParameter[],twitter4j.internal.http.HttpParameter[]) -> appendHttpParameters
    twitter4j.internal.http.HttpParameter[] access$000(twitter4j.internal.http.HttpParameter[],twitter4j.internal.http.HttpParameter[]) -> access$000
twitter4j.util.ImageUpload$ImgLyOAuthUploader -> twitter4j.util.ImageUpload$ImgLyOAuthUploader:
    twitter4j.http.OAuthAuthorization auth -> auth
    java.lang.String IMGLY_UPLOAD_URL -> IMGLY_UPLOAD_URL
    java.lang.String TWITTER_VERIFY_CREDENTIALS -> TWITTER_VERIFY_CREDENTIALS
    java.lang.String upload(java.io.File) -> upload
    java.lang.String upload(java.io.File,java.lang.String) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream,java.lang.String) -> upload
    java.lang.String upload(twitter4j.internal.http.HttpParameter[]) -> upload
    java.lang.String generateVerifyCredentialsAuthorizationHeader() -> generateVerifyCredentialsAuthorizationHeader
twitter4j.util.ImageUpload$TweetPhotoOAuthUploader -> twitter4j.util.ImageUpload$TweetPhotoOAuthUploader:
    java.lang.String tweetPhotoAPIKey -> tweetPhotoAPIKey
    twitter4j.http.OAuthAuthorization auth -> auth
    java.lang.String TWEETPHOTO_UPLOAD_URL -> TWEETPHOTO_UPLOAD_URL
    java.lang.String TWITTER_VERIFY_CREDENTIALS -> TWITTER_VERIFY_CREDENTIALS
    java.lang.String upload(java.io.File) -> upload
    java.lang.String upload(java.io.File,java.lang.String) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream,java.lang.String) -> upload
    java.lang.String upload(twitter4j.internal.http.HttpParameter[]) -> upload
    java.lang.String generateVerifyCredentialsAuthorizationHeader() -> generateVerifyCredentialsAuthorizationHeader
twitter4j.util.ImageUpload$TwippleUploader -> twitter4j.util.ImageUpload$TwippleUploader:
    twitter4j.http.OAuthAuthorization auth -> auth
    java.lang.String TWIPPLE_UPLOAD_URL -> TWIPPLE_UPLOAD_URL
    java.lang.String TWITTER_VERIFY_CREDENTIALS -> TWITTER_VERIFY_CREDENTIALS
    java.lang.String upload(java.io.File) -> upload
    java.lang.String upload(java.io.File,java.lang.String) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream,java.lang.String) -> upload
    java.lang.String upload(twitter4j.internal.http.HttpParameter[]) -> upload
    java.lang.String generateSignedVerifyCredentialsURL() -> generateSignedVerifyCredentialsURL
twitter4j.util.ImageUpload$TwitgooOAuthUploader -> twitter4j.util.ImageUpload$TwitgooOAuthUploader:
    twitter4j.http.OAuthAuthorization auth -> auth
    java.lang.String TWITGOO_UPLOAD_URL -> TWITGOO_UPLOAD_URL
    java.lang.String TWITTER_VERIFY_CREDENTIALS -> TWITTER_VERIFY_CREDENTIALS
    java.lang.String upload(java.io.File) -> upload
    java.lang.String upload(java.io.File,java.lang.String) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream,java.lang.String) -> upload
    java.lang.String upload(twitter4j.internal.http.HttpParameter[]) -> upload
    java.lang.String generateVerifyCredentialsAuthorizationHeader() -> generateVerifyCredentialsAuthorizationHeader
twitter4j.util.ImageUpload$TwitpicBasicAuthUploader -> twitter4j.util.ImageUpload$TwitpicBasicAuthUploader:
    twitter4j.http.BasicAuthorization auth -> auth
    java.lang.String TWITPIC_UPLOAD_URL -> TWITPIC_UPLOAD_URL
    java.lang.String upload(java.io.File) -> upload
    java.lang.String upload(java.io.File,java.lang.String) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream,java.lang.String) -> upload
    java.lang.String upload(twitter4j.internal.http.HttpParameter[]) -> upload
twitter4j.util.ImageUpload$TwitpicOAuthUploader -> twitter4j.util.ImageUpload$TwitpicOAuthUploader:
    java.lang.String twitpicAPIKey -> twitpicAPIKey
    twitter4j.http.OAuthAuthorization auth -> auth
    java.lang.String TWITPIC_UPLOAD_URL -> TWITPIC_UPLOAD_URL
    java.lang.String TWITTER_VERIFY_CREDENTIALS -> TWITTER_VERIFY_CREDENTIALS
    java.lang.String upload(java.io.File) -> upload
    java.lang.String upload(java.io.File,java.lang.String) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream,java.lang.String) -> upload
    java.lang.String upload(twitter4j.internal.http.HttpParameter[]) -> upload
    java.lang.String generateVerifyCredentialsAuthorizationHeader() -> generateVerifyCredentialsAuthorizationHeader
twitter4j.util.ImageUpload$YFrogBasicAuthUploader -> twitter4j.util.ImageUpload$YFrogBasicAuthUploader:
    twitter4j.http.BasicAuthorization auth -> auth
    java.lang.String YFROG_UPLOAD_URL -> YFROG_UPLOAD_URL
    java.lang.String upload(java.io.File) -> upload
    java.lang.String upload(java.io.File,java.lang.String) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream,java.lang.String) -> upload
    java.lang.String upload(twitter4j.internal.http.HttpParameter[]) -> upload
twitter4j.util.ImageUpload$YFrogOAuthUploader -> twitter4j.util.ImageUpload$YFrogOAuthUploader:
    java.lang.String user -> user
    twitter4j.http.OAuthAuthorization auth -> auth
    java.lang.String YFROG_UPLOAD_URL -> YFROG_UPLOAD_URL
    java.lang.String TWITTER_VERIFY_CREDENTIALS -> TWITTER_VERIFY_CREDENTIALS
    java.lang.String upload(java.io.File) -> upload
    java.lang.String upload(java.io.File,java.lang.String) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream) -> upload
    java.lang.String upload(java.lang.String,java.io.InputStream,java.lang.String) -> upload
    java.lang.String upload(twitter4j.internal.http.HttpParameter[]) -> upload
    java.lang.String generateSignedVerifyCredentialsURL() -> generateSignedVerifyCredentialsURL
twitter4j.util.TimeSpanConverter -> twitter4j.util.TimeSpanConverter:
    int ONE_HOUR_IN_SECONDS -> ONE_HOUR_IN_SECONDS
    int ONE_DAY_IN_SECONDS -> ONE_DAY_IN_SECONDS
    int ONE_MONTH_IN_SECONDS -> ONE_MONTH_IN_SECONDS
    long serialVersionUID -> serialVersionUID
    java.text.MessageFormat[] formats -> formats
    java.text.SimpleDateFormat dateMonth -> dateMonth
    java.text.SimpleDateFormat dateMonthYear -> dateMonthYear
    int NOW -> NOW
    int N_SECONDS_AGO -> N_SECONDS_AGO
    int A_MINUTE_AGO -> A_MINUTE_AGO
    int N_MINUTES_AGO -> N_MINUTES_AGO
    int AN_HOUR_AGO -> AN_HOUR_AGO
    int N_HOURS_AGO -> N_HOURS_AGO
    java.lang.String toTimeSpanString(java.util.Date) -> toTimeSpanString
    java.lang.String toTimeSpanString(long) -> toTimeSpanString
    java.lang.String toTimeSpanString(int) -> toTimeSpanString
